/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ErrorRes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorRes{}

// ErrorRes Details for the error response
type ErrorRes struct {
	Code *string `json:"code,omitempty"`
	Message string `json:"message"`
	Property *string `json:"property,omitempty"`
	Status *int32 `json:"status,omitempty"`
}

type _ErrorRes ErrorRes

// NewErrorRes instantiates a new ErrorRes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorRes(message string) *ErrorRes {
	this := ErrorRes{}
	this.Message = message
	return &this
}

// NewErrorResWithDefaults instantiates a new ErrorRes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResWithDefaults() *ErrorRes {
	this := ErrorRes{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ErrorRes) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRes) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ErrorRes) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ErrorRes) SetCode(v string) {
	o.Code = &v
}

// GetMessage returns the Message field value
func (o *ErrorRes) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ErrorRes) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ErrorRes) SetMessage(v string) {
	o.Message = v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *ErrorRes) GetProperty() string {
	if o == nil || IsNil(o.Property) {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRes) GetPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *ErrorRes) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *ErrorRes) SetProperty(v string) {
	o.Property = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ErrorRes) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorRes) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ErrorRes) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *ErrorRes) SetStatus(v int32) {
	o.Status = &v
}

func (o ErrorRes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorRes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	toSerialize["message"] = o.Message
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *ErrorRes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorRes := _ErrorRes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varErrorRes)

	if err != nil {
		return err
	}

	*o = ErrorRes(varErrorRes)

	return err
}

type NullableErrorRes struct {
	value *ErrorRes
	isSet bool
}

func (v NullableErrorRes) Get() *ErrorRes {
	return v.value
}

func (v *NullableErrorRes) Set(val *ErrorRes) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorRes) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorRes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorRes(val *ErrorRes) *NullableErrorRes {
	return &NullableErrorRes{value: val, isSet: true}
}

func (v NullableErrorRes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorRes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


