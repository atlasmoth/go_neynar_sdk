/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserVerifiedAddresses type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserVerifiedAddresses{}

// UserVerifiedAddresses struct for UserVerifiedAddresses
type UserVerifiedAddresses struct {
	EthAddresses []string `json:"eth_addresses"`
	SolAddresses []string `json:"sol_addresses"`
}

type _UserVerifiedAddresses UserVerifiedAddresses

// NewUserVerifiedAddresses instantiates a new UserVerifiedAddresses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserVerifiedAddresses(ethAddresses []string, solAddresses []string) *UserVerifiedAddresses {
	this := UserVerifiedAddresses{}
	this.EthAddresses = ethAddresses
	this.SolAddresses = solAddresses
	return &this
}

// NewUserVerifiedAddressesWithDefaults instantiates a new UserVerifiedAddresses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserVerifiedAddressesWithDefaults() *UserVerifiedAddresses {
	this := UserVerifiedAddresses{}
	return &this
}

// GetEthAddresses returns the EthAddresses field value
func (o *UserVerifiedAddresses) GetEthAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EthAddresses
}

// GetEthAddressesOk returns a tuple with the EthAddresses field value
// and a boolean to check if the value has been set.
func (o *UserVerifiedAddresses) GetEthAddressesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EthAddresses, true
}

// SetEthAddresses sets field value
func (o *UserVerifiedAddresses) SetEthAddresses(v []string) {
	o.EthAddresses = v
}

// GetSolAddresses returns the SolAddresses field value
func (o *UserVerifiedAddresses) GetSolAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SolAddresses
}

// GetSolAddressesOk returns a tuple with the SolAddresses field value
// and a boolean to check if the value has been set.
func (o *UserVerifiedAddresses) GetSolAddressesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SolAddresses, true
}

// SetSolAddresses sets field value
func (o *UserVerifiedAddresses) SetSolAddresses(v []string) {
	o.SolAddresses = v
}

func (o UserVerifiedAddresses) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserVerifiedAddresses) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eth_addresses"] = o.EthAddresses
	toSerialize["sol_addresses"] = o.SolAddresses
	return toSerialize, nil
}

func (o *UserVerifiedAddresses) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eth_addresses",
		"sol_addresses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserVerifiedAddresses := _UserVerifiedAddresses{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserVerifiedAddresses)

	if err != nil {
		return err
	}

	*o = UserVerifiedAddresses(varUserVerifiedAddresses)

	return err
}

type NullableUserVerifiedAddresses struct {
	value *UserVerifiedAddresses
	isSet bool
}

func (v NullableUserVerifiedAddresses) Get() *UserVerifiedAddresses {
	return v.value
}

func (v *NullableUserVerifiedAddresses) Set(val *UserVerifiedAddresses) {
	v.value = val
	v.isSet = true
}

func (v NullableUserVerifiedAddresses) IsSet() bool {
	return v.isSet
}

func (v *NullableUserVerifiedAddresses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserVerifiedAddresses(val *UserVerifiedAddresses) *NullableUserVerifiedAddresses {
	return &NullableUserVerifiedAddresses{value: val, isSet: true}
}

func (v NullableUserVerifiedAddresses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserVerifiedAddresses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
