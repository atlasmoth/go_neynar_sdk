/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Subscriber type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subscriber{}

// Subscriber struct for Subscriber
type Subscriber struct {
	Object       string             `json:"object"`
	User         User               `json:"user"`
	SubscribedTo SubscribedToObject `json:"subscribed_to"`
}

type _Subscriber Subscriber

// NewSubscriber instantiates a new Subscriber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriber(object string, user User, subscribedTo SubscribedToObject) *Subscriber {
	this := Subscriber{}
	this.Object = object
	this.User = user
	this.SubscribedTo = subscribedTo
	return &this
}

// NewSubscriberWithDefaults instantiates a new Subscriber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriberWithDefaults() *Subscriber {
	this := Subscriber{}
	return &this
}

// GetObject returns the Object field value
func (o *Subscriber) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Subscriber) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Subscriber) SetObject(v string) {
	o.Object = v
}

// GetUser returns the User field value
func (o *Subscriber) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *Subscriber) GetUserOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *Subscriber) SetUser(v User) {
	o.User = v
}

// GetSubscribedTo returns the SubscribedTo field value
func (o *Subscriber) GetSubscribedTo() SubscribedToObject {
	if o == nil {
		var ret SubscribedToObject
		return ret
	}

	return o.SubscribedTo
}

// GetSubscribedToOk returns a tuple with the SubscribedTo field value
// and a boolean to check if the value has been set.
func (o *Subscriber) GetSubscribedToOk() (*SubscribedToObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscribedTo, true
}

// SetSubscribedTo sets field value
func (o *Subscriber) SetSubscribedTo(v SubscribedToObject) {
	o.SubscribedTo = v
}

func (o Subscriber) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subscriber) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["user"] = o.User
	toSerialize["subscribed_to"] = o.SubscribedTo
	return toSerialize, nil
}

func (o *Subscriber) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"user",
		"subscribed_to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriber := _Subscriber{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscriber)

	if err != nil {
		return err
	}

	*o = Subscriber(varSubscriber)

	return err
}

type NullableSubscriber struct {
	value *Subscriber
	isSet bool
}

func (v NullableSubscriber) Get() *Subscriber {
	return v.value
}

func (v *NullableSubscriber) Set(val *Subscriber) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriber) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriber(val *Subscriber) *NullableSubscriber {
	return &NullableSubscriber{value: val, isSet: true}
}

func (v NullableSubscriber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
