/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SubscribedToObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscribedToObject{}

// SubscribedToObject struct for SubscribedToObject
type SubscribedToObject struct {
	Object string `json:"object"`
	ProviderName string `json:"provider_name"`
	ContractAddress *string `json:"contract_address,omitempty"`
	ProtocolVersion *int32 `json:"protocol_version,omitempty"`
	Chain *int32 `json:"chain,omitempty"`
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	SubscribedAt *time.Time `json:"subscribed_at,omitempty"`
	TierId *string `json:"tier_id,omitempty"`
}

type _SubscribedToObject SubscribedToObject

// NewSubscribedToObject instantiates a new SubscribedToObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscribedToObject(object string, providerName string) *SubscribedToObject {
	this := SubscribedToObject{}
	this.Object = object
	this.ProviderName = providerName
	return &this
}

// NewSubscribedToObjectWithDefaults instantiates a new SubscribedToObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscribedToObjectWithDefaults() *SubscribedToObject {
	this := SubscribedToObject{}
	return &this
}

// GetObject returns the Object field value
func (o *SubscribedToObject) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *SubscribedToObject) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *SubscribedToObject) SetObject(v string) {
	o.Object = v
}

// GetProviderName returns the ProviderName field value
func (o *SubscribedToObject) GetProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value
// and a boolean to check if the value has been set.
func (o *SubscribedToObject) GetProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderName, true
}

// SetProviderName sets field value
func (o *SubscribedToObject) SetProviderName(v string) {
	o.ProviderName = v
}

// GetContractAddress returns the ContractAddress field value if set, zero value otherwise.
func (o *SubscribedToObject) GetContractAddress() string {
	if o == nil || IsNil(o.ContractAddress) {
		var ret string
		return ret
	}
	return *o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribedToObject) GetContractAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ContractAddress) {
		return nil, false
	}
	return o.ContractAddress, true
}

// HasContractAddress returns a boolean if a field has been set.
func (o *SubscribedToObject) HasContractAddress() bool {
	if o != nil && !IsNil(o.ContractAddress) {
		return true
	}

	return false
}

// SetContractAddress gets a reference to the given string and assigns it to the ContractAddress field.
func (o *SubscribedToObject) SetContractAddress(v string) {
	o.ContractAddress = &v
}

// GetProtocolVersion returns the ProtocolVersion field value if set, zero value otherwise.
func (o *SubscribedToObject) GetProtocolVersion() int32 {
	if o == nil || IsNil(o.ProtocolVersion) {
		var ret int32
		return ret
	}
	return *o.ProtocolVersion
}

// GetProtocolVersionOk returns a tuple with the ProtocolVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribedToObject) GetProtocolVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.ProtocolVersion) {
		return nil, false
	}
	return o.ProtocolVersion, true
}

// HasProtocolVersion returns a boolean if a field has been set.
func (o *SubscribedToObject) HasProtocolVersion() bool {
	if o != nil && !IsNil(o.ProtocolVersion) {
		return true
	}

	return false
}

// SetProtocolVersion gets a reference to the given int32 and assigns it to the ProtocolVersion field.
func (o *SubscribedToObject) SetProtocolVersion(v int32) {
	o.ProtocolVersion = &v
}

// GetChain returns the Chain field value if set, zero value otherwise.
func (o *SubscribedToObject) GetChain() int32 {
	if o == nil || IsNil(o.Chain) {
		var ret int32
		return ret
	}
	return *o.Chain
}

// GetChainOk returns a tuple with the Chain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribedToObject) GetChainOk() (*int32, bool) {
	if o == nil || IsNil(o.Chain) {
		return nil, false
	}
	return o.Chain, true
}

// HasChain returns a boolean if a field has been set.
func (o *SubscribedToObject) HasChain() bool {
	if o != nil && !IsNil(o.Chain) {
		return true
	}

	return false
}

// SetChain gets a reference to the given int32 and assigns it to the Chain field.
func (o *SubscribedToObject) SetChain(v int32) {
	o.Chain = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *SubscribedToObject) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribedToObject) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *SubscribedToObject) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *SubscribedToObject) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetSubscribedAt returns the SubscribedAt field value if set, zero value otherwise.
func (o *SubscribedToObject) GetSubscribedAt() time.Time {
	if o == nil || IsNil(o.SubscribedAt) {
		var ret time.Time
		return ret
	}
	return *o.SubscribedAt
}

// GetSubscribedAtOk returns a tuple with the SubscribedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribedToObject) GetSubscribedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SubscribedAt) {
		return nil, false
	}
	return o.SubscribedAt, true
}

// HasSubscribedAt returns a boolean if a field has been set.
func (o *SubscribedToObject) HasSubscribedAt() bool {
	if o != nil && !IsNil(o.SubscribedAt) {
		return true
	}

	return false
}

// SetSubscribedAt gets a reference to the given time.Time and assigns it to the SubscribedAt field.
func (o *SubscribedToObject) SetSubscribedAt(v time.Time) {
	o.SubscribedAt = &v
}

// GetTierId returns the TierId field value if set, zero value otherwise.
func (o *SubscribedToObject) GetTierId() string {
	if o == nil || IsNil(o.TierId) {
		var ret string
		return ret
	}
	return *o.TierId
}

// GetTierIdOk returns a tuple with the TierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribedToObject) GetTierIdOk() (*string, bool) {
	if o == nil || IsNil(o.TierId) {
		return nil, false
	}
	return o.TierId, true
}

// HasTierId returns a boolean if a field has been set.
func (o *SubscribedToObject) HasTierId() bool {
	if o != nil && !IsNil(o.TierId) {
		return true
	}

	return false
}

// SetTierId gets a reference to the given string and assigns it to the TierId field.
func (o *SubscribedToObject) SetTierId(v string) {
	o.TierId = &v
}

func (o SubscribedToObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscribedToObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["provider_name"] = o.ProviderName
	if !IsNil(o.ContractAddress) {
		toSerialize["contract_address"] = o.ContractAddress
	}
	if !IsNil(o.ProtocolVersion) {
		toSerialize["protocol_version"] = o.ProtocolVersion
	}
	if !IsNil(o.Chain) {
		toSerialize["chain"] = o.Chain
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if !IsNil(o.SubscribedAt) {
		toSerialize["subscribed_at"] = o.SubscribedAt
	}
	if !IsNil(o.TierId) {
		toSerialize["tier_id"] = o.TierId
	}
	return toSerialize, nil
}

func (o *SubscribedToObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"provider_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscribedToObject := _SubscribedToObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscribedToObject)

	if err != nil {
		return err
	}

	*o = SubscribedToObject(varSubscribedToObject)

	return err
}

type NullableSubscribedToObject struct {
	value *SubscribedToObject
	isSet bool
}

func (v NullableSubscribedToObject) Get() *SubscribedToObject {
	return v.value
}

func (v *NullableSubscribedToObject) Set(val *SubscribedToObject) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscribedToObject) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscribedToObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscribedToObject(val *SubscribedToObject) *NullableSubscribedToObject {
	return &NullableSubscribedToObject{value: val, isSet: true}
}

func (v NullableSubscribedToObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscribedToObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


