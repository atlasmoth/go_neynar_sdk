/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VerificationType Type of verification. 0 = EOA, 1 = contract
type VerificationType int32

// List of VerificationType
const (
	VERIFICATIONTYPE__0 VerificationType = 0
	VERIFICATIONTYPE__1 VerificationType = 1
)

// All allowed values of VerificationType enum
var AllowedVerificationTypeEnumValues = []VerificationType{
	0,
	1,
}

func (v *VerificationType) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VerificationType(value)
	for _, existing := range AllowedVerificationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VerificationType", value)
}

// NewVerificationTypeFromValue returns a pointer to a valid VerificationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVerificationTypeFromValue(v int32) (*VerificationType, error) {
	ev := VerificationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VerificationType: valid values are %v", v, AllowedVerificationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VerificationType) IsValid() bool {
	for _, existing := range AllowedVerificationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VerificationType value
func (v VerificationType) Ptr() *VerificationType {
	return &v
}

type NullableVerificationType struct {
	value *VerificationType
	isSet bool
}

func (v NullableVerificationType) Get() *VerificationType {
	return v.value
}

func (v *NullableVerificationType) Set(val *VerificationType) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationType) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationType(val *VerificationType) *NullableVerificationType {
	return &NullableVerificationType{value: val, isSet: true}
}

func (v NullableVerificationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
