/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Conversation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Conversation{}

// Conversation struct for Conversation
type Conversation struct {
	Conversation ConversationConversation `json:"conversation"`
	Next         *NextCursor              `json:"next,omitempty"`
}

type _Conversation Conversation

// NewConversation instantiates a new Conversation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversation(conversation ConversationConversation) *Conversation {
	this := Conversation{}
	this.Conversation = conversation
	return &this
}

// NewConversationWithDefaults instantiates a new Conversation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversationWithDefaults() *Conversation {
	this := Conversation{}
	return &this
}

// GetConversation returns the Conversation field value
func (o *Conversation) GetConversation() ConversationConversation {
	if o == nil {
		var ret ConversationConversation
		return ret
	}

	return o.Conversation
}

// GetConversationOk returns a tuple with the Conversation field value
// and a boolean to check if the value has been set.
func (o *Conversation) GetConversationOk() (*ConversationConversation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Conversation, true
}

// SetConversation sets field value
func (o *Conversation) SetConversation(v ConversationConversation) {
	o.Conversation = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *Conversation) GetNext() NextCursor {
	if o == nil || IsNil(o.Next) {
		var ret NextCursor
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conversation) GetNextOk() (*NextCursor, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *Conversation) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given NextCursor and assigns it to the Next field.
func (o *Conversation) SetNext(v NextCursor) {
	o.Next = &v
}

func (o Conversation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Conversation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["conversation"] = o.Conversation
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	return toSerialize, nil
}

func (o *Conversation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conversation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConversation := _Conversation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConversation)

	if err != nil {
		return err
	}

	*o = Conversation(varConversation)

	return err
}

type NullableConversation struct {
	value *Conversation
	isSet bool
}

func (v NullableConversation) Get() *Conversation {
	return v.value
}

func (v *NullableConversation) Set(val *Conversation) {
	v.value = val
	v.isSet = true
}

func (v NullableConversation) IsSet() bool {
	return v.isSet
}

func (v *NullableConversation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversation(val *Conversation) *NullableConversation {
	return &NullableConversation{value: val, isSet: true}
}

func (v NullableConversation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
