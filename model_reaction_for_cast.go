/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ReactionForCast type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReactionForCast{}

// ReactionForCast struct for ReactionForCast
type ReactionForCast struct {
	ReactionType      string    `json:"reaction_type"`
	ReactionTimestamp time.Time `json:"reaction_timestamp"`
	Object            string    `json:"object"`
	User              User      `json:"user"`
}

type _ReactionForCast ReactionForCast

// NewReactionForCast instantiates a new ReactionForCast object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactionForCast(reactionType string, reactionTimestamp time.Time, object string, user User) *ReactionForCast {
	this := ReactionForCast{}
	this.ReactionType = reactionType
	this.ReactionTimestamp = reactionTimestamp
	this.Object = object
	this.User = user
	return &this
}

// NewReactionForCastWithDefaults instantiates a new ReactionForCast object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionForCastWithDefaults() *ReactionForCast {
	this := ReactionForCast{}
	return &this
}

// GetReactionType returns the ReactionType field value
func (o *ReactionForCast) GetReactionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReactionType
}

// GetReactionTypeOk returns a tuple with the ReactionType field value
// and a boolean to check if the value has been set.
func (o *ReactionForCast) GetReactionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReactionType, true
}

// SetReactionType sets field value
func (o *ReactionForCast) SetReactionType(v string) {
	o.ReactionType = v
}

// GetReactionTimestamp returns the ReactionTimestamp field value
func (o *ReactionForCast) GetReactionTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ReactionTimestamp
}

// GetReactionTimestampOk returns a tuple with the ReactionTimestamp field value
// and a boolean to check if the value has been set.
func (o *ReactionForCast) GetReactionTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReactionTimestamp, true
}

// SetReactionTimestamp sets field value
func (o *ReactionForCast) SetReactionTimestamp(v time.Time) {
	o.ReactionTimestamp = v
}

// GetObject returns the Object field value
func (o *ReactionForCast) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *ReactionForCast) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *ReactionForCast) SetObject(v string) {
	o.Object = v
}

// GetUser returns the User field value
func (o *ReactionForCast) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *ReactionForCast) GetUserOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *ReactionForCast) SetUser(v User) {
	o.User = v
}

func (o ReactionForCast) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReactionForCast) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reaction_type"] = o.ReactionType
	toSerialize["reaction_timestamp"] = o.ReactionTimestamp
	toSerialize["object"] = o.Object
	toSerialize["user"] = o.User
	return toSerialize, nil
}

func (o *ReactionForCast) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reaction_type",
		"reaction_timestamp",
		"object",
		"user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReactionForCast := _ReactionForCast{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReactionForCast)

	if err != nil {
		return err
	}

	*o = ReactionForCast(varReactionForCast)

	return err
}

type NullableReactionForCast struct {
	value *ReactionForCast
	isSet bool
}

func (v NullableReactionForCast) Get() *ReactionForCast {
	return v.value
}

func (v *NullableReactionForCast) Set(val *ReactionForCast) {
	v.value = val
	v.isSet = true
}

func (v NullableReactionForCast) IsSet() bool {
	return v.isSet
}

func (v *NullableReactionForCast) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactionForCast(val *ReactionForCast) *NullableReactionForCast {
	return &NullableReactionForCast{value: val, isSet: true}
}

func (v NullableReactionForCast) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactionForCast) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
