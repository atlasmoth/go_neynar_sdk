/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RegisterUserResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterUserResponse{}

// RegisterUserResponse struct for RegisterUserResponse
type RegisterUserResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	Signer  Signer `json:"signer"`
}

type _RegisterUserResponse RegisterUserResponse

// NewRegisterUserResponse instantiates a new RegisterUserResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterUserResponse(success bool, message string, signer Signer) *RegisterUserResponse {
	this := RegisterUserResponse{}
	this.Success = success
	this.Message = message
	this.Signer = signer
	return &this
}

// NewRegisterUserResponseWithDefaults instantiates a new RegisterUserResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterUserResponseWithDefaults() *RegisterUserResponse {
	this := RegisterUserResponse{}
	return &this
}

// GetSuccess returns the Success field value
func (o *RegisterUserResponse) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *RegisterUserResponse) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *RegisterUserResponse) SetSuccess(v bool) {
	o.Success = v
}

// GetMessage returns the Message field value
func (o *RegisterUserResponse) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *RegisterUserResponse) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *RegisterUserResponse) SetMessage(v string) {
	o.Message = v
}

// GetSigner returns the Signer field value
func (o *RegisterUserResponse) GetSigner() Signer {
	if o == nil {
		var ret Signer
		return ret
	}

	return o.Signer
}

// GetSignerOk returns a tuple with the Signer field value
// and a boolean to check if the value has been set.
func (o *RegisterUserResponse) GetSignerOk() (*Signer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signer, true
}

// SetSigner sets field value
func (o *RegisterUserResponse) SetSigner(v Signer) {
	o.Signer = v
}

func (o RegisterUserResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterUserResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	toSerialize["message"] = o.Message
	toSerialize["signer"] = o.Signer
	return toSerialize, nil
}

func (o *RegisterUserResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
		"message",
		"signer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterUserResponse := _RegisterUserResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisterUserResponse)

	if err != nil {
		return err
	}

	*o = RegisterUserResponse(varRegisterUserResponse)

	return err
}

type NullableRegisterUserResponse struct {
	value *RegisterUserResponse
	isSet bool
}

func (v NullableRegisterUserResponse) Get() *RegisterUserResponse {
	return v.value
}

func (v *NullableRegisterUserResponse) Set(val *RegisterUserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterUserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterUserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterUserResponse(val *RegisterUserResponse) *NullableRegisterUserResponse {
	return &NullableRegisterUserResponse{value: val, isSet: true}
}

func (v NullableRegisterUserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterUserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
