/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// EmbeddedCast - struct for EmbeddedCast
type EmbeddedCast struct {
	EmbedCastId *EmbedCastId
	EmbedUrl *EmbedUrl
}

// EmbedCastIdAsEmbeddedCast is a convenience function that returns EmbedCastId wrapped in EmbeddedCast
func EmbedCastIdAsEmbeddedCast(v *EmbedCastId) EmbeddedCast {
	return EmbeddedCast{
		EmbedCastId: v,
	}
}

// EmbedUrlAsEmbeddedCast is a convenience function that returns EmbedUrl wrapped in EmbeddedCast
func EmbedUrlAsEmbeddedCast(v *EmbedUrl) EmbeddedCast {
	return EmbeddedCast{
		EmbedUrl: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EmbeddedCast) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EmbedCastId
	err = newStrictDecoder(data).Decode(&dst.EmbedCastId)
	if err == nil {
		jsonEmbedCastId, _ := json.Marshal(dst.EmbedCastId)
		if string(jsonEmbedCastId) == "{}" { // empty struct
			dst.EmbedCastId = nil
		} else {
			if err = validator.Validate(dst.EmbedCastId); err != nil {
				dst.EmbedCastId = nil
			} else {
				match++
			}
		}
	} else {
		dst.EmbedCastId = nil
	}

	// try to unmarshal data into EmbedUrl
	err = newStrictDecoder(data).Decode(&dst.EmbedUrl)
	if err == nil {
		jsonEmbedUrl, _ := json.Marshal(dst.EmbedUrl)
		if string(jsonEmbedUrl) == "{}" { // empty struct
			dst.EmbedUrl = nil
		} else {
			if err = validator.Validate(dst.EmbedUrl); err != nil {
				dst.EmbedUrl = nil
			} else {
				match++
			}
		}
	} else {
		dst.EmbedUrl = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EmbedCastId = nil
		dst.EmbedUrl = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EmbeddedCast)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EmbeddedCast)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EmbeddedCast) MarshalJSON() ([]byte, error) {
	if src.EmbedCastId != nil {
		return json.Marshal(&src.EmbedCastId)
	}

	if src.EmbedUrl != nil {
		return json.Marshal(&src.EmbedUrl)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EmbeddedCast) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EmbedCastId != nil {
		return obj.EmbedCastId
	}

	if obj.EmbedUrl != nil {
		return obj.EmbedUrl
	}

	// all schemas are nil
	return nil
}

type NullableEmbeddedCast struct {
	value *EmbeddedCast
	isSet bool
}

func (v NullableEmbeddedCast) Get() *EmbeddedCast {
	return v.value
}

func (v *NullableEmbeddedCast) Set(val *EmbeddedCast) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddedCast) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddedCast) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddedCast(val *EmbeddedCast) *NullableEmbeddedCast {
	return &NullableEmbeddedCast{value: val, isSet: true}
}

func (v NullableEmbeddedCast) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddedCast) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


