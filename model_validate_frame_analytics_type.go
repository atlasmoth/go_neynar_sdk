/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ValidateFrameAnalyticsType the model 'ValidateFrameAnalyticsType'
type ValidateFrameAnalyticsType string

// List of ValidateFrameAnalyticsType
const (
	VALIDATEFRAMEANALYTICSTYPE_TOTAL_INTERACTORS ValidateFrameAnalyticsType = "total-interactors"
	VALIDATEFRAMEANALYTICSTYPE_INTERACTORS ValidateFrameAnalyticsType = "interactors"
	VALIDATEFRAMEANALYTICSTYPE_INTERACTIONS_PER_CAST ValidateFrameAnalyticsType = "interactions-per-cast"
	VALIDATEFRAMEANALYTICSTYPE_INPUT_TEXT ValidateFrameAnalyticsType = "input-text"
)

// All allowed values of ValidateFrameAnalyticsType enum
var AllowedValidateFrameAnalyticsTypeEnumValues = []ValidateFrameAnalyticsType{
	"total-interactors",
	"interactors",
	"interactions-per-cast",
	"input-text",
}

func (v *ValidateFrameAnalyticsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValidateFrameAnalyticsType(value)
	for _, existing := range AllowedValidateFrameAnalyticsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValidateFrameAnalyticsType", value)
}

// NewValidateFrameAnalyticsTypeFromValue returns a pointer to a valid ValidateFrameAnalyticsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValidateFrameAnalyticsTypeFromValue(v string) (*ValidateFrameAnalyticsType, error) {
	ev := ValidateFrameAnalyticsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValidateFrameAnalyticsType: valid values are %v", v, AllowedValidateFrameAnalyticsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValidateFrameAnalyticsType) IsValid() bool {
	for _, existing := range AllowedValidateFrameAnalyticsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ValidateFrameAnalyticsType value
func (v ValidateFrameAnalyticsType) Ptr() *ValidateFrameAnalyticsType {
	return &v
}

type NullableValidateFrameAnalyticsType struct {
	value *ValidateFrameAnalyticsType
	isSet bool
}

func (v NullableValidateFrameAnalyticsType) Get() *ValidateFrameAnalyticsType {
	return v.value
}

func (v *NullableValidateFrameAnalyticsType) Set(val *ValidateFrameAnalyticsType) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateFrameAnalyticsType) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateFrameAnalyticsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateFrameAnalyticsType(val *ValidateFrameAnalyticsType) *NullableValidateFrameAnalyticsType {
	return &NullableValidateFrameAnalyticsType{value: val, isSet: true}
}

func (v NullableValidateFrameAnalyticsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateFrameAnalyticsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

