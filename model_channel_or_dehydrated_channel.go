/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ChannelOrDehydratedChannel - struct for ChannelOrDehydratedChannel
type ChannelOrDehydratedChannel struct {
	Channel           *Channel
	DehydratedChannel *DehydratedChannel
}

// ChannelAsChannelOrDehydratedChannel is a convenience function that returns Channel wrapped in ChannelOrDehydratedChannel
func ChannelAsChannelOrDehydratedChannel(v *Channel) ChannelOrDehydratedChannel {
	return ChannelOrDehydratedChannel{
		Channel: v,
	}
}

// DehydratedChannelAsChannelOrDehydratedChannel is a convenience function that returns DehydratedChannel wrapped in ChannelOrDehydratedChannel
func DehydratedChannelAsChannelOrDehydratedChannel(v *DehydratedChannel) ChannelOrDehydratedChannel {
	return ChannelOrDehydratedChannel{
		DehydratedChannel: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ChannelOrDehydratedChannel) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Channel
	err = newStrictDecoder(data).Decode(&dst.Channel)
	if err == nil {
		jsonChannel, _ := json.Marshal(dst.Channel)
		if string(jsonChannel) == "{}" { // empty struct
			dst.Channel = nil
		} else {
			if err = validator.Validate(dst.Channel); err != nil {
				dst.Channel = nil
			} else {
				match++
			}
		}
	} else {
		dst.Channel = nil
	}

	// try to unmarshal data into DehydratedChannel
	err = newStrictDecoder(data).Decode(&dst.DehydratedChannel)
	if err == nil {
		jsonDehydratedChannel, _ := json.Marshal(dst.DehydratedChannel)
		if string(jsonDehydratedChannel) == "{}" { // empty struct
			dst.DehydratedChannel = nil
		} else {
			if err = validator.Validate(dst.DehydratedChannel); err != nil {
				dst.DehydratedChannel = nil
			} else {
				match++
			}
		}
	} else {
		dst.DehydratedChannel = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Channel = nil
		dst.DehydratedChannel = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ChannelOrDehydratedChannel)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ChannelOrDehydratedChannel)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ChannelOrDehydratedChannel) MarshalJSON() ([]byte, error) {
	if src.Channel != nil {
		return json.Marshal(&src.Channel)
	}

	if src.DehydratedChannel != nil {
		return json.Marshal(&src.DehydratedChannel)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ChannelOrDehydratedChannel) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Channel != nil {
		return obj.Channel
	}

	if obj.DehydratedChannel != nil {
		return obj.DehydratedChannel
	}

	// all schemas are nil
	return nil
}

type NullableChannelOrDehydratedChannel struct {
	value *ChannelOrDehydratedChannel
	isSet bool
}

func (v NullableChannelOrDehydratedChannel) Get() *ChannelOrDehydratedChannel {
	return v.value
}

func (v *NullableChannelOrDehydratedChannel) Set(val *ChannelOrDehydratedChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelOrDehydratedChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelOrDehydratedChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelOrDehydratedChannel(val *ChannelOrDehydratedChannel) *NullableChannelOrDehydratedChannel {
	return &NullableChannelOrDehydratedChannel{value: val, isSet: true}
}

func (v NullableChannelOrDehydratedChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelOrDehydratedChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
