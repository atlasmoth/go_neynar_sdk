/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IndividualHashObj type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndividualHashObj{}

// IndividualHashObj struct for IndividualHashObj
type IndividualHashObj struct {
	Hash string `json:"hash"`
}

type _IndividualHashObj IndividualHashObj

// NewIndividualHashObj instantiates a new IndividualHashObj object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndividualHashObj(hash string) *IndividualHashObj {
	this := IndividualHashObj{}
	this.Hash = hash
	return &this
}

// NewIndividualHashObjWithDefaults instantiates a new IndividualHashObj object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndividualHashObjWithDefaults() *IndividualHashObj {
	this := IndividualHashObj{}
	return &this
}

// GetHash returns the Hash field value
func (o *IndividualHashObj) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *IndividualHashObj) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *IndividualHashObj) SetHash(v string) {
	o.Hash = v
}

func (o IndividualHashObj) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndividualHashObj) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hash"] = o.Hash
	return toSerialize, nil
}

func (o *IndividualHashObj) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIndividualHashObj := _IndividualHashObj{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIndividualHashObj)

	if err != nil {
		return err
	}

	*o = IndividualHashObj(varIndividualHashObj)

	return err
}

type NullableIndividualHashObj struct {
	value *IndividualHashObj
	isSet bool
}

func (v NullableIndividualHashObj) Get() *IndividualHashObj {
	return v.value
}

func (v *NullableIndividualHashObj) Set(val *IndividualHashObj) {
	v.value = val
	v.isSet = true
}

func (v NullableIndividualHashObj) IsSet() bool {
	return v.isSet
}

func (v *NullableIndividualHashObj) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndividualHashObj(val *IndividualHashObj) *NullableIndividualHashObj {
	return &NullableIndividualHashObj{value: val, isSet: true}
}

func (v NullableIndividualHashObj) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndividualHashObj) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


