/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ForYouProvider The provider of the For You feed. 
type ForYouProvider string

// List of ForYouProvider
const (
	FORYOUPROVIDER_KARMA3 ForYouProvider = "karma3"
)

// All allowed values of ForYouProvider enum
var AllowedForYouProviderEnumValues = []ForYouProvider{
	"karma3",
}

func (v *ForYouProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ForYouProvider(value)
	for _, existing := range AllowedForYouProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ForYouProvider", value)
}

// NewForYouProviderFromValue returns a pointer to a valid ForYouProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewForYouProviderFromValue(v string) (*ForYouProvider, error) {
	ev := ForYouProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ForYouProvider: valid values are %v", v, AllowedForYouProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ForYouProvider) IsValid() bool {
	for _, existing := range AllowedForYouProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ForYouProvider value
func (v ForYouProvider) Ptr() *ForYouProvider {
	return &v
}

type NullableForYouProvider struct {
	value *ForYouProvider
	isSet bool
}

func (v NullableForYouProvider) Get() *ForYouProvider {
	return v.value
}

func (v *NullableForYouProvider) Set(val *ForYouProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableForYouProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableForYouProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForYouProvider(val *ForYouProvider) *NullableForYouProvider {
	return &NullableForYouProvider{value: val, isSet: true}
}

func (v NullableForYouProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForYouProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

