/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ZodErrorErrorsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZodErrorErrorsInner{}

// ZodErrorErrorsInner struct for ZodErrorErrorsInner
type ZodErrorErrorsInner struct {
	Code string `json:"code"`
	Expected string `json:"expected"`
	Received string `json:"received"`
	Path []string `json:"path"`
	Message string `json:"message"`
}

type _ZodErrorErrorsInner ZodErrorErrorsInner

// NewZodErrorErrorsInner instantiates a new ZodErrorErrorsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZodErrorErrorsInner(code string, expected string, received string, path []string, message string) *ZodErrorErrorsInner {
	this := ZodErrorErrorsInner{}
	this.Code = code
	this.Expected = expected
	this.Received = received
	this.Path = path
	this.Message = message
	return &this
}

// NewZodErrorErrorsInnerWithDefaults instantiates a new ZodErrorErrorsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZodErrorErrorsInnerWithDefaults() *ZodErrorErrorsInner {
	this := ZodErrorErrorsInner{}
	return &this
}

// GetCode returns the Code field value
func (o *ZodErrorErrorsInner) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ZodErrorErrorsInner) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ZodErrorErrorsInner) SetCode(v string) {
	o.Code = v
}

// GetExpected returns the Expected field value
func (o *ZodErrorErrorsInner) GetExpected() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Expected
}

// GetExpectedOk returns a tuple with the Expected field value
// and a boolean to check if the value has been set.
func (o *ZodErrorErrorsInner) GetExpectedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expected, true
}

// SetExpected sets field value
func (o *ZodErrorErrorsInner) SetExpected(v string) {
	o.Expected = v
}

// GetReceived returns the Received field value
func (o *ZodErrorErrorsInner) GetReceived() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Received
}

// GetReceivedOk returns a tuple with the Received field value
// and a boolean to check if the value has been set.
func (o *ZodErrorErrorsInner) GetReceivedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Received, true
}

// SetReceived sets field value
func (o *ZodErrorErrorsInner) SetReceived(v string) {
	o.Received = v
}

// GetPath returns the Path field value
func (o *ZodErrorErrorsInner) GetPath() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *ZodErrorErrorsInner) GetPathOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path, true
}

// SetPath sets field value
func (o *ZodErrorErrorsInner) SetPath(v []string) {
	o.Path = v
}

// GetMessage returns the Message field value
func (o *ZodErrorErrorsInner) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ZodErrorErrorsInner) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ZodErrorErrorsInner) SetMessage(v string) {
	o.Message = v
}

func (o ZodErrorErrorsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZodErrorErrorsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["expected"] = o.Expected
	toSerialize["received"] = o.Received
	toSerialize["path"] = o.Path
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *ZodErrorErrorsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"expected",
		"received",
		"path",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varZodErrorErrorsInner := _ZodErrorErrorsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varZodErrorErrorsInner)

	if err != nil {
		return err
	}

	*o = ZodErrorErrorsInner(varZodErrorErrorsInner)

	return err
}

type NullableZodErrorErrorsInner struct {
	value *ZodErrorErrorsInner
	isSet bool
}

func (v NullableZodErrorErrorsInner) Get() *ZodErrorErrorsInner {
	return v.value
}

func (v *NullableZodErrorErrorsInner) Set(val *ZodErrorErrorsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableZodErrorErrorsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableZodErrorErrorsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZodErrorErrorsInner(val *ZodErrorErrorsInner) *NullableZodErrorErrorsInner {
	return &NullableZodErrorErrorsInner{value: val, isSet: true}
}

func (v NullableZodErrorErrorsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZodErrorErrorsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


