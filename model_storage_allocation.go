/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the StorageAllocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageAllocation{}

// StorageAllocation struct for StorageAllocation
type StorageAllocation struct {
	Object    *string         `json:"object,omitempty"`
	User      *UserDehydrated `json:"user,omitempty"`
	Units     *int32          `json:"units,omitempty"`
	Expiry    *time.Time      `json:"expiry,omitempty"`
	Timestamp *time.Time      `json:"timestamp,omitempty"`
}

// NewStorageAllocation instantiates a new StorageAllocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageAllocation() *StorageAllocation {
	this := StorageAllocation{}
	return &this
}

// NewStorageAllocationWithDefaults instantiates a new StorageAllocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageAllocationWithDefaults() *StorageAllocation {
	this := StorageAllocation{}
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *StorageAllocation) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageAllocation) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *StorageAllocation) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *StorageAllocation) SetObject(v string) {
	o.Object = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *StorageAllocation) GetUser() UserDehydrated {
	if o == nil || IsNil(o.User) {
		var ret UserDehydrated
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageAllocation) GetUserOk() (*UserDehydrated, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *StorageAllocation) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UserDehydrated and assigns it to the User field.
func (o *StorageAllocation) SetUser(v UserDehydrated) {
	o.User = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *StorageAllocation) GetUnits() int32 {
	if o == nil || IsNil(o.Units) {
		var ret int32
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageAllocation) GetUnitsOk() (*int32, bool) {
	if o == nil || IsNil(o.Units) {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *StorageAllocation) HasUnits() bool {
	if o != nil && !IsNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given int32 and assigns it to the Units field.
func (o *StorageAllocation) SetUnits(v int32) {
	o.Units = &v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *StorageAllocation) GetExpiry() time.Time {
	if o == nil || IsNil(o.Expiry) {
		var ret time.Time
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageAllocation) GetExpiryOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Expiry) {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *StorageAllocation) HasExpiry() bool {
	if o != nil && !IsNil(o.Expiry) {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given time.Time and assigns it to the Expiry field.
func (o *StorageAllocation) SetExpiry(v time.Time) {
	o.Expiry = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *StorageAllocation) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageAllocation) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *StorageAllocation) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *StorageAllocation) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o StorageAllocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageAllocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	if !IsNil(o.Expiry) {
		toSerialize["expiry"] = o.Expiry
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableStorageAllocation struct {
	value *StorageAllocation
	isSet bool
}

func (v NullableStorageAllocation) Get() *StorageAllocation {
	return v.value
}

func (v *NullableStorageAllocation) Set(val *StorageAllocation) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageAllocation) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageAllocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageAllocation(val *StorageAllocation) *NullableStorageAllocation {
	return &NullableStorageAllocation{value: val, isSet: true}
}

func (v NullableStorageAllocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageAllocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
