/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FrameValidateAnalyticsInteractors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameValidateAnalyticsInteractors{}

// FrameValidateAnalyticsInteractors struct for FrameValidateAnalyticsInteractors
type FrameValidateAnalyticsInteractors struct {
	Interactors []FrameValidateAnalyticsInteractorsInteractorsInner `json:"interactors"`
}

type _FrameValidateAnalyticsInteractors FrameValidateAnalyticsInteractors

// NewFrameValidateAnalyticsInteractors instantiates a new FrameValidateAnalyticsInteractors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameValidateAnalyticsInteractors(interactors []FrameValidateAnalyticsInteractorsInteractorsInner) *FrameValidateAnalyticsInteractors {
	this := FrameValidateAnalyticsInteractors{}
	this.Interactors = interactors
	return &this
}

// NewFrameValidateAnalyticsInteractorsWithDefaults instantiates a new FrameValidateAnalyticsInteractors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameValidateAnalyticsInteractorsWithDefaults() *FrameValidateAnalyticsInteractors {
	this := FrameValidateAnalyticsInteractors{}
	return &this
}

// GetInteractors returns the Interactors field value
func (o *FrameValidateAnalyticsInteractors) GetInteractors() []FrameValidateAnalyticsInteractorsInteractorsInner {
	if o == nil {
		var ret []FrameValidateAnalyticsInteractorsInteractorsInner
		return ret
	}

	return o.Interactors
}

// GetInteractorsOk returns a tuple with the Interactors field value
// and a boolean to check if the value has been set.
func (o *FrameValidateAnalyticsInteractors) GetInteractorsOk() ([]FrameValidateAnalyticsInteractorsInteractorsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Interactors, true
}

// SetInteractors sets field value
func (o *FrameValidateAnalyticsInteractors) SetInteractors(v []FrameValidateAnalyticsInteractorsInteractorsInner) {
	o.Interactors = v
}

func (o FrameValidateAnalyticsInteractors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameValidateAnalyticsInteractors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["interactors"] = o.Interactors
	return toSerialize, nil
}

func (o *FrameValidateAnalyticsInteractors) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"interactors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFrameValidateAnalyticsInteractors := _FrameValidateAnalyticsInteractors{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFrameValidateAnalyticsInteractors)

	if err != nil {
		return err
	}

	*o = FrameValidateAnalyticsInteractors(varFrameValidateAnalyticsInteractors)

	return err
}

type NullableFrameValidateAnalyticsInteractors struct {
	value *FrameValidateAnalyticsInteractors
	isSet bool
}

func (v NullableFrameValidateAnalyticsInteractors) Get() *FrameValidateAnalyticsInteractors {
	return v.value
}

func (v *NullableFrameValidateAnalyticsInteractors) Set(val *FrameValidateAnalyticsInteractors) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameValidateAnalyticsInteractors) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameValidateAnalyticsInteractors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameValidateAnalyticsInteractors(val *FrameValidateAnalyticsInteractors) *NullableFrameValidateAnalyticsInteractors {
	return &NullableFrameValidateAnalyticsInteractors{value: val, isSet: true}
}

func (v NullableFrameValidateAnalyticsInteractors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameValidateAnalyticsInteractors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


