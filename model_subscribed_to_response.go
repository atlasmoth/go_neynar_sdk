/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubscribedToResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscribedToResponse{}

// SubscribedToResponse struct for SubscribedToResponse
type SubscribedToResponse struct {
	SubscribedTo []SubscribedTo `json:"subscribed_to,omitempty"`
}

// NewSubscribedToResponse instantiates a new SubscribedToResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscribedToResponse() *SubscribedToResponse {
	this := SubscribedToResponse{}
	return &this
}

// NewSubscribedToResponseWithDefaults instantiates a new SubscribedToResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscribedToResponseWithDefaults() *SubscribedToResponse {
	this := SubscribedToResponse{}
	return &this
}

// GetSubscribedTo returns the SubscribedTo field value if set, zero value otherwise.
func (o *SubscribedToResponse) GetSubscribedTo() []SubscribedTo {
	if o == nil || IsNil(o.SubscribedTo) {
		var ret []SubscribedTo
		return ret
	}
	return o.SubscribedTo
}

// GetSubscribedToOk returns a tuple with the SubscribedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribedToResponse) GetSubscribedToOk() ([]SubscribedTo, bool) {
	if o == nil || IsNil(o.SubscribedTo) {
		return nil, false
	}
	return o.SubscribedTo, true
}

// HasSubscribedTo returns a boolean if a field has been set.
func (o *SubscribedToResponse) HasSubscribedTo() bool {
	if o != nil && !IsNil(o.SubscribedTo) {
		return true
	}

	return false
}

// SetSubscribedTo gets a reference to the given []SubscribedTo and assigns it to the SubscribedTo field.
func (o *SubscribedToResponse) SetSubscribedTo(v []SubscribedTo) {
	o.SubscribedTo = v
}

func (o SubscribedToResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscribedToResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SubscribedTo) {
		toSerialize["subscribed_to"] = o.SubscribedTo
	}
	return toSerialize, nil
}

type NullableSubscribedToResponse struct {
	value *SubscribedToResponse
	isSet bool
}

func (v NullableSubscribedToResponse) Get() *SubscribedToResponse {
	return v.value
}

func (v *NullableSubscribedToResponse) Set(val *SubscribedToResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscribedToResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscribedToResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscribedToResponse(val *SubscribedToResponse) *NullableSubscribedToResponse {
	return &NullableSubscribedToResponse{value: val, isSet: true}
}

func (v NullableSubscribedToResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscribedToResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
