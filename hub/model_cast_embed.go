/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CastEmbed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CastEmbed{}

// CastEmbed struct for CastEmbed
type CastEmbed struct {
	CastId CastId `json:"castId"`
	AdditionalProperties map[string]interface{}
}

type _CastEmbed CastEmbed

// NewCastEmbed instantiates a new CastEmbed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCastEmbed(castId CastId) *CastEmbed {
	this := CastEmbed{}
	this.CastId = castId
	return &this
}

// NewCastEmbedWithDefaults instantiates a new CastEmbed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCastEmbedWithDefaults() *CastEmbed {
	this := CastEmbed{}
	return &this
}

// GetCastId returns the CastId field value
func (o *CastEmbed) GetCastId() CastId {
	if o == nil {
		var ret CastId
		return ret
	}

	return o.CastId
}

// GetCastIdOk returns a tuple with the CastId field value
// and a boolean to check if the value has been set.
func (o *CastEmbed) GetCastIdOk() (*CastId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CastId, true
}

// SetCastId sets field value
func (o *CastEmbed) SetCastId(v CastId) {
	o.CastId = v
}

func (o CastEmbed) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CastEmbed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["castId"] = o.CastId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CastEmbed) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"castId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCastEmbed := _CastEmbed{}

	err = json.Unmarshal(data, &varCastEmbed)

	if err != nil {
		return err
	}

	*o = CastEmbed(varCastEmbed)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "castId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCastEmbed struct {
	value *CastEmbed
	isSet bool
}

func (v NullableCastEmbed) Get() *CastEmbed {
	return v.value
}

func (v *NullableCastEmbed) Set(val *CastEmbed) {
	v.value = val
	v.isSet = true
}

func (v NullableCastEmbed) IsSet() bool {
	return v.isSet
}

func (v *NullableCastEmbed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastEmbed(val *CastEmbed) *NullableCastEmbed {
	return &NullableCastEmbed{value: val, isSet: true}
}

func (v NullableCastEmbed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastEmbed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


