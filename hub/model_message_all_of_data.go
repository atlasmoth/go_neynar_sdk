/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// MessageAllOfData - struct for MessageAllOfData
type MessageAllOfData struct {
	MessageDataCastAdd *MessageDataCastAdd
	MessageDataCastRemove *MessageDataCastRemove
	MessageDataFrameAction *MessageDataFrameAction
	MessageDataLink *MessageDataLink
	MessageDataReaction *MessageDataReaction
	MessageDataUserDataAdd *MessageDataUserDataAdd
	MessageDataUsernameProof *MessageDataUsernameProof
	MessageDataVerificationAdd *MessageDataVerificationAdd
	MessageDataVerificationRemove *MessageDataVerificationRemove
}

// MessageDataCastAddAsMessageAllOfData is a convenience function that returns MessageDataCastAdd wrapped in MessageAllOfData
func MessageDataCastAddAsMessageAllOfData(v *MessageDataCastAdd) MessageAllOfData {
	return MessageAllOfData{
		MessageDataCastAdd: v,
	}
}

// MessageDataCastRemoveAsMessageAllOfData is a convenience function that returns MessageDataCastRemove wrapped in MessageAllOfData
func MessageDataCastRemoveAsMessageAllOfData(v *MessageDataCastRemove) MessageAllOfData {
	return MessageAllOfData{
		MessageDataCastRemove: v,
	}
}

// MessageDataFrameActionAsMessageAllOfData is a convenience function that returns MessageDataFrameAction wrapped in MessageAllOfData
func MessageDataFrameActionAsMessageAllOfData(v *MessageDataFrameAction) MessageAllOfData {
	return MessageAllOfData{
		MessageDataFrameAction: v,
	}
}

// MessageDataLinkAsMessageAllOfData is a convenience function that returns MessageDataLink wrapped in MessageAllOfData
func MessageDataLinkAsMessageAllOfData(v *MessageDataLink) MessageAllOfData {
	return MessageAllOfData{
		MessageDataLink: v,
	}
}

// MessageDataReactionAsMessageAllOfData is a convenience function that returns MessageDataReaction wrapped in MessageAllOfData
func MessageDataReactionAsMessageAllOfData(v *MessageDataReaction) MessageAllOfData {
	return MessageAllOfData{
		MessageDataReaction: v,
	}
}

// MessageDataUserDataAddAsMessageAllOfData is a convenience function that returns MessageDataUserDataAdd wrapped in MessageAllOfData
func MessageDataUserDataAddAsMessageAllOfData(v *MessageDataUserDataAdd) MessageAllOfData {
	return MessageAllOfData{
		MessageDataUserDataAdd: v,
	}
}

// MessageDataUsernameProofAsMessageAllOfData is a convenience function that returns MessageDataUsernameProof wrapped in MessageAllOfData
func MessageDataUsernameProofAsMessageAllOfData(v *MessageDataUsernameProof) MessageAllOfData {
	return MessageAllOfData{
		MessageDataUsernameProof: v,
	}
}

// MessageDataVerificationAddAsMessageAllOfData is a convenience function that returns MessageDataVerificationAdd wrapped in MessageAllOfData
func MessageDataVerificationAddAsMessageAllOfData(v *MessageDataVerificationAdd) MessageAllOfData {
	return MessageAllOfData{
		MessageDataVerificationAdd: v,
	}
}

// MessageDataVerificationRemoveAsMessageAllOfData is a convenience function that returns MessageDataVerificationRemove wrapped in MessageAllOfData
func MessageDataVerificationRemoveAsMessageAllOfData(v *MessageDataVerificationRemove) MessageAllOfData {
	return MessageAllOfData{
		MessageDataVerificationRemove: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MessageAllOfData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MessageDataCastAdd
	err = newStrictDecoder(data).Decode(&dst.MessageDataCastAdd)
	if err == nil {
		jsonMessageDataCastAdd, _ := json.Marshal(dst.MessageDataCastAdd)
		if string(jsonMessageDataCastAdd) == "{}" { // empty struct
			dst.MessageDataCastAdd = nil
		} else {
			if err = validator.Validate(dst.MessageDataCastAdd); err != nil {
				dst.MessageDataCastAdd = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageDataCastAdd = nil
	}

	// try to unmarshal data into MessageDataCastRemove
	err = newStrictDecoder(data).Decode(&dst.MessageDataCastRemove)
	if err == nil {
		jsonMessageDataCastRemove, _ := json.Marshal(dst.MessageDataCastRemove)
		if string(jsonMessageDataCastRemove) == "{}" { // empty struct
			dst.MessageDataCastRemove = nil
		} else {
			if err = validator.Validate(dst.MessageDataCastRemove); err != nil {
				dst.MessageDataCastRemove = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageDataCastRemove = nil
	}

	// try to unmarshal data into MessageDataFrameAction
	err = newStrictDecoder(data).Decode(&dst.MessageDataFrameAction)
	if err == nil {
		jsonMessageDataFrameAction, _ := json.Marshal(dst.MessageDataFrameAction)
		if string(jsonMessageDataFrameAction) == "{}" { // empty struct
			dst.MessageDataFrameAction = nil
		} else {
			if err = validator.Validate(dst.MessageDataFrameAction); err != nil {
				dst.MessageDataFrameAction = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageDataFrameAction = nil
	}

	// try to unmarshal data into MessageDataLink
	err = newStrictDecoder(data).Decode(&dst.MessageDataLink)
	if err == nil {
		jsonMessageDataLink, _ := json.Marshal(dst.MessageDataLink)
		if string(jsonMessageDataLink) == "{}" { // empty struct
			dst.MessageDataLink = nil
		} else {
			if err = validator.Validate(dst.MessageDataLink); err != nil {
				dst.MessageDataLink = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageDataLink = nil
	}

	// try to unmarshal data into MessageDataReaction
	err = newStrictDecoder(data).Decode(&dst.MessageDataReaction)
	if err == nil {
		jsonMessageDataReaction, _ := json.Marshal(dst.MessageDataReaction)
		if string(jsonMessageDataReaction) == "{}" { // empty struct
			dst.MessageDataReaction = nil
		} else {
			if err = validator.Validate(dst.MessageDataReaction); err != nil {
				dst.MessageDataReaction = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageDataReaction = nil
	}

	// try to unmarshal data into MessageDataUserDataAdd
	err = newStrictDecoder(data).Decode(&dst.MessageDataUserDataAdd)
	if err == nil {
		jsonMessageDataUserDataAdd, _ := json.Marshal(dst.MessageDataUserDataAdd)
		if string(jsonMessageDataUserDataAdd) == "{}" { // empty struct
			dst.MessageDataUserDataAdd = nil
		} else {
			if err = validator.Validate(dst.MessageDataUserDataAdd); err != nil {
				dst.MessageDataUserDataAdd = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageDataUserDataAdd = nil
	}

	// try to unmarshal data into MessageDataUsernameProof
	err = newStrictDecoder(data).Decode(&dst.MessageDataUsernameProof)
	if err == nil {
		jsonMessageDataUsernameProof, _ := json.Marshal(dst.MessageDataUsernameProof)
		if string(jsonMessageDataUsernameProof) == "{}" { // empty struct
			dst.MessageDataUsernameProof = nil
		} else {
			if err = validator.Validate(dst.MessageDataUsernameProof); err != nil {
				dst.MessageDataUsernameProof = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageDataUsernameProof = nil
	}

	// try to unmarshal data into MessageDataVerificationAdd
	err = newStrictDecoder(data).Decode(&dst.MessageDataVerificationAdd)
	if err == nil {
		jsonMessageDataVerificationAdd, _ := json.Marshal(dst.MessageDataVerificationAdd)
		if string(jsonMessageDataVerificationAdd) == "{}" { // empty struct
			dst.MessageDataVerificationAdd = nil
		} else {
			if err = validator.Validate(dst.MessageDataVerificationAdd); err != nil {
				dst.MessageDataVerificationAdd = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageDataVerificationAdd = nil
	}

	// try to unmarshal data into MessageDataVerificationRemove
	err = newStrictDecoder(data).Decode(&dst.MessageDataVerificationRemove)
	if err == nil {
		jsonMessageDataVerificationRemove, _ := json.Marshal(dst.MessageDataVerificationRemove)
		if string(jsonMessageDataVerificationRemove) == "{}" { // empty struct
			dst.MessageDataVerificationRemove = nil
		} else {
			if err = validator.Validate(dst.MessageDataVerificationRemove); err != nil {
				dst.MessageDataVerificationRemove = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageDataVerificationRemove = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MessageDataCastAdd = nil
		dst.MessageDataCastRemove = nil
		dst.MessageDataFrameAction = nil
		dst.MessageDataLink = nil
		dst.MessageDataReaction = nil
		dst.MessageDataUserDataAdd = nil
		dst.MessageDataUsernameProof = nil
		dst.MessageDataVerificationAdd = nil
		dst.MessageDataVerificationRemove = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MessageAllOfData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MessageAllOfData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MessageAllOfData) MarshalJSON() ([]byte, error) {
	if src.MessageDataCastAdd != nil {
		return json.Marshal(&src.MessageDataCastAdd)
	}

	if src.MessageDataCastRemove != nil {
		return json.Marshal(&src.MessageDataCastRemove)
	}

	if src.MessageDataFrameAction != nil {
		return json.Marshal(&src.MessageDataFrameAction)
	}

	if src.MessageDataLink != nil {
		return json.Marshal(&src.MessageDataLink)
	}

	if src.MessageDataReaction != nil {
		return json.Marshal(&src.MessageDataReaction)
	}

	if src.MessageDataUserDataAdd != nil {
		return json.Marshal(&src.MessageDataUserDataAdd)
	}

	if src.MessageDataUsernameProof != nil {
		return json.Marshal(&src.MessageDataUsernameProof)
	}

	if src.MessageDataVerificationAdd != nil {
		return json.Marshal(&src.MessageDataVerificationAdd)
	}

	if src.MessageDataVerificationRemove != nil {
		return json.Marshal(&src.MessageDataVerificationRemove)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MessageAllOfData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MessageDataCastAdd != nil {
		return obj.MessageDataCastAdd
	}

	if obj.MessageDataCastRemove != nil {
		return obj.MessageDataCastRemove
	}

	if obj.MessageDataFrameAction != nil {
		return obj.MessageDataFrameAction
	}

	if obj.MessageDataLink != nil {
		return obj.MessageDataLink
	}

	if obj.MessageDataReaction != nil {
		return obj.MessageDataReaction
	}

	if obj.MessageDataUserDataAdd != nil {
		return obj.MessageDataUserDataAdd
	}

	if obj.MessageDataUsernameProof != nil {
		return obj.MessageDataUsernameProof
	}

	if obj.MessageDataVerificationAdd != nil {
		return obj.MessageDataVerificationAdd
	}

	if obj.MessageDataVerificationRemove != nil {
		return obj.MessageDataVerificationRemove
	}

	// all schemas are nil
	return nil
}

type NullableMessageAllOfData struct {
	value *MessageAllOfData
	isSet bool
}

func (v NullableMessageAllOfData) Get() *MessageAllOfData {
	return v.value
}

func (v *NullableMessageAllOfData) Set(val *MessageAllOfData) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageAllOfData) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageAllOfData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageAllOfData(val *MessageAllOfData) *NullableMessageAllOfData {
	return &NullableMessageAllOfData{value: val, isSet: true}
}

func (v NullableMessageAllOfData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageAllOfData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


