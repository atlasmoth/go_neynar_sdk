/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the LinkRemoveAllOfData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkRemoveAllOfData{}

// LinkRemoveAllOfData struct for LinkRemoveAllOfData
type LinkRemoveAllOfData struct {
	Fid int32 `json:"fid"`
	Timestamp int64 `json:"timestamp"`
	Network FarcasterNetwork `json:"network"`
	LinkBody LinkBody `json:"linkBody"`
	Type MessageType `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _LinkRemoveAllOfData LinkRemoveAllOfData

// NewLinkRemoveAllOfData instantiates a new LinkRemoveAllOfData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkRemoveAllOfData(fid int32, timestamp int64, network FarcasterNetwork, linkBody LinkBody, type_ MessageType) *LinkRemoveAllOfData {
	this := LinkRemoveAllOfData{}
	this.Fid = fid
	this.Timestamp = timestamp
	this.Network = network
	this.LinkBody = linkBody
	this.Type = type_
	return &this
}

// NewLinkRemoveAllOfDataWithDefaults instantiates a new LinkRemoveAllOfData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkRemoveAllOfDataWithDefaults() *LinkRemoveAllOfData {
	this := LinkRemoveAllOfData{}
	var network FarcasterNetwork = FARCASTERNETWORK_MAINNET
	this.Network = network
	var type_ MessageType = MESSAGETYPE_CAST_ADD
	this.Type = type_
	return &this
}

// GetFid returns the Fid field value
func (o *LinkRemoveAllOfData) GetFid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Fid
}

// GetFidOk returns a tuple with the Fid field value
// and a boolean to check if the value has been set.
func (o *LinkRemoveAllOfData) GetFidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fid, true
}

// SetFid sets field value
func (o *LinkRemoveAllOfData) SetFid(v int32) {
	o.Fid = v
}

// GetTimestamp returns the Timestamp field value
func (o *LinkRemoveAllOfData) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *LinkRemoveAllOfData) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *LinkRemoveAllOfData) SetTimestamp(v int64) {
	o.Timestamp = v
}

// GetNetwork returns the Network field value
func (o *LinkRemoveAllOfData) GetNetwork() FarcasterNetwork {
	if o == nil {
		var ret FarcasterNetwork
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *LinkRemoveAllOfData) GetNetworkOk() (*FarcasterNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *LinkRemoveAllOfData) SetNetwork(v FarcasterNetwork) {
	o.Network = v
}

// GetLinkBody returns the LinkBody field value
func (o *LinkRemoveAllOfData) GetLinkBody() LinkBody {
	if o == nil {
		var ret LinkBody
		return ret
	}

	return o.LinkBody
}

// GetLinkBodyOk returns a tuple with the LinkBody field value
// and a boolean to check if the value has been set.
func (o *LinkRemoveAllOfData) GetLinkBodyOk() (*LinkBody, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinkBody, true
}

// SetLinkBody sets field value
func (o *LinkRemoveAllOfData) SetLinkBody(v LinkBody) {
	o.LinkBody = v
}

// GetType returns the Type field value
func (o *LinkRemoveAllOfData) GetType() MessageType {
	if o == nil {
		var ret MessageType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LinkRemoveAllOfData) GetTypeOk() (*MessageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LinkRemoveAllOfData) SetType(v MessageType) {
	o.Type = v
}

func (o LinkRemoveAllOfData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkRemoveAllOfData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fid"] = o.Fid
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["network"] = o.Network
	toSerialize["linkBody"] = o.LinkBody
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LinkRemoveAllOfData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fid",
		"timestamp",
		"network",
		"linkBody",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLinkRemoveAllOfData := _LinkRemoveAllOfData{}

	err = json.Unmarshal(data, &varLinkRemoveAllOfData)

	if err != nil {
		return err
	}

	*o = LinkRemoveAllOfData(varLinkRemoveAllOfData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "fid")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "network")
		delete(additionalProperties, "linkBody")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLinkRemoveAllOfData struct {
	value *LinkRemoveAllOfData
	isSet bool
}

func (v NullableLinkRemoveAllOfData) Get() *LinkRemoveAllOfData {
	return v.value
}

func (v *NullableLinkRemoveAllOfData) Set(val *LinkRemoveAllOfData) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkRemoveAllOfData) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkRemoveAllOfData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkRemoveAllOfData(val *LinkRemoveAllOfData) *NullableLinkRemoveAllOfData {
	return &NullableLinkRemoveAllOfData{value: val, isSet: true}
}

func (v NullableLinkRemoveAllOfData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkRemoveAllOfData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


