/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FarcasterNetwork Farcaster network the message is intended for. - FARCASTER_NETWORK_MAINNET: Public primary network  - FARCASTER_NETWORK_TESTNET: Public test network  - FARCASTER_NETWORK_DEVNET: Private test network
type FarcasterNetwork string

// List of FarcasterNetwork
const (
	FARCASTERNETWORK_MAINNET FarcasterNetwork = "FARCASTER_NETWORK_MAINNET"
	FARCASTERNETWORK_TESTNET FarcasterNetwork = "FARCASTER_NETWORK_TESTNET"
	FARCASTERNETWORK_DEVNET FarcasterNetwork = "FARCASTER_NETWORK_DEVNET"
)

// All allowed values of FarcasterNetwork enum
var AllowedFarcasterNetworkEnumValues = []FarcasterNetwork{
	"FARCASTER_NETWORK_MAINNET",
	"FARCASTER_NETWORK_TESTNET",
	"FARCASTER_NETWORK_DEVNET",
}

func (v *FarcasterNetwork) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FarcasterNetwork(value)
	for _, existing := range AllowedFarcasterNetworkEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FarcasterNetwork", value)
}

// NewFarcasterNetworkFromValue returns a pointer to a valid FarcasterNetwork
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFarcasterNetworkFromValue(v string) (*FarcasterNetwork, error) {
	ev := FarcasterNetwork(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FarcasterNetwork: valid values are %v", v, AllowedFarcasterNetworkEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FarcasterNetwork) IsValid() bool {
	for _, existing := range AllowedFarcasterNetworkEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FarcasterNetwork value
func (v FarcasterNetwork) Ptr() *FarcasterNetwork {
	return &v
}

type NullableFarcasterNetwork struct {
	value *FarcasterNetwork
	isSet bool
}

func (v NullableFarcasterNetwork) Get() *FarcasterNetwork {
	return v.value
}

func (v *NullableFarcasterNetwork) Set(val *FarcasterNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableFarcasterNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableFarcasterNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarcasterNetwork(val *FarcasterNetwork) *NullableFarcasterNetwork {
	return &NullableFarcasterNetwork{value: val, isSet: true}
}

func (v NullableFarcasterNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarcasterNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

