/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ErrorResponseMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponseMetadata{}

// ErrorResponseMetadata struct for ErrorResponseMetadata
type ErrorResponseMetadata struct {
	Errcode []string `json:"errcode"`
}

type _ErrorResponseMetadata ErrorResponseMetadata

// NewErrorResponseMetadata instantiates a new ErrorResponseMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseMetadata(errcode []string) *ErrorResponseMetadata {
	this := ErrorResponseMetadata{}
	this.Errcode = errcode
	return &this
}

// NewErrorResponseMetadataWithDefaults instantiates a new ErrorResponseMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseMetadataWithDefaults() *ErrorResponseMetadata {
	this := ErrorResponseMetadata{}
	return &this
}

// GetErrcode returns the Errcode field value
func (o *ErrorResponseMetadata) GetErrcode() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Errcode
}

// GetErrcodeOk returns a tuple with the Errcode field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseMetadata) GetErrcodeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errcode, true
}

// SetErrcode sets field value
func (o *ErrorResponseMetadata) SetErrcode(v []string) {
	o.Errcode = v
}

func (o ErrorResponseMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponseMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["errcode"] = o.Errcode
	return toSerialize, nil
}

func (o *ErrorResponseMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"errcode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorResponseMetadata := _ErrorResponseMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varErrorResponseMetadata)

	if err != nil {
		return err
	}

	*o = ErrorResponseMetadata(varErrorResponseMetadata)

	return err
}

type NullableErrorResponseMetadata struct {
	value *ErrorResponseMetadata
	isSet bool
}

func (v NullableErrorResponseMetadata) Get() *ErrorResponseMetadata {
	return v.value
}

func (v *NullableErrorResponseMetadata) Set(val *ErrorResponseMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseMetadata(val *ErrorResponseMetadata) *NullableErrorResponseMetadata {
	return &NullableErrorResponseMetadata{value: val, isSet: true}
}

func (v NullableErrorResponseMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


