/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UsernameProofsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsernameProofsResponse{}

// UsernameProofsResponse struct for UsernameProofsResponse
type UsernameProofsResponse struct {
	Proofs []UserNameProof `json:"proofs,omitempty"`
}

// NewUsernameProofsResponse instantiates a new UsernameProofsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsernameProofsResponse() *UsernameProofsResponse {
	this := UsernameProofsResponse{}
	return &this
}

// NewUsernameProofsResponseWithDefaults instantiates a new UsernameProofsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsernameProofsResponseWithDefaults() *UsernameProofsResponse {
	this := UsernameProofsResponse{}
	return &this
}

// GetProofs returns the Proofs field value if set, zero value otherwise.
func (o *UsernameProofsResponse) GetProofs() []UserNameProof {
	if o == nil || IsNil(o.Proofs) {
		var ret []UserNameProof
		return ret
	}
	return o.Proofs
}

// GetProofsOk returns a tuple with the Proofs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsernameProofsResponse) GetProofsOk() ([]UserNameProof, bool) {
	if o == nil || IsNil(o.Proofs) {
		return nil, false
	}
	return o.Proofs, true
}

// HasProofs returns a boolean if a field has been set.
func (o *UsernameProofsResponse) HasProofs() bool {
	if o != nil && !IsNil(o.Proofs) {
		return true
	}

	return false
}

// SetProofs gets a reference to the given []UserNameProof and assigns it to the Proofs field.
func (o *UsernameProofsResponse) SetProofs(v []UserNameProof) {
	o.Proofs = v
}

func (o UsernameProofsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsernameProofsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Proofs) {
		toSerialize["proofs"] = o.Proofs
	}
	return toSerialize, nil
}

type NullableUsernameProofsResponse struct {
	value *UsernameProofsResponse
	isSet bool
}

func (v NullableUsernameProofsResponse) Get() *UsernameProofsResponse {
	return v.value
}

func (v *NullableUsernameProofsResponse) Set(val *UsernameProofsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUsernameProofsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUsernameProofsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsernameProofsResponse(val *UsernameProofsResponse) *NullableUsernameProofsResponse {
	return &NullableUsernameProofsResponse{value: val, isSet: true}
}

func (v NullableUsernameProofsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsernameProofsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


