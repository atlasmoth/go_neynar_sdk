/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// LinksAPIService LinksAPI service
type LinksAPIService service

type ApiGetLinkByIdRequest struct {
	ctx context.Context
	ApiService *LinksAPIService
	apiKey *string
	fid *int32
	targetFid *int32
	linkType *LinkType
}

// API key required for authentication.
func (r ApiGetLinkByIdRequest) ApiKey(apiKey string) ApiGetLinkByIdRequest {
	r.apiKey = &apiKey
	return r
}

// The FID of the link&#39;s originator
func (r ApiGetLinkByIdRequest) Fid(fid int32) ApiGetLinkByIdRequest {
	r.fid = &fid
	return r
}

// The FID of the target of the link
func (r ApiGetLinkByIdRequest) TargetFid(targetFid int32) ApiGetLinkByIdRequest {
	r.targetFid = &targetFid
	return r
}

// The type of link, as a string value
func (r ApiGetLinkByIdRequest) LinkType(linkType LinkType) ApiGetLinkByIdRequest {
	r.linkType = &linkType
	return r
}

func (r ApiGetLinkByIdRequest) Execute() (*LinkAdd, *http.Response, error) {
	return r.ApiService.GetLinkByIdExecute(r)
}

/*
GetLinkById Get a link by its FID and target FID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLinkByIdRequest
*/
func (a *LinksAPIService) GetLinkById(ctx context.Context) ApiGetLinkByIdRequest {
	return ApiGetLinkByIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LinkAdd
func (a *LinksAPIService) GetLinkByIdExecute(r ApiGetLinkByIdRequest) (*LinkAdd, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LinkAdd
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LinksAPIService.GetLinkById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/linkById"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	}
	if r.targetFid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target_fid", r.targetFid, "form", "")
	}
	if r.linkType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_type", r.linkType, "form", "")
	} else {
		var defaultValue LinkType = "follow"
		r.linkType = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "api_key", r.apiKey, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListLinksByFidRequest struct {
	ctx context.Context
	ApiService *LinksAPIService
	apiKey *string
	fid *int32
	linkType *LinkType
	pageSize *int32
	reverse *bool
	pageToken *string
}

// API key required for authentication.
func (r ApiListLinksByFidRequest) ApiKey(apiKey string) ApiListLinksByFidRequest {
	r.apiKey = &apiKey
	return r
}

// The FID of the link&#39;s originator
func (r ApiListLinksByFidRequest) Fid(fid int32) ApiListLinksByFidRequest {
	r.fid = &fid
	return r
}

// The type of link, as a string value
func (r ApiListLinksByFidRequest) LinkType(linkType LinkType) ApiListLinksByFidRequest {
	r.linkType = &linkType
	return r
}

// Maximum number of messages to return in a single response
func (r ApiListLinksByFidRequest) PageSize(pageSize int32) ApiListLinksByFidRequest {
	r.pageSize = &pageSize
	return r
}

// Reverse the sort order, returning latest messages first
func (r ApiListLinksByFidRequest) Reverse(reverse bool) ApiListLinksByFidRequest {
	r.reverse = &reverse
	return r
}

// The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
func (r ApiListLinksByFidRequest) PageToken(pageToken string) ApiListLinksByFidRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListLinksByFidRequest) Execute() (*ListLinksByFid200Response, *http.Response, error) {
	return r.ApiService.ListLinksByFidExecute(r)
}

/*
ListLinksByFid Get all links from a source FID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListLinksByFidRequest
*/
func (a *LinksAPIService) ListLinksByFid(ctx context.Context) ApiListLinksByFidRequest {
	return ApiListLinksByFidRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListLinksByFid200Response
func (a *LinksAPIService) ListLinksByFidExecute(r ApiListLinksByFidRequest) (*ListLinksByFid200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListLinksByFid200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LinksAPIService.ListLinksByFid")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/linksByFid"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fid", r.fid, "form", "")
	}
	if r.linkType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_type", r.linkType, "form", "")
	} else {
		var defaultValue LinkType = "follow"
		r.linkType = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.reverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reverse", r.reverse, "form", "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "api_key", r.apiKey, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListLinksByTargetFidRequest struct {
	ctx context.Context
	ApiService *LinksAPIService
	apiKey *string
	targetFid *int32
	linkType *LinkType
	pageSize *int32
	reverse *bool
	pageToken *string
}

// API key required for authentication.
func (r ApiListLinksByTargetFidRequest) ApiKey(apiKey string) ApiListLinksByTargetFidRequest {
	r.apiKey = &apiKey
	return r
}

// The FID of the target of the link
func (r ApiListLinksByTargetFidRequest) TargetFid(targetFid int32) ApiListLinksByTargetFidRequest {
	r.targetFid = &targetFid
	return r
}

// The type of link, as a string value
func (r ApiListLinksByTargetFidRequest) LinkType(linkType LinkType) ApiListLinksByTargetFidRequest {
	r.linkType = &linkType
	return r
}

// Maximum number of messages to return in a single response
func (r ApiListLinksByTargetFidRequest) PageSize(pageSize int32) ApiListLinksByTargetFidRequest {
	r.pageSize = &pageSize
	return r
}

// Reverse the sort order, returning latest messages first
func (r ApiListLinksByTargetFidRequest) Reverse(reverse bool) ApiListLinksByTargetFidRequest {
	r.reverse = &reverse
	return r
}

// The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
func (r ApiListLinksByTargetFidRequest) PageToken(pageToken string) ApiListLinksByTargetFidRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListLinksByTargetFidRequest) Execute() (*ListLinksByFid200Response, *http.Response, error) {
	return r.ApiService.ListLinksByTargetFidExecute(r)
}

/*
ListLinksByTargetFid Get all links to a target FID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListLinksByTargetFidRequest
*/
func (a *LinksAPIService) ListLinksByTargetFid(ctx context.Context) ApiListLinksByTargetFidRequest {
	return ApiListLinksByTargetFidRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListLinksByFid200Response
func (a *LinksAPIService) ListLinksByTargetFidExecute(r ApiListLinksByTargetFidRequest) (*ListLinksByFid200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListLinksByFid200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LinksAPIService.ListLinksByTargetFid")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/linksByTargetFid"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.targetFid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "target_fid", r.targetFid, "form", "")
	}
	if r.linkType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_type", r.linkType, "form", "")
	} else {
		var defaultValue LinkType = "follow"
		r.linkType = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.reverse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reverse", r.reverse, "form", "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "api_key", r.apiKey, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
