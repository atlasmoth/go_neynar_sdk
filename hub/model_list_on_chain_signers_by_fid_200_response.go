/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ListOnChainSignersByFid200Response - struct for ListOnChainSignersByFid200Response
type ListOnChainSignersByFid200Response struct {
	ListOnChainSignersByFid200ResponseOneOf *ListOnChainSignersByFid200ResponseOneOf
	OnChainEventSigner *OnChainEventSigner
}

// ListOnChainSignersByFid200ResponseOneOfAsListOnChainSignersByFid200Response is a convenience function that returns ListOnChainSignersByFid200ResponseOneOf wrapped in ListOnChainSignersByFid200Response
func ListOnChainSignersByFid200ResponseOneOfAsListOnChainSignersByFid200Response(v *ListOnChainSignersByFid200ResponseOneOf) ListOnChainSignersByFid200Response {
	return ListOnChainSignersByFid200Response{
		ListOnChainSignersByFid200ResponseOneOf: v,
	}
}

// OnChainEventSignerAsListOnChainSignersByFid200Response is a convenience function that returns OnChainEventSigner wrapped in ListOnChainSignersByFid200Response
func OnChainEventSignerAsListOnChainSignersByFid200Response(v *OnChainEventSigner) ListOnChainSignersByFid200Response {
	return ListOnChainSignersByFid200Response{
		OnChainEventSigner: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListOnChainSignersByFid200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ListOnChainSignersByFid200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.ListOnChainSignersByFid200ResponseOneOf)
	if err == nil {
		jsonListOnChainSignersByFid200ResponseOneOf, _ := json.Marshal(dst.ListOnChainSignersByFid200ResponseOneOf)
		if string(jsonListOnChainSignersByFid200ResponseOneOf) == "{}" { // empty struct
			dst.ListOnChainSignersByFid200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.ListOnChainSignersByFid200ResponseOneOf); err != nil {
				dst.ListOnChainSignersByFid200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.ListOnChainSignersByFid200ResponseOneOf = nil
	}

	// try to unmarshal data into OnChainEventSigner
	err = newStrictDecoder(data).Decode(&dst.OnChainEventSigner)
	if err == nil {
		jsonOnChainEventSigner, _ := json.Marshal(dst.OnChainEventSigner)
		if string(jsonOnChainEventSigner) == "{}" { // empty struct
			dst.OnChainEventSigner = nil
		} else {
			if err = validator.Validate(dst.OnChainEventSigner); err != nil {
				dst.OnChainEventSigner = nil
			} else {
				match++
			}
		}
	} else {
		dst.OnChainEventSigner = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ListOnChainSignersByFid200ResponseOneOf = nil
		dst.OnChainEventSigner = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListOnChainSignersByFid200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListOnChainSignersByFid200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListOnChainSignersByFid200Response) MarshalJSON() ([]byte, error) {
	if src.ListOnChainSignersByFid200ResponseOneOf != nil {
		return json.Marshal(&src.ListOnChainSignersByFid200ResponseOneOf)
	}

	if src.OnChainEventSigner != nil {
		return json.Marshal(&src.OnChainEventSigner)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListOnChainSignersByFid200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ListOnChainSignersByFid200ResponseOneOf != nil {
		return obj.ListOnChainSignersByFid200ResponseOneOf
	}

	if obj.OnChainEventSigner != nil {
		return obj.OnChainEventSigner
	}

	// all schemas are nil
	return nil
}

type NullableListOnChainSignersByFid200Response struct {
	value *ListOnChainSignersByFid200Response
	isSet bool
}

func (v NullableListOnChainSignersByFid200Response) Get() *ListOnChainSignersByFid200Response {
	return v.value
}

func (v *NullableListOnChainSignersByFid200Response) Set(val *ListOnChainSignersByFid200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListOnChainSignersByFid200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListOnChainSignersByFid200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListOnChainSignersByFid200Response(val *ListOnChainSignersByFid200Response) *NullableListOnChainSignersByFid200Response {
	return &NullableListOnChainSignersByFid200Response{value: val, isSet: true}
}

func (v NullableListOnChainSignersByFid200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListOnChainSignersByFid200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


