/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HubEventRevokeMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HubEventRevokeMessage{}

// HubEventRevokeMessage struct for HubEventRevokeMessage
type HubEventRevokeMessage struct {
	Type *string `json:"type,omitempty"`
	Id *int32 `json:"id,omitempty"`
	RevokeMessageBody *RevokeMessageBody `json:"revokeMessageBody,omitempty"`
}

// NewHubEventRevokeMessage instantiates a new HubEventRevokeMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHubEventRevokeMessage() *HubEventRevokeMessage {
	this := HubEventRevokeMessage{}
	return &this
}

// NewHubEventRevokeMessageWithDefaults instantiates a new HubEventRevokeMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHubEventRevokeMessageWithDefaults() *HubEventRevokeMessage {
	this := HubEventRevokeMessage{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HubEventRevokeMessage) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubEventRevokeMessage) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HubEventRevokeMessage) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HubEventRevokeMessage) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HubEventRevokeMessage) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubEventRevokeMessage) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HubEventRevokeMessage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *HubEventRevokeMessage) SetId(v int32) {
	o.Id = &v
}

// GetRevokeMessageBody returns the RevokeMessageBody field value if set, zero value otherwise.
func (o *HubEventRevokeMessage) GetRevokeMessageBody() RevokeMessageBody {
	if o == nil || IsNil(o.RevokeMessageBody) {
		var ret RevokeMessageBody
		return ret
	}
	return *o.RevokeMessageBody
}

// GetRevokeMessageBodyOk returns a tuple with the RevokeMessageBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubEventRevokeMessage) GetRevokeMessageBodyOk() (*RevokeMessageBody, bool) {
	if o == nil || IsNil(o.RevokeMessageBody) {
		return nil, false
	}
	return o.RevokeMessageBody, true
}

// HasRevokeMessageBody returns a boolean if a field has been set.
func (o *HubEventRevokeMessage) HasRevokeMessageBody() bool {
	if o != nil && !IsNil(o.RevokeMessageBody) {
		return true
	}

	return false
}

// SetRevokeMessageBody gets a reference to the given RevokeMessageBody and assigns it to the RevokeMessageBody field.
func (o *HubEventRevokeMessage) SetRevokeMessageBody(v RevokeMessageBody) {
	o.RevokeMessageBody = &v
}

func (o HubEventRevokeMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HubEventRevokeMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RevokeMessageBody) {
		toSerialize["revokeMessageBody"] = o.RevokeMessageBody
	}
	return toSerialize, nil
}

type NullableHubEventRevokeMessage struct {
	value *HubEventRevokeMessage
	isSet bool
}

func (v NullableHubEventRevokeMessage) Get() *HubEventRevokeMessage {
	return v.value
}

func (v *NullableHubEventRevokeMessage) Set(val *HubEventRevokeMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableHubEventRevokeMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableHubEventRevokeMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHubEventRevokeMessage(val *HubEventRevokeMessage) *NullableHubEventRevokeMessage {
	return &NullableHubEventRevokeMessage{value: val, isSet: true}
}

func (v NullableHubEventRevokeMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHubEventRevokeMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


