/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StorageLimit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageLimit{}

// StorageLimit struct for StorageLimit
type StorageLimit struct {
	StoreType *StoreType `json:"storeType,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
}

// NewStorageLimit instantiates a new StorageLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageLimit() *StorageLimit {
	this := StorageLimit{}
	var storeType StoreType = STORETYPE_CASTS
	this.StoreType = &storeType
	return &this
}

// NewStorageLimitWithDefaults instantiates a new StorageLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageLimitWithDefaults() *StorageLimit {
	this := StorageLimit{}
	var storeType StoreType = STORETYPE_CASTS
	this.StoreType = &storeType
	return &this
}

// GetStoreType returns the StoreType field value if set, zero value otherwise.
func (o *StorageLimit) GetStoreType() StoreType {
	if o == nil || IsNil(o.StoreType) {
		var ret StoreType
		return ret
	}
	return *o.StoreType
}

// GetStoreTypeOk returns a tuple with the StoreType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageLimit) GetStoreTypeOk() (*StoreType, bool) {
	if o == nil || IsNil(o.StoreType) {
		return nil, false
	}
	return o.StoreType, true
}

// HasStoreType returns a boolean if a field has been set.
func (o *StorageLimit) HasStoreType() bool {
	if o != nil && !IsNil(o.StoreType) {
		return true
	}

	return false
}

// SetStoreType gets a reference to the given StoreType and assigns it to the StoreType field.
func (o *StorageLimit) SetStoreType(v StoreType) {
	o.StoreType = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *StorageLimit) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageLimit) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *StorageLimit) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *StorageLimit) SetLimit(v int32) {
	o.Limit = &v
}

func (o StorageLimit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageLimit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StoreType) {
		toSerialize["storeType"] = o.StoreType
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	return toSerialize, nil
}

type NullableStorageLimit struct {
	value *StorageLimit
	isSet bool
}

func (v NullableStorageLimit) Get() *StorageLimit {
	return v.value
}

func (v *NullableStorageLimit) Set(val *StorageLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageLimit(val *StorageLimit) *NullableStorageLimit {
	return &NullableStorageLimit{value: val, isSet: true}
}

func (v NullableStorageLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


