/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the VerificationAddEthAddressBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerificationAddEthAddressBody{}

// VerificationAddEthAddressBody Adds a Verification of ownership of an Ethereum Address
type VerificationAddEthAddressBody struct {
	Address string `json:"address" validate:"regexp=^(?:0x[a-fA-F0-9]{40}|[1-9A-HJ-NP-Za-km-z]{32,44})$"`
	EthSignature string `json:"ethSignature" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
	BlockHash string `json:"blockHash" validate:"regexp=^(0x[a-fA-F0-9]{64}|[1-9A-HJ-NP-Za-km-z]{44})$"`
	AdditionalProperties map[string]interface{}
}

type _VerificationAddEthAddressBody VerificationAddEthAddressBody

// NewVerificationAddEthAddressBody instantiates a new VerificationAddEthAddressBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerificationAddEthAddressBody(address string, ethSignature string, blockHash string) *VerificationAddEthAddressBody {
	this := VerificationAddEthAddressBody{}
	this.Address = address
	this.EthSignature = ethSignature
	this.BlockHash = blockHash
	return &this
}

// NewVerificationAddEthAddressBodyWithDefaults instantiates a new VerificationAddEthAddressBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerificationAddEthAddressBodyWithDefaults() *VerificationAddEthAddressBody {
	this := VerificationAddEthAddressBody{}
	return &this
}

// GetAddress returns the Address field value
func (o *VerificationAddEthAddressBody) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *VerificationAddEthAddressBody) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *VerificationAddEthAddressBody) SetAddress(v string) {
	o.Address = v
}

// GetEthSignature returns the EthSignature field value
func (o *VerificationAddEthAddressBody) GetEthSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EthSignature
}

// GetEthSignatureOk returns a tuple with the EthSignature field value
// and a boolean to check if the value has been set.
func (o *VerificationAddEthAddressBody) GetEthSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EthSignature, true
}

// SetEthSignature sets field value
func (o *VerificationAddEthAddressBody) SetEthSignature(v string) {
	o.EthSignature = v
}

// GetBlockHash returns the BlockHash field value
func (o *VerificationAddEthAddressBody) GetBlockHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value
// and a boolean to check if the value has been set.
func (o *VerificationAddEthAddressBody) GetBlockHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockHash, true
}

// SetBlockHash sets field value
func (o *VerificationAddEthAddressBody) SetBlockHash(v string) {
	o.BlockHash = v
}

func (o VerificationAddEthAddressBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerificationAddEthAddressBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["ethSignature"] = o.EthSignature
	toSerialize["blockHash"] = o.BlockHash

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VerificationAddEthAddressBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"ethSignature",
		"blockHash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVerificationAddEthAddressBody := _VerificationAddEthAddressBody{}

	err = json.Unmarshal(data, &varVerificationAddEthAddressBody)

	if err != nil {
		return err
	}

	*o = VerificationAddEthAddressBody(varVerificationAddEthAddressBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "ethSignature")
		delete(additionalProperties, "blockHash")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVerificationAddEthAddressBody struct {
	value *VerificationAddEthAddressBody
	isSet bool
}

func (v NullableVerificationAddEthAddressBody) Get() *VerificationAddEthAddressBody {
	return v.value
}

func (v *NullableVerificationAddEthAddressBody) Set(val *VerificationAddEthAddressBody) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationAddEthAddressBody) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationAddEthAddressBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationAddEthAddressBody(val *VerificationAddEthAddressBody) *NullableVerificationAddEthAddressBody {
	return &NullableVerificationAddEthAddressBody{value: val, isSet: true}
}

func (v NullableVerificationAddEthAddressBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationAddEthAddressBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


