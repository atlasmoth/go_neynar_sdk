/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// HubEvent - struct for HubEvent
type HubEvent struct {
	HubEventMergeMessage *HubEventMergeMessage
	HubEventMergeOnChainEvent *HubEventMergeOnChainEvent
	HubEventMergeUsernameProof *HubEventMergeUsernameProof
	HubEventPruneMessage *HubEventPruneMessage
	HubEventRevokeMessage *HubEventRevokeMessage
}

// HubEventMergeMessageAsHubEvent is a convenience function that returns HubEventMergeMessage wrapped in HubEvent
func HubEventMergeMessageAsHubEvent(v *HubEventMergeMessage) HubEvent {
	return HubEvent{
		HubEventMergeMessage: v,
	}
}

// HubEventMergeOnChainEventAsHubEvent is a convenience function that returns HubEventMergeOnChainEvent wrapped in HubEvent
func HubEventMergeOnChainEventAsHubEvent(v *HubEventMergeOnChainEvent) HubEvent {
	return HubEvent{
		HubEventMergeOnChainEvent: v,
	}
}

// HubEventMergeUsernameProofAsHubEvent is a convenience function that returns HubEventMergeUsernameProof wrapped in HubEvent
func HubEventMergeUsernameProofAsHubEvent(v *HubEventMergeUsernameProof) HubEvent {
	return HubEvent{
		HubEventMergeUsernameProof: v,
	}
}

// HubEventPruneMessageAsHubEvent is a convenience function that returns HubEventPruneMessage wrapped in HubEvent
func HubEventPruneMessageAsHubEvent(v *HubEventPruneMessage) HubEvent {
	return HubEvent{
		HubEventPruneMessage: v,
	}
}

// HubEventRevokeMessageAsHubEvent is a convenience function that returns HubEventRevokeMessage wrapped in HubEvent
func HubEventRevokeMessageAsHubEvent(v *HubEventRevokeMessage) HubEvent {
	return HubEvent{
		HubEventRevokeMessage: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *HubEvent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into HubEventMergeMessage
	err = newStrictDecoder(data).Decode(&dst.HubEventMergeMessage)
	if err == nil {
		jsonHubEventMergeMessage, _ := json.Marshal(dst.HubEventMergeMessage)
		if string(jsonHubEventMergeMessage) == "{}" { // empty struct
			dst.HubEventMergeMessage = nil
		} else {
			if err = validator.Validate(dst.HubEventMergeMessage); err != nil {
				dst.HubEventMergeMessage = nil
			} else {
				match++
			}
		}
	} else {
		dst.HubEventMergeMessage = nil
	}

	// try to unmarshal data into HubEventMergeOnChainEvent
	err = newStrictDecoder(data).Decode(&dst.HubEventMergeOnChainEvent)
	if err == nil {
		jsonHubEventMergeOnChainEvent, _ := json.Marshal(dst.HubEventMergeOnChainEvent)
		if string(jsonHubEventMergeOnChainEvent) == "{}" { // empty struct
			dst.HubEventMergeOnChainEvent = nil
		} else {
			if err = validator.Validate(dst.HubEventMergeOnChainEvent); err != nil {
				dst.HubEventMergeOnChainEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.HubEventMergeOnChainEvent = nil
	}

	// try to unmarshal data into HubEventMergeUsernameProof
	err = newStrictDecoder(data).Decode(&dst.HubEventMergeUsernameProof)
	if err == nil {
		jsonHubEventMergeUsernameProof, _ := json.Marshal(dst.HubEventMergeUsernameProof)
		if string(jsonHubEventMergeUsernameProof) == "{}" { // empty struct
			dst.HubEventMergeUsernameProof = nil
		} else {
			if err = validator.Validate(dst.HubEventMergeUsernameProof); err != nil {
				dst.HubEventMergeUsernameProof = nil
			} else {
				match++
			}
		}
	} else {
		dst.HubEventMergeUsernameProof = nil
	}

	// try to unmarshal data into HubEventPruneMessage
	err = newStrictDecoder(data).Decode(&dst.HubEventPruneMessage)
	if err == nil {
		jsonHubEventPruneMessage, _ := json.Marshal(dst.HubEventPruneMessage)
		if string(jsonHubEventPruneMessage) == "{}" { // empty struct
			dst.HubEventPruneMessage = nil
		} else {
			if err = validator.Validate(dst.HubEventPruneMessage); err != nil {
				dst.HubEventPruneMessage = nil
			} else {
				match++
			}
		}
	} else {
		dst.HubEventPruneMessage = nil
	}

	// try to unmarshal data into HubEventRevokeMessage
	err = newStrictDecoder(data).Decode(&dst.HubEventRevokeMessage)
	if err == nil {
		jsonHubEventRevokeMessage, _ := json.Marshal(dst.HubEventRevokeMessage)
		if string(jsonHubEventRevokeMessage) == "{}" { // empty struct
			dst.HubEventRevokeMessage = nil
		} else {
			if err = validator.Validate(dst.HubEventRevokeMessage); err != nil {
				dst.HubEventRevokeMessage = nil
			} else {
				match++
			}
		}
	} else {
		dst.HubEventRevokeMessage = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.HubEventMergeMessage = nil
		dst.HubEventMergeOnChainEvent = nil
		dst.HubEventMergeUsernameProof = nil
		dst.HubEventPruneMessage = nil
		dst.HubEventRevokeMessage = nil

		return fmt.Errorf("data matches more than one schema in oneOf(HubEvent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(HubEvent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src HubEvent) MarshalJSON() ([]byte, error) {
	if src.HubEventMergeMessage != nil {
		return json.Marshal(&src.HubEventMergeMessage)
	}

	if src.HubEventMergeOnChainEvent != nil {
		return json.Marshal(&src.HubEventMergeOnChainEvent)
	}

	if src.HubEventMergeUsernameProof != nil {
		return json.Marshal(&src.HubEventMergeUsernameProof)
	}

	if src.HubEventPruneMessage != nil {
		return json.Marshal(&src.HubEventPruneMessage)
	}

	if src.HubEventRevokeMessage != nil {
		return json.Marshal(&src.HubEventRevokeMessage)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *HubEvent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.HubEventMergeMessage != nil {
		return obj.HubEventMergeMessage
	}

	if obj.HubEventMergeOnChainEvent != nil {
		return obj.HubEventMergeOnChainEvent
	}

	if obj.HubEventMergeUsernameProof != nil {
		return obj.HubEventMergeUsernameProof
	}

	if obj.HubEventPruneMessage != nil {
		return obj.HubEventPruneMessage
	}

	if obj.HubEventRevokeMessage != nil {
		return obj.HubEventRevokeMessage
	}

	// all schemas are nil
	return nil
}

type NullableHubEvent struct {
	value *HubEvent
	isSet bool
}

func (v NullableHubEvent) Get() *HubEvent {
	return v.value
}

func (v *NullableHubEvent) Set(val *HubEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableHubEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableHubEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHubEvent(val *HubEvent) *NullableHubEvent {
	return &NullableHubEvent{value: val, isSet: true}
}

func (v NullableHubEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHubEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


