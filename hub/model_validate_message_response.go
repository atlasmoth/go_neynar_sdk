/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ValidateMessageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidateMessageResponse{}

// ValidateMessageResponse struct for ValidateMessageResponse
type ValidateMessageResponse struct {
	Valid *bool `json:"valid,omitempty"`
	Message *Message `json:"message,omitempty"`
}

// NewValidateMessageResponse instantiates a new ValidateMessageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateMessageResponse() *ValidateMessageResponse {
	this := ValidateMessageResponse{}
	return &this
}

// NewValidateMessageResponseWithDefaults instantiates a new ValidateMessageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateMessageResponseWithDefaults() *ValidateMessageResponse {
	this := ValidateMessageResponse{}
	return &this
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *ValidateMessageResponse) GetValid() bool {
	if o == nil || IsNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateMessageResponse) GetValidOk() (*bool, bool) {
	if o == nil || IsNil(o.Valid) {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *ValidateMessageResponse) HasValid() bool {
	if o != nil && !IsNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *ValidateMessageResponse) SetValid(v bool) {
	o.Valid = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ValidateMessageResponse) GetMessage() Message {
	if o == nil || IsNil(o.Message) {
		var ret Message
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateMessageResponse) GetMessageOk() (*Message, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ValidateMessageResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given Message and assigns it to the Message field.
func (o *ValidateMessageResponse) SetMessage(v Message) {
	o.Message = &v
}

func (o ValidateMessageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidateMessageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Valid) {
		toSerialize["valid"] = o.Valid
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableValidateMessageResponse struct {
	value *ValidateMessageResponse
	isSet bool
}

func (v NullableValidateMessageResponse) Get() *ValidateMessageResponse {
	return v.value
}

func (v *NullableValidateMessageResponse) Set(val *ValidateMessageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateMessageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateMessageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateMessageResponse(val *ValidateMessageResponse) *NullableValidateMessageResponse {
	return &NullableValidateMessageResponse{value: val, isSet: true}
}

func (v NullableValidateMessageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateMessageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


