/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// Embed - struct for Embed
type Embed struct {
	CastEmbed *CastEmbed
	UrlEmbed *UrlEmbed
}

// CastEmbedAsEmbed is a convenience function that returns CastEmbed wrapped in Embed
func CastEmbedAsEmbed(v *CastEmbed) Embed {
	return Embed{
		CastEmbed: v,
	}
}

// UrlEmbedAsEmbed is a convenience function that returns UrlEmbed wrapped in Embed
func UrlEmbedAsEmbed(v *UrlEmbed) Embed {
	return Embed{
		UrlEmbed: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Embed) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CastEmbed
	err = newStrictDecoder(data).Decode(&dst.CastEmbed)
	if err == nil {
		jsonCastEmbed, _ := json.Marshal(dst.CastEmbed)
		if string(jsonCastEmbed) == "{}" { // empty struct
			dst.CastEmbed = nil
		} else {
			if err = validator.Validate(dst.CastEmbed); err != nil {
				dst.CastEmbed = nil
			} else {
				match++
			}
		}
	} else {
		dst.CastEmbed = nil
	}

	// try to unmarshal data into UrlEmbed
	err = newStrictDecoder(data).Decode(&dst.UrlEmbed)
	if err == nil {
		jsonUrlEmbed, _ := json.Marshal(dst.UrlEmbed)
		if string(jsonUrlEmbed) == "{}" { // empty struct
			dst.UrlEmbed = nil
		} else {
			if err = validator.Validate(dst.UrlEmbed); err != nil {
				dst.UrlEmbed = nil
			} else {
				match++
			}
		}
	} else {
		dst.UrlEmbed = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CastEmbed = nil
		dst.UrlEmbed = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Embed)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Embed)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Embed) MarshalJSON() ([]byte, error) {
	if src.CastEmbed != nil {
		return json.Marshal(&src.CastEmbed)
	}

	if src.UrlEmbed != nil {
		return json.Marshal(&src.UrlEmbed)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Embed) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CastEmbed != nil {
		return obj.CastEmbed
	}

	if obj.UrlEmbed != nil {
		return obj.UrlEmbed
	}

	// all schemas are nil
	return nil
}

type NullableEmbed struct {
	value *Embed
	isSet bool
}

func (v NullableEmbed) Get() *Embed {
	return v.value
}

func (v *NullableEmbed) Set(val *Embed) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbed) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbed(val *Embed) *NullableEmbed {
	return &NullableEmbed{value: val, isSet: true}
}

func (v NullableEmbed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


