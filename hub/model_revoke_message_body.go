/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RevokeMessageBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevokeMessageBody{}

// RevokeMessageBody struct for RevokeMessageBody
type RevokeMessageBody struct {
	Message *Message `json:"message,omitempty"`
}

// NewRevokeMessageBody instantiates a new RevokeMessageBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevokeMessageBody() *RevokeMessageBody {
	this := RevokeMessageBody{}
	return &this
}

// NewRevokeMessageBodyWithDefaults instantiates a new RevokeMessageBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevokeMessageBodyWithDefaults() *RevokeMessageBody {
	this := RevokeMessageBody{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *RevokeMessageBody) GetMessage() Message {
	if o == nil || IsNil(o.Message) {
		var ret Message
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevokeMessageBody) GetMessageOk() (*Message, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *RevokeMessageBody) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given Message and assigns it to the Message field.
func (o *RevokeMessageBody) SetMessage(v Message) {
	o.Message = &v
}

func (o RevokeMessageBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevokeMessageBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableRevokeMessageBody struct {
	value *RevokeMessageBody
	isSet bool
}

func (v NullableRevokeMessageBody) Get() *RevokeMessageBody {
	return v.value
}

func (v *NullableRevokeMessageBody) Set(val *RevokeMessageBody) {
	v.value = val
	v.isSet = true
}

func (v NullableRevokeMessageBody) IsSet() bool {
	return v.isSet
}

func (v *NullableRevokeMessageBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevokeMessageBody(val *RevokeMessageBody) *NullableRevokeMessageBody {
	return &NullableRevokeMessageBody{value: val, isSet: true}
}

func (v NullableRevokeMessageBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevokeMessageBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


