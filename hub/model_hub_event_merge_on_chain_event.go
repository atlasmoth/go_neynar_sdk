/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HubEventMergeOnChainEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HubEventMergeOnChainEvent{}

// HubEventMergeOnChainEvent struct for HubEventMergeOnChainEvent
type HubEventMergeOnChainEvent struct {
	Type string `json:"type"`
	Id int32 `json:"id"`
	MergeOnChainEventBody MergeOnChainEventBody `json:"mergeOnChainEventBody"`
}

type _HubEventMergeOnChainEvent HubEventMergeOnChainEvent

// NewHubEventMergeOnChainEvent instantiates a new HubEventMergeOnChainEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHubEventMergeOnChainEvent(type_ string, id int32, mergeOnChainEventBody MergeOnChainEventBody) *HubEventMergeOnChainEvent {
	this := HubEventMergeOnChainEvent{}
	this.Type = type_
	this.Id = id
	this.MergeOnChainEventBody = mergeOnChainEventBody
	return &this
}

// NewHubEventMergeOnChainEventWithDefaults instantiates a new HubEventMergeOnChainEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHubEventMergeOnChainEventWithDefaults() *HubEventMergeOnChainEvent {
	this := HubEventMergeOnChainEvent{}
	return &this
}

// GetType returns the Type field value
func (o *HubEventMergeOnChainEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *HubEventMergeOnChainEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *HubEventMergeOnChainEvent) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value
func (o *HubEventMergeOnChainEvent) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HubEventMergeOnChainEvent) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *HubEventMergeOnChainEvent) SetId(v int32) {
	o.Id = v
}

// GetMergeOnChainEventBody returns the MergeOnChainEventBody field value
func (o *HubEventMergeOnChainEvent) GetMergeOnChainEventBody() MergeOnChainEventBody {
	if o == nil {
		var ret MergeOnChainEventBody
		return ret
	}

	return o.MergeOnChainEventBody
}

// GetMergeOnChainEventBodyOk returns a tuple with the MergeOnChainEventBody field value
// and a boolean to check if the value has been set.
func (o *HubEventMergeOnChainEvent) GetMergeOnChainEventBodyOk() (*MergeOnChainEventBody, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MergeOnChainEventBody, true
}

// SetMergeOnChainEventBody sets field value
func (o *HubEventMergeOnChainEvent) SetMergeOnChainEventBody(v MergeOnChainEventBody) {
	o.MergeOnChainEventBody = v
}

func (o HubEventMergeOnChainEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HubEventMergeOnChainEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["id"] = o.Id
	toSerialize["mergeOnChainEventBody"] = o.MergeOnChainEventBody
	return toSerialize, nil
}

func (o *HubEventMergeOnChainEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"id",
		"mergeOnChainEventBody",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHubEventMergeOnChainEvent := _HubEventMergeOnChainEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHubEventMergeOnChainEvent)

	if err != nil {
		return err
	}

	*o = HubEventMergeOnChainEvent(varHubEventMergeOnChainEvent)

	return err
}

type NullableHubEventMergeOnChainEvent struct {
	value *HubEventMergeOnChainEvent
	isSet bool
}

func (v NullableHubEventMergeOnChainEvent) Get() *HubEventMergeOnChainEvent {
	return v.value
}

func (v *NullableHubEventMergeOnChainEvent) Set(val *HubEventMergeOnChainEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableHubEventMergeOnChainEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableHubEventMergeOnChainEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHubEventMergeOnChainEvent(val *HubEventMergeOnChainEvent) *NullableHubEventMergeOnChainEvent {
	return &NullableHubEventMergeOnChainEvent{value: val, isSet: true}
}

func (v NullableHubEventMergeOnChainEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHubEventMergeOnChainEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


