/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SignatureScheme Type of signature scheme used to sign the Message hash - SIGNATURE_SCHEME_ED25519: Ed25519 signature (default)  - SIGNATURE_SCHEME_EIP712: ECDSA signature using EIP-712 scheme
type SignatureScheme string

// List of SignatureScheme
const (
	SIGNATURESCHEME_ED25519 SignatureScheme = "SIGNATURE_SCHEME_ED25519"
	SIGNATURESCHEME_EIP712 SignatureScheme = "SIGNATURE_SCHEME_EIP712"
)

// All allowed values of SignatureScheme enum
var AllowedSignatureSchemeEnumValues = []SignatureScheme{
	"SIGNATURE_SCHEME_ED25519",
	"SIGNATURE_SCHEME_EIP712",
}

func (v *SignatureScheme) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SignatureScheme(value)
	for _, existing := range AllowedSignatureSchemeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SignatureScheme", value)
}

// NewSignatureSchemeFromValue returns a pointer to a valid SignatureScheme
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSignatureSchemeFromValue(v string) (*SignatureScheme, error) {
	ev := SignatureScheme(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SignatureScheme: valid values are %v", v, AllowedSignatureSchemeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SignatureScheme) IsValid() bool {
	for _, existing := range AllowedSignatureSchemeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SignatureScheme value
func (v SignatureScheme) Ptr() *SignatureScheme {
	return &v
}

type NullableSignatureScheme struct {
	value *SignatureScheme
	isSet bool
}

func (v NullableSignatureScheme) Get() *SignatureScheme {
	return v.value
}

func (v *NullableSignatureScheme) Set(val *SignatureScheme) {
	v.value = val
	v.isSet = true
}

func (v NullableSignatureScheme) IsSet() bool {
	return v.isSet
}

func (v *NullableSignatureScheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignatureScheme(val *SignatureScheme) *NullableSignatureScheme {
	return &NullableSignatureScheme{value: val, isSet: true}
}

func (v NullableSignatureScheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignatureScheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

