/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HubInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HubInfoResponse{}

// HubInfoResponse struct for HubInfoResponse
type HubInfoResponse struct {
	Version *string `json:"version,omitempty"`
	IsSyncing *bool `json:"isSyncing,omitempty"`
	Nickname *string `json:"nickname,omitempty"`
	RootHash *string `json:"rootHash,omitempty"`
	DbStats *DbStats `json:"dbStats,omitempty"`
	PeerId *string `json:"peerId,omitempty"`
	HubOperatorFid *int32 `json:"hubOperatorFid,omitempty"`
}

// NewHubInfoResponse instantiates a new HubInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHubInfoResponse() *HubInfoResponse {
	this := HubInfoResponse{}
	return &this
}

// NewHubInfoResponseWithDefaults instantiates a new HubInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHubInfoResponseWithDefaults() *HubInfoResponse {
	this := HubInfoResponse{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *HubInfoResponse) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubInfoResponse) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *HubInfoResponse) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *HubInfoResponse) SetVersion(v string) {
	o.Version = &v
}

// GetIsSyncing returns the IsSyncing field value if set, zero value otherwise.
func (o *HubInfoResponse) GetIsSyncing() bool {
	if o == nil || IsNil(o.IsSyncing) {
		var ret bool
		return ret
	}
	return *o.IsSyncing
}

// GetIsSyncingOk returns a tuple with the IsSyncing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubInfoResponse) GetIsSyncingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSyncing) {
		return nil, false
	}
	return o.IsSyncing, true
}

// HasIsSyncing returns a boolean if a field has been set.
func (o *HubInfoResponse) HasIsSyncing() bool {
	if o != nil && !IsNil(o.IsSyncing) {
		return true
	}

	return false
}

// SetIsSyncing gets a reference to the given bool and assigns it to the IsSyncing field.
func (o *HubInfoResponse) SetIsSyncing(v bool) {
	o.IsSyncing = &v
}

// GetNickname returns the Nickname field value if set, zero value otherwise.
func (o *HubInfoResponse) GetNickname() string {
	if o == nil || IsNil(o.Nickname) {
		var ret string
		return ret
	}
	return *o.Nickname
}

// GetNicknameOk returns a tuple with the Nickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubInfoResponse) GetNicknameOk() (*string, bool) {
	if o == nil || IsNil(o.Nickname) {
		return nil, false
	}
	return o.Nickname, true
}

// HasNickname returns a boolean if a field has been set.
func (o *HubInfoResponse) HasNickname() bool {
	if o != nil && !IsNil(o.Nickname) {
		return true
	}

	return false
}

// SetNickname gets a reference to the given string and assigns it to the Nickname field.
func (o *HubInfoResponse) SetNickname(v string) {
	o.Nickname = &v
}

// GetRootHash returns the RootHash field value if set, zero value otherwise.
func (o *HubInfoResponse) GetRootHash() string {
	if o == nil || IsNil(o.RootHash) {
		var ret string
		return ret
	}
	return *o.RootHash
}

// GetRootHashOk returns a tuple with the RootHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubInfoResponse) GetRootHashOk() (*string, bool) {
	if o == nil || IsNil(o.RootHash) {
		return nil, false
	}
	return o.RootHash, true
}

// HasRootHash returns a boolean if a field has been set.
func (o *HubInfoResponse) HasRootHash() bool {
	if o != nil && !IsNil(o.RootHash) {
		return true
	}

	return false
}

// SetRootHash gets a reference to the given string and assigns it to the RootHash field.
func (o *HubInfoResponse) SetRootHash(v string) {
	o.RootHash = &v
}

// GetDbStats returns the DbStats field value if set, zero value otherwise.
func (o *HubInfoResponse) GetDbStats() DbStats {
	if o == nil || IsNil(o.DbStats) {
		var ret DbStats
		return ret
	}
	return *o.DbStats
}

// GetDbStatsOk returns a tuple with the DbStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubInfoResponse) GetDbStatsOk() (*DbStats, bool) {
	if o == nil || IsNil(o.DbStats) {
		return nil, false
	}
	return o.DbStats, true
}

// HasDbStats returns a boolean if a field has been set.
func (o *HubInfoResponse) HasDbStats() bool {
	if o != nil && !IsNil(o.DbStats) {
		return true
	}

	return false
}

// SetDbStats gets a reference to the given DbStats and assigns it to the DbStats field.
func (o *HubInfoResponse) SetDbStats(v DbStats) {
	o.DbStats = &v
}

// GetPeerId returns the PeerId field value if set, zero value otherwise.
func (o *HubInfoResponse) GetPeerId() string {
	if o == nil || IsNil(o.PeerId) {
		var ret string
		return ret
	}
	return *o.PeerId
}

// GetPeerIdOk returns a tuple with the PeerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubInfoResponse) GetPeerIdOk() (*string, bool) {
	if o == nil || IsNil(o.PeerId) {
		return nil, false
	}
	return o.PeerId, true
}

// HasPeerId returns a boolean if a field has been set.
func (o *HubInfoResponse) HasPeerId() bool {
	if o != nil && !IsNil(o.PeerId) {
		return true
	}

	return false
}

// SetPeerId gets a reference to the given string and assigns it to the PeerId field.
func (o *HubInfoResponse) SetPeerId(v string) {
	o.PeerId = &v
}

// GetHubOperatorFid returns the HubOperatorFid field value if set, zero value otherwise.
func (o *HubInfoResponse) GetHubOperatorFid() int32 {
	if o == nil || IsNil(o.HubOperatorFid) {
		var ret int32
		return ret
	}
	return *o.HubOperatorFid
}

// GetHubOperatorFidOk returns a tuple with the HubOperatorFid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubInfoResponse) GetHubOperatorFidOk() (*int32, bool) {
	if o == nil || IsNil(o.HubOperatorFid) {
		return nil, false
	}
	return o.HubOperatorFid, true
}

// HasHubOperatorFid returns a boolean if a field has been set.
func (o *HubInfoResponse) HasHubOperatorFid() bool {
	if o != nil && !IsNil(o.HubOperatorFid) {
		return true
	}

	return false
}

// SetHubOperatorFid gets a reference to the given int32 and assigns it to the HubOperatorFid field.
func (o *HubInfoResponse) SetHubOperatorFid(v int32) {
	o.HubOperatorFid = &v
}

func (o HubInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HubInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.IsSyncing) {
		toSerialize["isSyncing"] = o.IsSyncing
	}
	if !IsNil(o.Nickname) {
		toSerialize["nickname"] = o.Nickname
	}
	if !IsNil(o.RootHash) {
		toSerialize["rootHash"] = o.RootHash
	}
	if !IsNil(o.DbStats) {
		toSerialize["dbStats"] = o.DbStats
	}
	if !IsNil(o.PeerId) {
		toSerialize["peerId"] = o.PeerId
	}
	if !IsNil(o.HubOperatorFid) {
		toSerialize["hubOperatorFid"] = o.HubOperatorFid
	}
	return toSerialize, nil
}

type NullableHubInfoResponse struct {
	value *HubInfoResponse
	isSet bool
}

func (v NullableHubInfoResponse) Get() *HubInfoResponse {
	return v.value
}

func (v *NullableHubInfoResponse) Set(val *HubInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHubInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHubInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHubInfoResponse(val *HubInfoResponse) *NullableHubInfoResponse {
	return &NullableHubInfoResponse{value: val, isSet: true}
}

func (v NullableHubInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHubInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


