/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HubInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HubInfoResponse{}

// HubInfoResponse struct for HubInfoResponse
type HubInfoResponse struct {
	Version string `json:"version"`
	IsSyncing bool `json:"isSyncing"`
	Nickname string `json:"nickname"`
	RootHash string `json:"rootHash"`
	DbStats *DbStats `json:"dbStats,omitempty"`
	PeerId string `json:"peerId"`
	HubOperatorFid int32 `json:"hubOperatorFid"`
}

type _HubInfoResponse HubInfoResponse

// NewHubInfoResponse instantiates a new HubInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHubInfoResponse(version string, isSyncing bool, nickname string, rootHash string, peerId string, hubOperatorFid int32) *HubInfoResponse {
	this := HubInfoResponse{}
	this.Version = version
	this.IsSyncing = isSyncing
	this.Nickname = nickname
	this.RootHash = rootHash
	this.PeerId = peerId
	this.HubOperatorFid = hubOperatorFid
	return &this
}

// NewHubInfoResponseWithDefaults instantiates a new HubInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHubInfoResponseWithDefaults() *HubInfoResponse {
	this := HubInfoResponse{}
	return &this
}

// GetVersion returns the Version field value
func (o *HubInfoResponse) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *HubInfoResponse) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *HubInfoResponse) SetVersion(v string) {
	o.Version = v
}

// GetIsSyncing returns the IsSyncing field value
func (o *HubInfoResponse) GetIsSyncing() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSyncing
}

// GetIsSyncingOk returns a tuple with the IsSyncing field value
// and a boolean to check if the value has been set.
func (o *HubInfoResponse) GetIsSyncingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSyncing, true
}

// SetIsSyncing sets field value
func (o *HubInfoResponse) SetIsSyncing(v bool) {
	o.IsSyncing = v
}

// GetNickname returns the Nickname field value
func (o *HubInfoResponse) GetNickname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Nickname
}

// GetNicknameOk returns a tuple with the Nickname field value
// and a boolean to check if the value has been set.
func (o *HubInfoResponse) GetNicknameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nickname, true
}

// SetNickname sets field value
func (o *HubInfoResponse) SetNickname(v string) {
	o.Nickname = v
}

// GetRootHash returns the RootHash field value
func (o *HubInfoResponse) GetRootHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootHash
}

// GetRootHashOk returns a tuple with the RootHash field value
// and a boolean to check if the value has been set.
func (o *HubInfoResponse) GetRootHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootHash, true
}

// SetRootHash sets field value
func (o *HubInfoResponse) SetRootHash(v string) {
	o.RootHash = v
}

// GetDbStats returns the DbStats field value if set, zero value otherwise.
func (o *HubInfoResponse) GetDbStats() DbStats {
	if o == nil || IsNil(o.DbStats) {
		var ret DbStats
		return ret
	}
	return *o.DbStats
}

// GetDbStatsOk returns a tuple with the DbStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubInfoResponse) GetDbStatsOk() (*DbStats, bool) {
	if o == nil || IsNil(o.DbStats) {
		return nil, false
	}
	return o.DbStats, true
}

// HasDbStats returns a boolean if a field has been set.
func (o *HubInfoResponse) HasDbStats() bool {
	if o != nil && !IsNil(o.DbStats) {
		return true
	}

	return false
}

// SetDbStats gets a reference to the given DbStats and assigns it to the DbStats field.
func (o *HubInfoResponse) SetDbStats(v DbStats) {
	o.DbStats = &v
}

// GetPeerId returns the PeerId field value
func (o *HubInfoResponse) GetPeerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PeerId
}

// GetPeerIdOk returns a tuple with the PeerId field value
// and a boolean to check if the value has been set.
func (o *HubInfoResponse) GetPeerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeerId, true
}

// SetPeerId sets field value
func (o *HubInfoResponse) SetPeerId(v string) {
	o.PeerId = v
}

// GetHubOperatorFid returns the HubOperatorFid field value
func (o *HubInfoResponse) GetHubOperatorFid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HubOperatorFid
}

// GetHubOperatorFidOk returns a tuple with the HubOperatorFid field value
// and a boolean to check if the value has been set.
func (o *HubInfoResponse) GetHubOperatorFidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HubOperatorFid, true
}

// SetHubOperatorFid sets field value
func (o *HubInfoResponse) SetHubOperatorFid(v int32) {
	o.HubOperatorFid = v
}

func (o HubInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HubInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["isSyncing"] = o.IsSyncing
	toSerialize["nickname"] = o.Nickname
	toSerialize["rootHash"] = o.RootHash
	if !IsNil(o.DbStats) {
		toSerialize["dbStats"] = o.DbStats
	}
	toSerialize["peerId"] = o.PeerId
	toSerialize["hubOperatorFid"] = o.HubOperatorFid
	return toSerialize, nil
}

func (o *HubInfoResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"isSyncing",
		"nickname",
		"rootHash",
		"peerId",
		"hubOperatorFid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHubInfoResponse := _HubInfoResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHubInfoResponse)

	if err != nil {
		return err
	}

	*o = HubInfoResponse(varHubInfoResponse)

	return err
}

type NullableHubInfoResponse struct {
	value *HubInfoResponse
	isSet bool
}

func (v NullableHubInfoResponse) Get() *HubInfoResponse {
	return v.value
}

func (v *NullableHubInfoResponse) Set(val *HubInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHubInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHubInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHubInfoResponse(val *HubInfoResponse) *NullableHubInfoResponse {
	return &NullableHubInfoResponse{value: val, isSet: true}
}

func (v NullableHubInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHubInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


