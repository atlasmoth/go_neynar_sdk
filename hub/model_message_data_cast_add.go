/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MessageDataCastAdd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageDataCastAdd{}

// MessageDataCastAdd struct for MessageDataCastAdd
type MessageDataCastAdd struct {
	Fid *int32 `json:"fid,omitempty"`
	Timestamp *int64 `json:"timestamp,omitempty"`
	Network *FarcasterNetwork `json:"network,omitempty"`
	CastAddBody *CastAddBody `json:"castAddBody,omitempty"`
}

// NewMessageDataCastAdd instantiates a new MessageDataCastAdd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageDataCastAdd() *MessageDataCastAdd {
	this := MessageDataCastAdd{}
	var network FarcasterNetwork = FARCASTERNETWORK_MAINNET
	this.Network = &network
	return &this
}

// NewMessageDataCastAddWithDefaults instantiates a new MessageDataCastAdd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageDataCastAddWithDefaults() *MessageDataCastAdd {
	this := MessageDataCastAdd{}
	var network FarcasterNetwork = FARCASTERNETWORK_MAINNET
	this.Network = &network
	return &this
}

// GetFid returns the Fid field value if set, zero value otherwise.
func (o *MessageDataCastAdd) GetFid() int32 {
	if o == nil || IsNil(o.Fid) {
		var ret int32
		return ret
	}
	return *o.Fid
}

// GetFidOk returns a tuple with the Fid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDataCastAdd) GetFidOk() (*int32, bool) {
	if o == nil || IsNil(o.Fid) {
		return nil, false
	}
	return o.Fid, true
}

// HasFid returns a boolean if a field has been set.
func (o *MessageDataCastAdd) HasFid() bool {
	if o != nil && !IsNil(o.Fid) {
		return true
	}

	return false
}

// SetFid gets a reference to the given int32 and assigns it to the Fid field.
func (o *MessageDataCastAdd) SetFid(v int32) {
	o.Fid = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *MessageDataCastAdd) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDataCastAdd) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *MessageDataCastAdd) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *MessageDataCastAdd) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *MessageDataCastAdd) GetNetwork() FarcasterNetwork {
	if o == nil || IsNil(o.Network) {
		var ret FarcasterNetwork
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDataCastAdd) GetNetworkOk() (*FarcasterNetwork, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *MessageDataCastAdd) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given FarcasterNetwork and assigns it to the Network field.
func (o *MessageDataCastAdd) SetNetwork(v FarcasterNetwork) {
	o.Network = &v
}

// GetCastAddBody returns the CastAddBody field value if set, zero value otherwise.
func (o *MessageDataCastAdd) GetCastAddBody() CastAddBody {
	if o == nil || IsNil(o.CastAddBody) {
		var ret CastAddBody
		return ret
	}
	return *o.CastAddBody
}

// GetCastAddBodyOk returns a tuple with the CastAddBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageDataCastAdd) GetCastAddBodyOk() (*CastAddBody, bool) {
	if o == nil || IsNil(o.CastAddBody) {
		return nil, false
	}
	return o.CastAddBody, true
}

// HasCastAddBody returns a boolean if a field has been set.
func (o *MessageDataCastAdd) HasCastAddBody() bool {
	if o != nil && !IsNil(o.CastAddBody) {
		return true
	}

	return false
}

// SetCastAddBody gets a reference to the given CastAddBody and assigns it to the CastAddBody field.
func (o *MessageDataCastAdd) SetCastAddBody(v CastAddBody) {
	o.CastAddBody = &v
}

func (o MessageDataCastAdd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageDataCastAdd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fid) {
		toSerialize["fid"] = o.Fid
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.CastAddBody) {
		toSerialize["castAddBody"] = o.CastAddBody
	}
	return toSerialize, nil
}

type NullableMessageDataCastAdd struct {
	value *MessageDataCastAdd
	isSet bool
}

func (v NullableMessageDataCastAdd) Get() *MessageDataCastAdd {
	return v.value
}

func (v *NullableMessageDataCastAdd) Set(val *MessageDataCastAdd) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageDataCastAdd) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageDataCastAdd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageDataCastAdd(val *MessageDataCastAdd) *NullableMessageDataCastAdd {
	return &NullableMessageDataCastAdd{value: val, isSet: true}
}

func (v NullableMessageDataCastAdd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageDataCastAdd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


