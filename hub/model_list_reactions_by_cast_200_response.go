/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListReactionsByCast200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListReactionsByCast200Response{}

// ListReactionsByCast200Response struct for ListReactionsByCast200Response
type ListReactionsByCast200Response struct {
	Messages []Reaction `json:"messages"`
	NextPageToken string `json:"nextPageToken" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
}

type _ListReactionsByCast200Response ListReactionsByCast200Response

// NewListReactionsByCast200Response instantiates a new ListReactionsByCast200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListReactionsByCast200Response(messages []Reaction, nextPageToken string) *ListReactionsByCast200Response {
	this := ListReactionsByCast200Response{}
	this.Messages = messages
	this.NextPageToken = nextPageToken
	return &this
}

// NewListReactionsByCast200ResponseWithDefaults instantiates a new ListReactionsByCast200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListReactionsByCast200ResponseWithDefaults() *ListReactionsByCast200Response {
	this := ListReactionsByCast200Response{}
	return &this
}

// GetMessages returns the Messages field value
func (o *ListReactionsByCast200Response) GetMessages() []Reaction {
	if o == nil {
		var ret []Reaction
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *ListReactionsByCast200Response) GetMessagesOk() ([]Reaction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *ListReactionsByCast200Response) SetMessages(v []Reaction) {
	o.Messages = v
}

// GetNextPageToken returns the NextPageToken field value
func (o *ListReactionsByCast200Response) GetNextPageToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NextPageToken
}

// GetNextPageTokenOk returns a tuple with the NextPageToken field value
// and a boolean to check if the value has been set.
func (o *ListReactionsByCast200Response) GetNextPageTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextPageToken, true
}

// SetNextPageToken sets field value
func (o *ListReactionsByCast200Response) SetNextPageToken(v string) {
	o.NextPageToken = v
}

func (o ListReactionsByCast200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListReactionsByCast200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["messages"] = o.Messages
	toSerialize["nextPageToken"] = o.NextPageToken
	return toSerialize, nil
}

func (o *ListReactionsByCast200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"messages",
		"nextPageToken",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListReactionsByCast200Response := _ListReactionsByCast200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListReactionsByCast200Response)

	if err != nil {
		return err
	}

	*o = ListReactionsByCast200Response(varListReactionsByCast200Response)

	return err
}

type NullableListReactionsByCast200Response struct {
	value *ListReactionsByCast200Response
	isSet bool
}

func (v NullableListReactionsByCast200Response) Get() *ListReactionsByCast200Response {
	return v.value
}

func (v *NullableListReactionsByCast200Response) Set(val *ListReactionsByCast200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListReactionsByCast200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListReactionsByCast200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListReactionsByCast200Response(val *ListReactionsByCast200Response) *NullableListReactionsByCast200Response {
	return &NullableListReactionsByCast200Response{value: val, isSet: true}
}

func (v NullableListReactionsByCast200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListReactionsByCast200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


