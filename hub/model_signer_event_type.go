/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SignerEventType the model 'SignerEventType'
type SignerEventType string

// List of SignerEventType
const (
	SIGNEREVENTTYPE_ADD SignerEventType = "SIGNER_EVENT_TYPE_ADD"
	SIGNEREVENTTYPE_REMOVE SignerEventType = "SIGNER_EVENT_TYPE_REMOVE"
	SIGNEREVENTTYPE_ADMIN_RESET SignerEventType = "SIGNER_EVENT_TYPE_ADMIN_RESET"
)

// All allowed values of SignerEventType enum
var AllowedSignerEventTypeEnumValues = []SignerEventType{
	"SIGNER_EVENT_TYPE_ADD",
	"SIGNER_EVENT_TYPE_REMOVE",
	"SIGNER_EVENT_TYPE_ADMIN_RESET",
}

func (v *SignerEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SignerEventType(value)
	for _, existing := range AllowedSignerEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SignerEventType", value)
}

// NewSignerEventTypeFromValue returns a pointer to a valid SignerEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSignerEventTypeFromValue(v string) (*SignerEventType, error) {
	ev := SignerEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SignerEventType: valid values are %v", v, AllowedSignerEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SignerEventType) IsValid() bool {
	for _, existing := range AllowedSignerEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SignerEventType value
func (v SignerEventType) Ptr() *SignerEventType {
	return &v
}

type NullableSignerEventType struct {
	value *SignerEventType
	isSet bool
}

func (v NullableSignerEventType) Get() *SignerEventType {
	return v.value
}

func (v *NullableSignerEventType) Set(val *SignerEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableSignerEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableSignerEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignerEventType(val *SignerEventType) *NullableSignerEventType {
	return &NullableSignerEventType{value: val, isSet: true}
}

func (v NullableSignerEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignerEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

