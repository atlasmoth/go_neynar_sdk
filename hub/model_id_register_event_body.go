/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IdRegisterEventBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdRegisterEventBody{}

// IdRegisterEventBody struct for IdRegisterEventBody
type IdRegisterEventBody struct {
	To *string `json:"to,omitempty" validate:"regexp=^0x[a-fA-F0-9]*$"`
	EventType *IdRegisterEventType `json:"eventType,omitempty"`
	From *string `json:"from,omitempty" validate:"regexp=^0x[a-fA-F0-9]*$|^$"`
	RecoveryAddress *string `json:"recoveryAddress,omitempty" validate:"regexp=^0x[a-fA-F0-9]*$"`
}

// NewIdRegisterEventBody instantiates a new IdRegisterEventBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdRegisterEventBody() *IdRegisterEventBody {
	this := IdRegisterEventBody{}
	var eventType IdRegisterEventType = IDREGISTEREVENTTYPE_REGISTER
	this.EventType = &eventType
	return &this
}

// NewIdRegisterEventBodyWithDefaults instantiates a new IdRegisterEventBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdRegisterEventBodyWithDefaults() *IdRegisterEventBody {
	this := IdRegisterEventBody{}
	var eventType IdRegisterEventType = IDREGISTEREVENTTYPE_REGISTER
	this.EventType = &eventType
	return &this
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *IdRegisterEventBody) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdRegisterEventBody) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *IdRegisterEventBody) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *IdRegisterEventBody) SetTo(v string) {
	o.To = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *IdRegisterEventBody) GetEventType() IdRegisterEventType {
	if o == nil || IsNil(o.EventType) {
		var ret IdRegisterEventType
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdRegisterEventBody) GetEventTypeOk() (*IdRegisterEventType, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *IdRegisterEventBody) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given IdRegisterEventType and assigns it to the EventType field.
func (o *IdRegisterEventBody) SetEventType(v IdRegisterEventType) {
	o.EventType = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *IdRegisterEventBody) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdRegisterEventBody) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *IdRegisterEventBody) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *IdRegisterEventBody) SetFrom(v string) {
	o.From = &v
}

// GetRecoveryAddress returns the RecoveryAddress field value if set, zero value otherwise.
func (o *IdRegisterEventBody) GetRecoveryAddress() string {
	if o == nil || IsNil(o.RecoveryAddress) {
		var ret string
		return ret
	}
	return *o.RecoveryAddress
}

// GetRecoveryAddressOk returns a tuple with the RecoveryAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdRegisterEventBody) GetRecoveryAddressOk() (*string, bool) {
	if o == nil || IsNil(o.RecoveryAddress) {
		return nil, false
	}
	return o.RecoveryAddress, true
}

// HasRecoveryAddress returns a boolean if a field has been set.
func (o *IdRegisterEventBody) HasRecoveryAddress() bool {
	if o != nil && !IsNil(o.RecoveryAddress) {
		return true
	}

	return false
}

// SetRecoveryAddress gets a reference to the given string and assigns it to the RecoveryAddress field.
func (o *IdRegisterEventBody) SetRecoveryAddress(v string) {
	o.RecoveryAddress = &v
}

func (o IdRegisterEventBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdRegisterEventBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.RecoveryAddress) {
		toSerialize["recoveryAddress"] = o.RecoveryAddress
	}
	return toSerialize, nil
}

type NullableIdRegisterEventBody struct {
	value *IdRegisterEventBody
	isSet bool
}

func (v NullableIdRegisterEventBody) Get() *IdRegisterEventBody {
	return v.value
}

func (v *NullableIdRegisterEventBody) Set(val *IdRegisterEventBody) {
	v.value = val
	v.isSet = true
}

func (v NullableIdRegisterEventBody) IsSet() bool {
	return v.isSet
}

func (v *NullableIdRegisterEventBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdRegisterEventBody(val *IdRegisterEventBody) *NullableIdRegisterEventBody {
	return &NullableIdRegisterEventBody{value: val, isSet: true}
}

func (v NullableIdRegisterEventBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdRegisterEventBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


