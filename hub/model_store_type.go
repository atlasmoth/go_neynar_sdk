/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StoreType the model 'StoreType'
type StoreType string

// List of StoreType
const (
	STORETYPE_CASTS StoreType = "STORE_TYPE_CASTS"
	STORETYPE_LINKS StoreType = "STORE_TYPE_LINKS"
	STORETYPE_REACTIONS StoreType = "STORE_TYPE_REACTIONS"
	STORETYPE_USER_DATA StoreType = "STORE_TYPE_USER_DATA"
	STORETYPE_VERIFICATIONS StoreType = "STORE_TYPE_VERIFICATIONS"
	STORETYPE_USERNAME_PROOFS StoreType = "STORE_TYPE_USERNAME_PROOFS"
)

// All allowed values of StoreType enum
var AllowedStoreTypeEnumValues = []StoreType{
	"STORE_TYPE_CASTS",
	"STORE_TYPE_LINKS",
	"STORE_TYPE_REACTIONS",
	"STORE_TYPE_USER_DATA",
	"STORE_TYPE_VERIFICATIONS",
	"STORE_TYPE_USERNAME_PROOFS",
}

func (v *StoreType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StoreType(value)
	for _, existing := range AllowedStoreTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StoreType", value)
}

// NewStoreTypeFromValue returns a pointer to a valid StoreType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStoreTypeFromValue(v string) (*StoreType, error) {
	ev := StoreType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StoreType: valid values are %v", v, AllowedStoreTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StoreType) IsValid() bool {
	for _, existing := range AllowedStoreTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StoreType value
func (v StoreType) Ptr() *StoreType {
	return &v
}

type NullableStoreType struct {
	value *StoreType
	isSet bool
}

func (v NullableStoreType) Get() *StoreType {
	return v.value
}

func (v *NullableStoreType) Set(val *StoreType) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreType) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreType(val *StoreType) *NullableStoreType {
	return &NullableStoreType{value: val, isSet: true}
}

func (v NullableStoreType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

