/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponse{}

// ErrorResponse struct for ErrorResponse
type ErrorResponse struct {
	ErrCode string `json:"errCode"`
	Presentable bool `json:"presentable"`
	Name string `json:"name"`
	Code int32 `json:"code"`
	Details string `json:"details"`
	Metadata ErrorResponseMetadata `json:"metadata"`
}

type _ErrorResponse ErrorResponse

// NewErrorResponse instantiates a new ErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponse(errCode string, presentable bool, name string, code int32, details string, metadata ErrorResponseMetadata) *ErrorResponse {
	this := ErrorResponse{}
	this.ErrCode = errCode
	this.Presentable = presentable
	this.Name = name
	this.Code = code
	this.Details = details
	this.Metadata = metadata
	return &this
}

// NewErrorResponseWithDefaults instantiates a new ErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseWithDefaults() *ErrorResponse {
	this := ErrorResponse{}
	return &this
}

// GetErrCode returns the ErrCode field value
func (o *ErrorResponse) GetErrCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrCode
}

// GetErrCodeOk returns a tuple with the ErrCode field value
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetErrCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrCode, true
}

// SetErrCode sets field value
func (o *ErrorResponse) SetErrCode(v string) {
	o.ErrCode = v
}

// GetPresentable returns the Presentable field value
func (o *ErrorResponse) GetPresentable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Presentable
}

// GetPresentableOk returns a tuple with the Presentable field value
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetPresentableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Presentable, true
}

// SetPresentable sets field value
func (o *ErrorResponse) SetPresentable(v bool) {
	o.Presentable = v
}

// GetName returns the Name field value
func (o *ErrorResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ErrorResponse) SetName(v string) {
	o.Name = v
}

// GetCode returns the Code field value
func (o *ErrorResponse) GetCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ErrorResponse) SetCode(v int32) {
	o.Code = v
}

// GetDetails returns the Details field value
func (o *ErrorResponse) GetDetails() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetDetailsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Details, true
}

// SetDetails sets field value
func (o *ErrorResponse) SetDetails(v string) {
	o.Details = v
}

// GetMetadata returns the Metadata field value
func (o *ErrorResponse) GetMetadata() ErrorResponseMetadata {
	if o == nil {
		var ret ErrorResponseMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetMetadataOk() (*ErrorResponseMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ErrorResponse) SetMetadata(v ErrorResponseMetadata) {
	o.Metadata = v
}

func (o ErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["errCode"] = o.ErrCode
	toSerialize["presentable"] = o.Presentable
	toSerialize["name"] = o.Name
	toSerialize["code"] = o.Code
	toSerialize["details"] = o.Details
	toSerialize["metadata"] = o.Metadata
	return toSerialize, nil
}

func (o *ErrorResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"errCode",
		"presentable",
		"name",
		"code",
		"details",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorResponse := _ErrorResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varErrorResponse)

	if err != nil {
		return err
	}

	*o = ErrorResponse(varErrorResponse)

	return err
}

type NullableErrorResponse struct {
	value *ErrorResponse
	isSet bool
}

func (v NullableErrorResponse) Get() *ErrorResponse {
	return v.value
}

func (v *NullableErrorResponse) Set(val *ErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponse(val *ErrorResponse) *NullableErrorResponse {
	return &NullableErrorResponse{value: val, isSet: true}
}

func (v NullableErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


