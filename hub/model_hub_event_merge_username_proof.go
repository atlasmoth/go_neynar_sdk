/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HubEventMergeUsernameProof type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HubEventMergeUsernameProof{}

// HubEventMergeUsernameProof struct for HubEventMergeUsernameProof
type HubEventMergeUsernameProof struct {
	Type *string `json:"type,omitempty"`
	Id *int32 `json:"id,omitempty"`
	MergeUsernameProofBody *MergeUserNameProofBody `json:"mergeUsernameProofBody,omitempty"`
}

// NewHubEventMergeUsernameProof instantiates a new HubEventMergeUsernameProof object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHubEventMergeUsernameProof() *HubEventMergeUsernameProof {
	this := HubEventMergeUsernameProof{}
	return &this
}

// NewHubEventMergeUsernameProofWithDefaults instantiates a new HubEventMergeUsernameProof object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHubEventMergeUsernameProofWithDefaults() *HubEventMergeUsernameProof {
	this := HubEventMergeUsernameProof{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HubEventMergeUsernameProof) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubEventMergeUsernameProof) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HubEventMergeUsernameProof) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HubEventMergeUsernameProof) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HubEventMergeUsernameProof) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubEventMergeUsernameProof) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HubEventMergeUsernameProof) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *HubEventMergeUsernameProof) SetId(v int32) {
	o.Id = &v
}

// GetMergeUsernameProofBody returns the MergeUsernameProofBody field value if set, zero value otherwise.
func (o *HubEventMergeUsernameProof) GetMergeUsernameProofBody() MergeUserNameProofBody {
	if o == nil || IsNil(o.MergeUsernameProofBody) {
		var ret MergeUserNameProofBody
		return ret
	}
	return *o.MergeUsernameProofBody
}

// GetMergeUsernameProofBodyOk returns a tuple with the MergeUsernameProofBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubEventMergeUsernameProof) GetMergeUsernameProofBodyOk() (*MergeUserNameProofBody, bool) {
	if o == nil || IsNil(o.MergeUsernameProofBody) {
		return nil, false
	}
	return o.MergeUsernameProofBody, true
}

// HasMergeUsernameProofBody returns a boolean if a field has been set.
func (o *HubEventMergeUsernameProof) HasMergeUsernameProofBody() bool {
	if o != nil && !IsNil(o.MergeUsernameProofBody) {
		return true
	}

	return false
}

// SetMergeUsernameProofBody gets a reference to the given MergeUserNameProofBody and assigns it to the MergeUsernameProofBody field.
func (o *HubEventMergeUsernameProof) SetMergeUsernameProofBody(v MergeUserNameProofBody) {
	o.MergeUsernameProofBody = &v
}

func (o HubEventMergeUsernameProof) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HubEventMergeUsernameProof) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MergeUsernameProofBody) {
		toSerialize["mergeUsernameProofBody"] = o.MergeUsernameProofBody
	}
	return toSerialize, nil
}

type NullableHubEventMergeUsernameProof struct {
	value *HubEventMergeUsernameProof
	isSet bool
}

func (v NullableHubEventMergeUsernameProof) Get() *HubEventMergeUsernameProof {
	return v.value
}

func (v *NullableHubEventMergeUsernameProof) Set(val *HubEventMergeUsernameProof) {
	v.value = val
	v.isSet = true
}

func (v NullableHubEventMergeUsernameProof) IsSet() bool {
	return v.isSet
}

func (v *NullableHubEventMergeUsernameProof) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHubEventMergeUsernameProof(val *HubEventMergeUsernameProof) *NullableHubEventMergeUsernameProof {
	return &NullableHubEventMergeUsernameProof{value: val, isSet: true}
}

func (v NullableHubEventMergeUsernameProof) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHubEventMergeUsernameProof) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


