/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// HashScheme Type of hashing scheme used to produce a digest of MessageData. - HASH_SCHEME_BLAKE3: Default scheme for hashing MessageData 
type HashScheme string

// List of HashScheme
const (
	HASHSCHEME_HASH_SCHEME_BLAKE3 HashScheme = "HASH_SCHEME_BLAKE3"
)

// All allowed values of HashScheme enum
var AllowedHashSchemeEnumValues = []HashScheme{
	"HASH_SCHEME_BLAKE3",
}

func (v *HashScheme) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HashScheme(value)
	for _, existing := range AllowedHashSchemeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HashScheme", value)
}

// NewHashSchemeFromValue returns a pointer to a valid HashScheme
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHashSchemeFromValue(v string) (*HashScheme, error) {
	ev := HashScheme(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HashScheme: valid values are %v", v, AllowedHashSchemeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HashScheme) IsValid() bool {
	for _, existing := range AllowedHashSchemeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HashScheme value
func (v HashScheme) Ptr() *HashScheme {
	return &v
}

type NullableHashScheme struct {
	value *HashScheme
	isSet bool
}

func (v NullableHashScheme) Get() *HashScheme {
	return v.value
}

func (v *NullableHashScheme) Set(val *HashScheme) {
	v.value = val
	v.isSet = true
}

func (v NullableHashScheme) IsSet() bool {
	return v.isSet
}

func (v *NullableHashScheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHashScheme(val *HashScheme) *NullableHashScheme {
	return &NullableHashScheme{value: val, isSet: true}
}

func (v NullableHashScheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHashScheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

