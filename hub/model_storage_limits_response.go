/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StorageLimitsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageLimitsResponse{}

// StorageLimitsResponse struct for StorageLimitsResponse
type StorageLimitsResponse struct {
	Limits []StorageLimit `json:"limits,omitempty"`
}

// NewStorageLimitsResponse instantiates a new StorageLimitsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageLimitsResponse() *StorageLimitsResponse {
	this := StorageLimitsResponse{}
	return &this
}

// NewStorageLimitsResponseWithDefaults instantiates a new StorageLimitsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageLimitsResponseWithDefaults() *StorageLimitsResponse {
	this := StorageLimitsResponse{}
	return &this
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *StorageLimitsResponse) GetLimits() []StorageLimit {
	if o == nil || IsNil(o.Limits) {
		var ret []StorageLimit
		return ret
	}
	return o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageLimitsResponse) GetLimitsOk() ([]StorageLimit, bool) {
	if o == nil || IsNil(o.Limits) {
		return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *StorageLimitsResponse) HasLimits() bool {
	if o != nil && !IsNil(o.Limits) {
		return true
	}

	return false
}

// SetLimits gets a reference to the given []StorageLimit and assigns it to the Limits field.
func (o *StorageLimitsResponse) SetLimits(v []StorageLimit) {
	o.Limits = v
}

func (o StorageLimitsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageLimitsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limits) {
		toSerialize["limits"] = o.Limits
	}
	return toSerialize, nil
}

type NullableStorageLimitsResponse struct {
	value *StorageLimitsResponse
	isSet bool
}

func (v NullableStorageLimitsResponse) Get() *StorageLimitsResponse {
	return v.value
}

func (v *NullableStorageLimitsResponse) Set(val *StorageLimitsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageLimitsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageLimitsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageLimitsResponse(val *StorageLimitsResponse) *NullableStorageLimitsResponse {
	return &NullableStorageLimitsResponse{value: val, isSet: true}
}

func (v NullableStorageLimitsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageLimitsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


