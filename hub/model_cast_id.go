/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CastId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CastId{}

// CastId Identifier used to look up a Cast
type CastId struct {
	Fid *int32 `json:"fid,omitempty"`
	Hash *string `json:"hash,omitempty" validate:"regexp=^0x[0-9a-fA-F]{40}$"`
}

// NewCastId instantiates a new CastId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCastId() *CastId {
	this := CastId{}
	return &this
}

// NewCastIdWithDefaults instantiates a new CastId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCastIdWithDefaults() *CastId {
	this := CastId{}
	return &this
}

// GetFid returns the Fid field value if set, zero value otherwise.
func (o *CastId) GetFid() int32 {
	if o == nil || IsNil(o.Fid) {
		var ret int32
		return ret
	}
	return *o.Fid
}

// GetFidOk returns a tuple with the Fid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CastId) GetFidOk() (*int32, bool) {
	if o == nil || IsNil(o.Fid) {
		return nil, false
	}
	return o.Fid, true
}

// HasFid returns a boolean if a field has been set.
func (o *CastId) HasFid() bool {
	if o != nil && !IsNil(o.Fid) {
		return true
	}

	return false
}

// SetFid gets a reference to the given int32 and assigns it to the Fid field.
func (o *CastId) SetFid(v int32) {
	o.Fid = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *CastId) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CastId) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *CastId) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *CastId) SetHash(v string) {
	o.Hash = &v
}

func (o CastId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CastId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fid) {
		toSerialize["fid"] = o.Fid
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	return toSerialize, nil
}

type NullableCastId struct {
	value *CastId
	isSet bool
}

func (v NullableCastId) Get() *CastId {
	return v.value
}

func (v *NullableCastId) Set(val *CastId) {
	v.value = val
	v.isSet = true
}

func (v NullableCastId) IsSet() bool {
	return v.isSet
}

func (v *NullableCastId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastId(val *CastId) *NullableCastId {
	return &NullableCastId{value: val, isSet: true}
}

func (v NullableCastId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


