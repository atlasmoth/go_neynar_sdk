/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the UserDataBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDataBody{}

// UserDataBody Adds metadata about a user
type UserDataBody struct {
	Type UserDataType `json:"type"`
	Value string `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _UserDataBody UserDataBody

// NewUserDataBody instantiates a new UserDataBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDataBody(type_ UserDataType, value string) *UserDataBody {
	this := UserDataBody{}
	this.Type = type_
	this.Value = value
	return &this
}

// NewUserDataBodyWithDefaults instantiates a new UserDataBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDataBodyWithDefaults() *UserDataBody {
	this := UserDataBody{}
	var type_ UserDataType = USERDATATYPE_PFP
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *UserDataBody) GetType() UserDataType {
	if o == nil {
		var ret UserDataType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UserDataBody) GetTypeOk() (*UserDataType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UserDataBody) SetType(v UserDataType) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *UserDataBody) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *UserDataBody) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *UserDataBody) SetValue(v string) {
	o.Value = v
}

func (o UserDataBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDataBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserDataBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserDataBody := _UserDataBody{}

	err = json.Unmarshal(data, &varUserDataBody)

	if err != nil {
		return err
	}

	*o = UserDataBody(varUserDataBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserDataBody struct {
	value *UserDataBody
	isSet bool
}

func (v NullableUserDataBody) Get() *UserDataBody {
	return v.value
}

func (v *NullableUserDataBody) Set(val *UserDataBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDataBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDataBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDataBody(val *UserDataBody) *NullableUserDataBody {
	return &NullableUserDataBody{value: val, isSet: true}
}

func (v NullableUserDataBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDataBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


