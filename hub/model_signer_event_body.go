/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SignerEventBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignerEventBody{}

// SignerEventBody struct for SignerEventBody
type SignerEventBody struct {
	Key *string `json:"key,omitempty" validate:"regexp=^0x[a-fA-F0-9]{64}$"`
	KeyType *int64 `json:"keyType,omitempty"`
	EventType *SignerEventType `json:"eventType,omitempty"`
	Metadata *string `json:"metadata,omitempty" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
	MetadataType *int64 `json:"metadataType,omitempty"`
}

// NewSignerEventBody instantiates a new SignerEventBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignerEventBody() *SignerEventBody {
	this := SignerEventBody{}
	var eventType SignerEventType = SIGNEREVENTTYPE_ADD
	this.EventType = &eventType
	return &this
}

// NewSignerEventBodyWithDefaults instantiates a new SignerEventBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignerEventBodyWithDefaults() *SignerEventBody {
	this := SignerEventBody{}
	var eventType SignerEventType = SIGNEREVENTTYPE_ADD
	this.EventType = &eventType
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SignerEventBody) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignerEventBody) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SignerEventBody) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SignerEventBody) SetKey(v string) {
	o.Key = &v
}

// GetKeyType returns the KeyType field value if set, zero value otherwise.
func (o *SignerEventBody) GetKeyType() int64 {
	if o == nil || IsNil(o.KeyType) {
		var ret int64
		return ret
	}
	return *o.KeyType
}

// GetKeyTypeOk returns a tuple with the KeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignerEventBody) GetKeyTypeOk() (*int64, bool) {
	if o == nil || IsNil(o.KeyType) {
		return nil, false
	}
	return o.KeyType, true
}

// HasKeyType returns a boolean if a field has been set.
func (o *SignerEventBody) HasKeyType() bool {
	if o != nil && !IsNil(o.KeyType) {
		return true
	}

	return false
}

// SetKeyType gets a reference to the given int64 and assigns it to the KeyType field.
func (o *SignerEventBody) SetKeyType(v int64) {
	o.KeyType = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *SignerEventBody) GetEventType() SignerEventType {
	if o == nil || IsNil(o.EventType) {
		var ret SignerEventType
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignerEventBody) GetEventTypeOk() (*SignerEventType, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *SignerEventBody) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given SignerEventType and assigns it to the EventType field.
func (o *SignerEventBody) SetEventType(v SignerEventType) {
	o.EventType = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SignerEventBody) GetMetadata() string {
	if o == nil || IsNil(o.Metadata) {
		var ret string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignerEventBody) GetMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SignerEventBody) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given string and assigns it to the Metadata field.
func (o *SignerEventBody) SetMetadata(v string) {
	o.Metadata = &v
}

// GetMetadataType returns the MetadataType field value if set, zero value otherwise.
func (o *SignerEventBody) GetMetadataType() int64 {
	if o == nil || IsNil(o.MetadataType) {
		var ret int64
		return ret
	}
	return *o.MetadataType
}

// GetMetadataTypeOk returns a tuple with the MetadataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignerEventBody) GetMetadataTypeOk() (*int64, bool) {
	if o == nil || IsNil(o.MetadataType) {
		return nil, false
	}
	return o.MetadataType, true
}

// HasMetadataType returns a boolean if a field has been set.
func (o *SignerEventBody) HasMetadataType() bool {
	if o != nil && !IsNil(o.MetadataType) {
		return true
	}

	return false
}

// SetMetadataType gets a reference to the given int64 and assigns it to the MetadataType field.
func (o *SignerEventBody) SetMetadataType(v int64) {
	o.MetadataType = &v
}

func (o SignerEventBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignerEventBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.KeyType) {
		toSerialize["keyType"] = o.KeyType
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.MetadataType) {
		toSerialize["metadataType"] = o.MetadataType
	}
	return toSerialize, nil
}

type NullableSignerEventBody struct {
	value *SignerEventBody
	isSet bool
}

func (v NullableSignerEventBody) Get() *SignerEventBody {
	return v.value
}

func (v *NullableSignerEventBody) Set(val *SignerEventBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSignerEventBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSignerEventBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignerEventBody(val *SignerEventBody) *NullableSignerEventBody {
	return &NullableSignerEventBody{value: val, isSet: true}
}

func (v NullableSignerEventBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignerEventBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


