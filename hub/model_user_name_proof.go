/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserNameProof type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserNameProof{}

// UserNameProof struct for UserNameProof
type UserNameProof struct {
	Timestamp *int32 `json:"timestamp,omitempty"`
	Name *string `json:"name,omitempty"`
	Owner *string `json:"owner,omitempty" validate:"regexp=^0x[0-9a-fA-F]{40}$"`
	Signature *string `json:"signature,omitempty" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
	Fid *int32 `json:"fid,omitempty"`
	Type *UserNameType `json:"type,omitempty"`
}

// NewUserNameProof instantiates a new UserNameProof object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserNameProof() *UserNameProof {
	this := UserNameProof{}
	var type_ UserNameType = USERNAMETYPE_FNAME
	this.Type = &type_
	return &this
}

// NewUserNameProofWithDefaults instantiates a new UserNameProof object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserNameProofWithDefaults() *UserNameProof {
	this := UserNameProof{}
	var type_ UserNameType = USERNAMETYPE_FNAME
	this.Type = &type_
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *UserNameProof) GetTimestamp() int32 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNameProof) GetTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *UserNameProof) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int32 and assigns it to the Timestamp field.
func (o *UserNameProof) SetTimestamp(v int32) {
	o.Timestamp = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserNameProof) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNameProof) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserNameProof) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserNameProof) SetName(v string) {
	o.Name = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *UserNameProof) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNameProof) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *UserNameProof) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *UserNameProof) SetOwner(v string) {
	o.Owner = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *UserNameProof) GetSignature() string {
	if o == nil || IsNil(o.Signature) {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNameProof) GetSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *UserNameProof) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *UserNameProof) SetSignature(v string) {
	o.Signature = &v
}

// GetFid returns the Fid field value if set, zero value otherwise.
func (o *UserNameProof) GetFid() int32 {
	if o == nil || IsNil(o.Fid) {
		var ret int32
		return ret
	}
	return *o.Fid
}

// GetFidOk returns a tuple with the Fid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNameProof) GetFidOk() (*int32, bool) {
	if o == nil || IsNil(o.Fid) {
		return nil, false
	}
	return o.Fid, true
}

// HasFid returns a boolean if a field has been set.
func (o *UserNameProof) HasFid() bool {
	if o != nil && !IsNil(o.Fid) {
		return true
	}

	return false
}

// SetFid gets a reference to the given int32 and assigns it to the Fid field.
func (o *UserNameProof) SetFid(v int32) {
	o.Fid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserNameProof) GetType() UserNameType {
	if o == nil || IsNil(o.Type) {
		var ret UserNameType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNameProof) GetTypeOk() (*UserNameType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserNameProof) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given UserNameType and assigns it to the Type field.
func (o *UserNameProof) SetType(v UserNameType) {
	o.Type = &v
}

func (o UserNameProof) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserNameProof) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	if !IsNil(o.Fid) {
		toSerialize["fid"] = o.Fid
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableUserNameProof struct {
	value *UserNameProof
	isSet bool
}

func (v NullableUserNameProof) Get() *UserNameProof {
	return v.value
}

func (v *NullableUserNameProof) Set(val *UserNameProof) {
	v.value = val
	v.isSet = true
}

func (v NullableUserNameProof) IsSet() bool {
	return v.isSet
}

func (v *NullableUserNameProof) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserNameProof(val *UserNameProof) *NullableUserNameProof {
	return &NullableUserNameProof{value: val, isSet: true}
}

func (v NullableUserNameProof) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserNameProof) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


