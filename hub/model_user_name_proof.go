/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the UserNameProof type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserNameProof{}

// UserNameProof struct for UserNameProof
type UserNameProof struct {
	Timestamp int32 `json:"timestamp"`
	Name string `json:"name"`
	Owner string `json:"owner" validate:"regexp=^0x[0-9a-fA-F]{40}$"`
	Signature string `json:"signature" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
	Fid int32 `json:"fid"`
	Type UserNameType `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _UserNameProof UserNameProof

// NewUserNameProof instantiates a new UserNameProof object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserNameProof(timestamp int32, name string, owner string, signature string, fid int32, type_ UserNameType) *UserNameProof {
	this := UserNameProof{}
	this.Timestamp = timestamp
	this.Name = name
	this.Owner = owner
	this.Signature = signature
	this.Fid = fid
	this.Type = type_
	return &this
}

// NewUserNameProofWithDefaults instantiates a new UserNameProof object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserNameProofWithDefaults() *UserNameProof {
	this := UserNameProof{}
	var type_ UserNameType = USERNAMETYPE_FNAME
	this.Type = type_
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *UserNameProof) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *UserNameProof) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *UserNameProof) SetTimestamp(v int32) {
	o.Timestamp = v
}

// GetName returns the Name field value
func (o *UserNameProof) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserNameProof) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserNameProof) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value
func (o *UserNameProof) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *UserNameProof) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *UserNameProof) SetOwner(v string) {
	o.Owner = v
}

// GetSignature returns the Signature field value
func (o *UserNameProof) GetSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *UserNameProof) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signature, true
}

// SetSignature sets field value
func (o *UserNameProof) SetSignature(v string) {
	o.Signature = v
}

// GetFid returns the Fid field value
func (o *UserNameProof) GetFid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Fid
}

// GetFidOk returns a tuple with the Fid field value
// and a boolean to check if the value has been set.
func (o *UserNameProof) GetFidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fid, true
}

// SetFid sets field value
func (o *UserNameProof) SetFid(v int32) {
	o.Fid = v
}

// GetType returns the Type field value
func (o *UserNameProof) GetType() UserNameType {
	if o == nil {
		var ret UserNameType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UserNameProof) GetTypeOk() (*UserNameType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UserNameProof) SetType(v UserNameType) {
	o.Type = v
}

func (o UserNameProof) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserNameProof) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["name"] = o.Name
	toSerialize["owner"] = o.Owner
	toSerialize["signature"] = o.Signature
	toSerialize["fid"] = o.Fid
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserNameProof) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
		"name",
		"owner",
		"signature",
		"fid",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserNameProof := _UserNameProof{}

	err = json.Unmarshal(data, &varUserNameProof)

	if err != nil {
		return err
	}

	*o = UserNameProof(varUserNameProof)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "name")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "signature")
		delete(additionalProperties, "fid")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserNameProof struct {
	value *UserNameProof
	isSet bool
}

func (v NullableUserNameProof) Get() *UserNameProof {
	return v.value
}

func (v *NullableUserNameProof) Set(val *UserNameProof) {
	v.value = val
	v.isSet = true
}

func (v NullableUserNameProof) IsSet() bool {
	return v.isSet
}

func (v *NullableUserNameProof) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserNameProof(val *UserNameProof) *NullableUserNameProof {
	return &NullableUserNameProof{value: val, isSet: true}
}

func (v NullableUserNameProof) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserNameProof) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


