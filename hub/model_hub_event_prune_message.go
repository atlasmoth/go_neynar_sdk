/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HubEventPruneMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HubEventPruneMessage{}

// HubEventPruneMessage struct for HubEventPruneMessage
type HubEventPruneMessage struct {
	Type *string `json:"type,omitempty"`
	Id *int32 `json:"id,omitempty"`
	PruneMessageBody *PruneMessageBody `json:"pruneMessageBody,omitempty"`
}

// NewHubEventPruneMessage instantiates a new HubEventPruneMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHubEventPruneMessage() *HubEventPruneMessage {
	this := HubEventPruneMessage{}
	return &this
}

// NewHubEventPruneMessageWithDefaults instantiates a new HubEventPruneMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHubEventPruneMessageWithDefaults() *HubEventPruneMessage {
	this := HubEventPruneMessage{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HubEventPruneMessage) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubEventPruneMessage) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HubEventPruneMessage) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HubEventPruneMessage) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HubEventPruneMessage) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubEventPruneMessage) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HubEventPruneMessage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *HubEventPruneMessage) SetId(v int32) {
	o.Id = &v
}

// GetPruneMessageBody returns the PruneMessageBody field value if set, zero value otherwise.
func (o *HubEventPruneMessage) GetPruneMessageBody() PruneMessageBody {
	if o == nil || IsNil(o.PruneMessageBody) {
		var ret PruneMessageBody
		return ret
	}
	return *o.PruneMessageBody
}

// GetPruneMessageBodyOk returns a tuple with the PruneMessageBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HubEventPruneMessage) GetPruneMessageBodyOk() (*PruneMessageBody, bool) {
	if o == nil || IsNil(o.PruneMessageBody) {
		return nil, false
	}
	return o.PruneMessageBody, true
}

// HasPruneMessageBody returns a boolean if a field has been set.
func (o *HubEventPruneMessage) HasPruneMessageBody() bool {
	if o != nil && !IsNil(o.PruneMessageBody) {
		return true
	}

	return false
}

// SetPruneMessageBody gets a reference to the given PruneMessageBody and assigns it to the PruneMessageBody field.
func (o *HubEventPruneMessage) SetPruneMessageBody(v PruneMessageBody) {
	o.PruneMessageBody = &v
}

func (o HubEventPruneMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HubEventPruneMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PruneMessageBody) {
		toSerialize["pruneMessageBody"] = o.PruneMessageBody
	}
	return toSerialize, nil
}

type NullableHubEventPruneMessage struct {
	value *HubEventPruneMessage
	isSet bool
}

func (v NullableHubEventPruneMessage) Get() *HubEventPruneMessage {
	return v.value
}

func (v *NullableHubEventPruneMessage) Set(val *HubEventPruneMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableHubEventPruneMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableHubEventPruneMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHubEventPruneMessage(val *HubEventPruneMessage) *NullableHubEventPruneMessage {
	return &NullableHubEventPruneMessage{value: val, isSet: true}
}

func (v NullableHubEventPruneMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHubEventPruneMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


