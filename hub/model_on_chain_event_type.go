/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OnChainEventType the model 'OnChainEventType'
type OnChainEventType string

// List of OnChainEventType
const (
	ONCHAINEVENTTYPE_SIGNER OnChainEventType = "EVENT_TYPE_SIGNER"
	ONCHAINEVENTTYPE_SIGNER_MIGRATED OnChainEventType = "EVENT_TYPE_SIGNER_MIGRATED"
	ONCHAINEVENTTYPE_ID_REGISTER OnChainEventType = "EVENT_TYPE_ID_REGISTER"
	ONCHAINEVENTTYPE_STORAGE_RENT OnChainEventType = "EVENT_TYPE_STORAGE_RENT"
)

// All allowed values of OnChainEventType enum
var AllowedOnChainEventTypeEnumValues = []OnChainEventType{
	"EVENT_TYPE_SIGNER",
	"EVENT_TYPE_SIGNER_MIGRATED",
	"EVENT_TYPE_ID_REGISTER",
	"EVENT_TYPE_STORAGE_RENT",
}

func (v *OnChainEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OnChainEventType(value)
	for _, existing := range AllowedOnChainEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OnChainEventType", value)
}

// NewOnChainEventTypeFromValue returns a pointer to a valid OnChainEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOnChainEventTypeFromValue(v string) (*OnChainEventType, error) {
	ev := OnChainEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OnChainEventType: valid values are %v", v, AllowedOnChainEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OnChainEventType) IsValid() bool {
	for _, existing := range AllowedOnChainEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OnChainEventType value
func (v OnChainEventType) Ptr() *OnChainEventType {
	return &v
}

type NullableOnChainEventType struct {
	value *OnChainEventType
	isSet bool
}

func (v NullableOnChainEventType) Get() *OnChainEventType {
	return v.value
}

func (v *NullableOnChainEventType) Set(val *OnChainEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableOnChainEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableOnChainEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnChainEventType(val *OnChainEventType) *NullableOnChainEventType {
	return &NullableOnChainEventType{value: val, isSet: true}
}

func (v NullableOnChainEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnChainEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

