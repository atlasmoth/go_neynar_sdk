/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListOnChainSignersByFid200ResponseOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListOnChainSignersByFid200ResponseOneOf{}

// ListOnChainSignersByFid200ResponseOneOf struct for ListOnChainSignersByFid200ResponseOneOf
type ListOnChainSignersByFid200ResponseOneOf struct {
	Events []OnChainEventSigner `json:"events,omitempty"`
}

// NewListOnChainSignersByFid200ResponseOneOf instantiates a new ListOnChainSignersByFid200ResponseOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListOnChainSignersByFid200ResponseOneOf() *ListOnChainSignersByFid200ResponseOneOf {
	this := ListOnChainSignersByFid200ResponseOneOf{}
	return &this
}

// NewListOnChainSignersByFid200ResponseOneOfWithDefaults instantiates a new ListOnChainSignersByFid200ResponseOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListOnChainSignersByFid200ResponseOneOfWithDefaults() *ListOnChainSignersByFid200ResponseOneOf {
	this := ListOnChainSignersByFid200ResponseOneOf{}
	return &this
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *ListOnChainSignersByFid200ResponseOneOf) GetEvents() []OnChainEventSigner {
	if o == nil || IsNil(o.Events) {
		var ret []OnChainEventSigner
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListOnChainSignersByFid200ResponseOneOf) GetEventsOk() ([]OnChainEventSigner, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *ListOnChainSignersByFid200ResponseOneOf) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []OnChainEventSigner and assigns it to the Events field.
func (o *ListOnChainSignersByFid200ResponseOneOf) SetEvents(v []OnChainEventSigner) {
	o.Events = v
}

func (o ListOnChainSignersByFid200ResponseOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListOnChainSignersByFid200ResponseOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	return toSerialize, nil
}

type NullableListOnChainSignersByFid200ResponseOneOf struct {
	value *ListOnChainSignersByFid200ResponseOneOf
	isSet bool
}

func (v NullableListOnChainSignersByFid200ResponseOneOf) Get() *ListOnChainSignersByFid200ResponseOneOf {
	return v.value
}

func (v *NullableListOnChainSignersByFid200ResponseOneOf) Set(val *ListOnChainSignersByFid200ResponseOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableListOnChainSignersByFid200ResponseOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableListOnChainSignersByFid200ResponseOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListOnChainSignersByFid200ResponseOneOf(val *ListOnChainSignersByFid200ResponseOneOf) *NullableListOnChainSignersByFid200ResponseOneOf {
	return &NullableListOnChainSignersByFid200ResponseOneOf{value: val, isSet: true}
}

func (v NullableListOnChainSignersByFid200ResponseOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListOnChainSignersByFid200ResponseOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


