/*
Raw Farcaster Hub API

Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StorageRentEventBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageRentEventBody{}

// StorageRentEventBody struct for StorageRentEventBody
type StorageRentEventBody struct {
	Payer *string `json:"payer,omitempty" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
	Units *int64 `json:"units,omitempty"`
	Expiry *int64 `json:"expiry,omitempty"`
}

// NewStorageRentEventBody instantiates a new StorageRentEventBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageRentEventBody() *StorageRentEventBody {
	this := StorageRentEventBody{}
	return &this
}

// NewStorageRentEventBodyWithDefaults instantiates a new StorageRentEventBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageRentEventBodyWithDefaults() *StorageRentEventBody {
	this := StorageRentEventBody{}
	return &this
}

// GetPayer returns the Payer field value if set, zero value otherwise.
func (o *StorageRentEventBody) GetPayer() string {
	if o == nil || IsNil(o.Payer) {
		var ret string
		return ret
	}
	return *o.Payer
}

// GetPayerOk returns a tuple with the Payer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageRentEventBody) GetPayerOk() (*string, bool) {
	if o == nil || IsNil(o.Payer) {
		return nil, false
	}
	return o.Payer, true
}

// HasPayer returns a boolean if a field has been set.
func (o *StorageRentEventBody) HasPayer() bool {
	if o != nil && !IsNil(o.Payer) {
		return true
	}

	return false
}

// SetPayer gets a reference to the given string and assigns it to the Payer field.
func (o *StorageRentEventBody) SetPayer(v string) {
	o.Payer = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *StorageRentEventBody) GetUnits() int64 {
	if o == nil || IsNil(o.Units) {
		var ret int64
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageRentEventBody) GetUnitsOk() (*int64, bool) {
	if o == nil || IsNil(o.Units) {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *StorageRentEventBody) HasUnits() bool {
	if o != nil && !IsNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given int64 and assigns it to the Units field.
func (o *StorageRentEventBody) SetUnits(v int64) {
	o.Units = &v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *StorageRentEventBody) GetExpiry() int64 {
	if o == nil || IsNil(o.Expiry) {
		var ret int64
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageRentEventBody) GetExpiryOk() (*int64, bool) {
	if o == nil || IsNil(o.Expiry) {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *StorageRentEventBody) HasExpiry() bool {
	if o != nil && !IsNil(o.Expiry) {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given int64 and assigns it to the Expiry field.
func (o *StorageRentEventBody) SetExpiry(v int64) {
	o.Expiry = &v
}

func (o StorageRentEventBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageRentEventBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Payer) {
		toSerialize["payer"] = o.Payer
	}
	if !IsNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	if !IsNil(o.Expiry) {
		toSerialize["expiry"] = o.Expiry
	}
	return toSerialize, nil
}

type NullableStorageRentEventBody struct {
	value *StorageRentEventBody
	isSet bool
}

func (v NullableStorageRentEventBody) Get() *StorageRentEventBody {
	return v.value
}

func (v *NullableStorageRentEventBody) Set(val *StorageRentEventBody) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageRentEventBody) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageRentEventBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageRentEventBody(val *StorageRentEventBody) *NullableStorageRentEventBody {
	return &NullableStorageRentEventBody{value: val, isSet: true}
}

func (v NullableStorageRentEventBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageRentEventBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


