/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AuthorizationUrlResponseType the model 'AuthorizationUrlResponseType'
type AuthorizationUrlResponseType string

// List of AuthorizationUrlResponseType
const (
	AUTHORIZATIONURLRESPONSETYPE_CODE AuthorizationUrlResponseType = "code"
)

// All allowed values of AuthorizationUrlResponseType enum
var AllowedAuthorizationUrlResponseTypeEnumValues = []AuthorizationUrlResponseType{
	"code",
}

func (v *AuthorizationUrlResponseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthorizationUrlResponseType(value)
	for _, existing := range AllowedAuthorizationUrlResponseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthorizationUrlResponseType", value)
}

// NewAuthorizationUrlResponseTypeFromValue returns a pointer to a valid AuthorizationUrlResponseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthorizationUrlResponseTypeFromValue(v string) (*AuthorizationUrlResponseType, error) {
	ev := AuthorizationUrlResponseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthorizationUrlResponseType: valid values are %v", v, AllowedAuthorizationUrlResponseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthorizationUrlResponseType) IsValid() bool {
	for _, existing := range AllowedAuthorizationUrlResponseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthorizationUrlResponseType value
func (v AuthorizationUrlResponseType) Ptr() *AuthorizationUrlResponseType {
	return &v
}

type NullableAuthorizationUrlResponseType struct {
	value *AuthorizationUrlResponseType
	isSet bool
}

func (v NullableAuthorizationUrlResponseType) Get() *AuthorizationUrlResponseType {
	return v.value
}

func (v *NullableAuthorizationUrlResponseType) Set(val *AuthorizationUrlResponseType) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationUrlResponseType) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationUrlResponseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationUrlResponseType(val *AuthorizationUrlResponseType) *NullableAuthorizationUrlResponseType {
	return &NullableAuthorizationUrlResponseType{value: val, isSet: true}
}

func (v NullableAuthorizationUrlResponseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationUrlResponseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

