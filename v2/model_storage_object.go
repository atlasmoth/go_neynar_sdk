/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StorageObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageObject{}

// StorageObject struct for StorageObject
type StorageObject struct {
	Object *string `json:"object,omitempty"`
	Used *int32 `json:"used,omitempty"`
	Capacity *int32 `json:"capacity,omitempty"`
}

// NewStorageObject instantiates a new StorageObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageObject() *StorageObject {
	this := StorageObject{}
	return &this
}

// NewStorageObjectWithDefaults instantiates a new StorageObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageObjectWithDefaults() *StorageObject {
	this := StorageObject{}
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *StorageObject) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObject) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *StorageObject) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *StorageObject) SetObject(v string) {
	o.Object = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *StorageObject) GetUsed() int32 {
	if o == nil || IsNil(o.Used) {
		var ret int32
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObject) GetUsedOk() (*int32, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *StorageObject) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given int32 and assigns it to the Used field.
func (o *StorageObject) SetUsed(v int32) {
	o.Used = &v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *StorageObject) GetCapacity() int32 {
	if o == nil || IsNil(o.Capacity) {
		var ret int32
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObject) GetCapacityOk() (*int32, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *StorageObject) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given int32 and assigns it to the Capacity field.
func (o *StorageObject) SetCapacity(v int32) {
	o.Capacity = &v
}

func (o StorageObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	return toSerialize, nil
}

type NullableStorageObject struct {
	value *StorageObject
	isSet bool
}

func (v NullableStorageObject) Get() *StorageObject {
	return v.value
}

func (v *NullableStorageObject) Set(val *StorageObject) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageObject) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageObject(val *StorageObject) *NullableStorageObject {
	return &NullableStorageObject{value: val, isSet: true}
}

func (v NullableStorageObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


