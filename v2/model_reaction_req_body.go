/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReactionReqBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReactionReqBody{}

// ReactionReqBody struct for ReactionReqBody
type ReactionReqBody struct {
	// UUID of the signer
	SignerUuid *string `json:"signer_uuid,omitempty"`
	ReactionType *ReactionType `json:"reaction_type,omitempty"`
	Target *string `json:"target,omitempty"`
	// User identifier (unsigned integer)
	TargetAuthorFid *int32 `json:"target_author_fid,omitempty"`
	// An Idempotency key is a unique identifier for the request. **Note:**  1) This is used to prevent duplicate requests. Use the same idem key on retry attempts. 2) This should be a unique identifier for each request. 3) Recommended format is a 16-character string generated by the developer at the time of making this request. 
	Idem *string `json:"idem,omitempty"`
}

// NewReactionReqBody instantiates a new ReactionReqBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactionReqBody() *ReactionReqBody {
	this := ReactionReqBody{}
	return &this
}

// NewReactionReqBodyWithDefaults instantiates a new ReactionReqBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionReqBodyWithDefaults() *ReactionReqBody {
	this := ReactionReqBody{}
	return &this
}

// GetSignerUuid returns the SignerUuid field value if set, zero value otherwise.
func (o *ReactionReqBody) GetSignerUuid() string {
	if o == nil || IsNil(o.SignerUuid) {
		var ret string
		return ret
	}
	return *o.SignerUuid
}

// GetSignerUuidOk returns a tuple with the SignerUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionReqBody) GetSignerUuidOk() (*string, bool) {
	if o == nil || IsNil(o.SignerUuid) {
		return nil, false
	}
	return o.SignerUuid, true
}

// HasSignerUuid returns a boolean if a field has been set.
func (o *ReactionReqBody) HasSignerUuid() bool {
	if o != nil && !IsNil(o.SignerUuid) {
		return true
	}

	return false
}

// SetSignerUuid gets a reference to the given string and assigns it to the SignerUuid field.
func (o *ReactionReqBody) SetSignerUuid(v string) {
	o.SignerUuid = &v
}

// GetReactionType returns the ReactionType field value if set, zero value otherwise.
func (o *ReactionReqBody) GetReactionType() ReactionType {
	if o == nil || IsNil(o.ReactionType) {
		var ret ReactionType
		return ret
	}
	return *o.ReactionType
}

// GetReactionTypeOk returns a tuple with the ReactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionReqBody) GetReactionTypeOk() (*ReactionType, bool) {
	if o == nil || IsNil(o.ReactionType) {
		return nil, false
	}
	return o.ReactionType, true
}

// HasReactionType returns a boolean if a field has been set.
func (o *ReactionReqBody) HasReactionType() bool {
	if o != nil && !IsNil(o.ReactionType) {
		return true
	}

	return false
}

// SetReactionType gets a reference to the given ReactionType and assigns it to the ReactionType field.
func (o *ReactionReqBody) SetReactionType(v ReactionType) {
	o.ReactionType = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *ReactionReqBody) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionReqBody) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *ReactionReqBody) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *ReactionReqBody) SetTarget(v string) {
	o.Target = &v
}

// GetTargetAuthorFid returns the TargetAuthorFid field value if set, zero value otherwise.
func (o *ReactionReqBody) GetTargetAuthorFid() int32 {
	if o == nil || IsNil(o.TargetAuthorFid) {
		var ret int32
		return ret
	}
	return *o.TargetAuthorFid
}

// GetTargetAuthorFidOk returns a tuple with the TargetAuthorFid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionReqBody) GetTargetAuthorFidOk() (*int32, bool) {
	if o == nil || IsNil(o.TargetAuthorFid) {
		return nil, false
	}
	return o.TargetAuthorFid, true
}

// HasTargetAuthorFid returns a boolean if a field has been set.
func (o *ReactionReqBody) HasTargetAuthorFid() bool {
	if o != nil && !IsNil(o.TargetAuthorFid) {
		return true
	}

	return false
}

// SetTargetAuthorFid gets a reference to the given int32 and assigns it to the TargetAuthorFid field.
func (o *ReactionReqBody) SetTargetAuthorFid(v int32) {
	o.TargetAuthorFid = &v
}

// GetIdem returns the Idem field value if set, zero value otherwise.
func (o *ReactionReqBody) GetIdem() string {
	if o == nil || IsNil(o.Idem) {
		var ret string
		return ret
	}
	return *o.Idem
}

// GetIdemOk returns a tuple with the Idem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionReqBody) GetIdemOk() (*string, bool) {
	if o == nil || IsNil(o.Idem) {
		return nil, false
	}
	return o.Idem, true
}

// HasIdem returns a boolean if a field has been set.
func (o *ReactionReqBody) HasIdem() bool {
	if o != nil && !IsNil(o.Idem) {
		return true
	}

	return false
}

// SetIdem gets a reference to the given string and assigns it to the Idem field.
func (o *ReactionReqBody) SetIdem(v string) {
	o.Idem = &v
}

func (o ReactionReqBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReactionReqBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SignerUuid) {
		toSerialize["signer_uuid"] = o.SignerUuid
	}
	if !IsNil(o.ReactionType) {
		toSerialize["reaction_type"] = o.ReactionType
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.TargetAuthorFid) {
		toSerialize["target_author_fid"] = o.TargetAuthorFid
	}
	if !IsNil(o.Idem) {
		toSerialize["idem"] = o.Idem
	}
	return toSerialize, nil
}

type NullableReactionReqBody struct {
	value *ReactionReqBody
	isSet bool
}

func (v NullableReactionReqBody) Get() *ReactionReqBody {
	return v.value
}

func (v *NullableReactionReqBody) Set(val *ReactionReqBody) {
	v.value = val
	v.isSet = true
}

func (v NullableReactionReqBody) IsSet() bool {
	return v.isSet
}

func (v *NullableReactionReqBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactionReqBody(val *ReactionReqBody) *NullableReactionReqBody {
	return &NullableReactionReqBody{value: val, isSet: true}
}

func (v NullableReactionReqBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactionReqBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


