/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReactionsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReactionsResponse{}

// ReactionsResponse struct for ReactionsResponse
type ReactionsResponse struct {
	Reactions []ReactionWithCastInfo `json:"reactions,omitempty"`
	Next *NextCursor `json:"next,omitempty"`
}

// NewReactionsResponse instantiates a new ReactionsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactionsResponse() *ReactionsResponse {
	this := ReactionsResponse{}
	return &this
}

// NewReactionsResponseWithDefaults instantiates a new ReactionsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionsResponseWithDefaults() *ReactionsResponse {
	this := ReactionsResponse{}
	return &this
}

// GetReactions returns the Reactions field value if set, zero value otherwise.
func (o *ReactionsResponse) GetReactions() []ReactionWithCastInfo {
	if o == nil || IsNil(o.Reactions) {
		var ret []ReactionWithCastInfo
		return ret
	}
	return o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionsResponse) GetReactionsOk() ([]ReactionWithCastInfo, bool) {
	if o == nil || IsNil(o.Reactions) {
		return nil, false
	}
	return o.Reactions, true
}

// HasReactions returns a boolean if a field has been set.
func (o *ReactionsResponse) HasReactions() bool {
	if o != nil && !IsNil(o.Reactions) {
		return true
	}

	return false
}

// SetReactions gets a reference to the given []ReactionWithCastInfo and assigns it to the Reactions field.
func (o *ReactionsResponse) SetReactions(v []ReactionWithCastInfo) {
	o.Reactions = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *ReactionsResponse) GetNext() NextCursor {
	if o == nil || IsNil(o.Next) {
		var ret NextCursor
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionsResponse) GetNextOk() (*NextCursor, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *ReactionsResponse) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given NextCursor and assigns it to the Next field.
func (o *ReactionsResponse) SetNext(v NextCursor) {
	o.Next = &v
}

func (o ReactionsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReactionsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reactions) {
		toSerialize["reactions"] = o.Reactions
	}
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	return toSerialize, nil
}

type NullableReactionsResponse struct {
	value *ReactionsResponse
	isSet bool
}

func (v NullableReactionsResponse) Get() *ReactionsResponse {
	return v.value
}

func (v *NullableReactionsResponse) Set(val *ReactionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReactionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReactionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactionsResponse(val *ReactionsResponse) *NullableReactionsResponse {
	return &NullableReactionsResponse{value: val, isSet: true}
}

func (v NullableReactionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


