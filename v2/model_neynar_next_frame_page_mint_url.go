/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the NeynarNextFramePageMintUrl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NeynarNextFramePageMintUrl{}

// NeynarNextFramePageMintUrl struct for NeynarNextFramePageMintUrl
type NeynarNextFramePageMintUrl struct {
	// The URL for minting, specific to the mint action.
	MintUrl string `json:"mint_url"`
	AdditionalProperties map[string]interface{}
}

type _NeynarNextFramePageMintUrl NeynarNextFramePageMintUrl

// NewNeynarNextFramePageMintUrl instantiates a new NeynarNextFramePageMintUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNeynarNextFramePageMintUrl(mintUrl string) *NeynarNextFramePageMintUrl {
	this := NeynarNextFramePageMintUrl{}
	this.MintUrl = mintUrl
	return &this
}

// NewNeynarNextFramePageMintUrlWithDefaults instantiates a new NeynarNextFramePageMintUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNeynarNextFramePageMintUrlWithDefaults() *NeynarNextFramePageMintUrl {
	this := NeynarNextFramePageMintUrl{}
	return &this
}

// GetMintUrl returns the MintUrl field value
func (o *NeynarNextFramePageMintUrl) GetMintUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MintUrl
}

// GetMintUrlOk returns a tuple with the MintUrl field value
// and a boolean to check if the value has been set.
func (o *NeynarNextFramePageMintUrl) GetMintUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MintUrl, true
}

// SetMintUrl sets field value
func (o *NeynarNextFramePageMintUrl) SetMintUrl(v string) {
	o.MintUrl = v
}

func (o NeynarNextFramePageMintUrl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NeynarNextFramePageMintUrl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mint_url"] = o.MintUrl

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NeynarNextFramePageMintUrl) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mint_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNeynarNextFramePageMintUrl := _NeynarNextFramePageMintUrl{}

	err = json.Unmarshal(data, &varNeynarNextFramePageMintUrl)

	if err != nil {
		return err
	}

	*o = NeynarNextFramePageMintUrl(varNeynarNextFramePageMintUrl)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mint_url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNeynarNextFramePageMintUrl struct {
	value *NeynarNextFramePageMintUrl
	isSet bool
}

func (v NullableNeynarNextFramePageMintUrl) Get() *NeynarNextFramePageMintUrl {
	return v.value
}

func (v *NullableNeynarNextFramePageMintUrl) Set(val *NeynarNextFramePageMintUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableNeynarNextFramePageMintUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableNeynarNextFramePageMintUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNeynarNextFramePageMintUrl(val *NeynarNextFramePageMintUrl) *NullableNeynarNextFramePageMintUrl {
	return &NullableNeynarNextFramePageMintUrl{value: val, isSet: true}
}

func (v NullableNeynarNextFramePageMintUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNeynarNextFramePageMintUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


