/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MusicSongObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MusicSongObject{}

// MusicSongObject struct for MusicSongObject
type MusicSongObject struct {
	Disc *string `json:"disc,omitempty"`
	Track *int32 `json:"track,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewMusicSongObject instantiates a new MusicSongObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMusicSongObject() *MusicSongObject {
	this := MusicSongObject{}
	return &this
}

// NewMusicSongObjectWithDefaults instantiates a new MusicSongObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMusicSongObjectWithDefaults() *MusicSongObject {
	this := MusicSongObject{}
	return &this
}

// GetDisc returns the Disc field value if set, zero value otherwise.
func (o *MusicSongObject) GetDisc() string {
	if o == nil || IsNil(o.Disc) {
		var ret string
		return ret
	}
	return *o.Disc
}

// GetDiscOk returns a tuple with the Disc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MusicSongObject) GetDiscOk() (*string, bool) {
	if o == nil || IsNil(o.Disc) {
		return nil, false
	}
	return o.Disc, true
}

// HasDisc returns a boolean if a field has been set.
func (o *MusicSongObject) HasDisc() bool {
	if o != nil && !IsNil(o.Disc) {
		return true
	}

	return false
}

// SetDisc gets a reference to the given string and assigns it to the Disc field.
func (o *MusicSongObject) SetDisc(v string) {
	o.Disc = &v
}

// GetTrack returns the Track field value if set, zero value otherwise.
func (o *MusicSongObject) GetTrack() int32 {
	if o == nil || IsNil(o.Track) {
		var ret int32
		return ret
	}
	return *o.Track
}

// GetTrackOk returns a tuple with the Track field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MusicSongObject) GetTrackOk() (*int32, bool) {
	if o == nil || IsNil(o.Track) {
		return nil, false
	}
	return o.Track, true
}

// HasTrack returns a boolean if a field has been set.
func (o *MusicSongObject) HasTrack() bool {
	if o != nil && !IsNil(o.Track) {
		return true
	}

	return false
}

// SetTrack gets a reference to the given int32 and assigns it to the Track field.
func (o *MusicSongObject) SetTrack(v int32) {
	o.Track = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *MusicSongObject) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MusicSongObject) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *MusicSongObject) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *MusicSongObject) SetUrl(v string) {
	o.Url = &v
}

func (o MusicSongObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MusicSongObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disc) {
		toSerialize["disc"] = o.Disc
	}
	if !IsNil(o.Track) {
		toSerialize["track"] = o.Track
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableMusicSongObject struct {
	value *MusicSongObject
	isSet bool
}

func (v NullableMusicSongObject) Get() *MusicSongObject {
	return v.value
}

func (v *NullableMusicSongObject) Set(val *MusicSongObject) {
	v.value = val
	v.isSet = true
}

func (v NullableMusicSongObject) IsSet() bool {
	return v.isSet
}

func (v *NullableMusicSongObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMusicSongObject(val *MusicSongObject) *NullableMusicSongObject {
	return &NullableMusicSongObject{value: val, isSet: true}
}

func (v NullableMusicSongObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMusicSongObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


