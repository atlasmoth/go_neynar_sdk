/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserViewerContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserViewerContext{}

// UserViewerContext Adds context on the viewer's follow relationship with the user.
type UserViewerContext struct {
	// Indicates if the viewer is following the user.
	Following *bool `json:"following,omitempty"`
	// Indicates if the viewer is followed by the user.
	FollowedBy *bool `json:"followed_by,omitempty"`
}

// NewUserViewerContext instantiates a new UserViewerContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserViewerContext() *UserViewerContext {
	this := UserViewerContext{}
	return &this
}

// NewUserViewerContextWithDefaults instantiates a new UserViewerContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserViewerContextWithDefaults() *UserViewerContext {
	this := UserViewerContext{}
	return &this
}

// GetFollowing returns the Following field value if set, zero value otherwise.
func (o *UserViewerContext) GetFollowing() bool {
	if o == nil || IsNil(o.Following) {
		var ret bool
		return ret
	}
	return *o.Following
}

// GetFollowingOk returns a tuple with the Following field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserViewerContext) GetFollowingOk() (*bool, bool) {
	if o == nil || IsNil(o.Following) {
		return nil, false
	}
	return o.Following, true
}

// HasFollowing returns a boolean if a field has been set.
func (o *UserViewerContext) HasFollowing() bool {
	if o != nil && !IsNil(o.Following) {
		return true
	}

	return false
}

// SetFollowing gets a reference to the given bool and assigns it to the Following field.
func (o *UserViewerContext) SetFollowing(v bool) {
	o.Following = &v
}

// GetFollowedBy returns the FollowedBy field value if set, zero value otherwise.
func (o *UserViewerContext) GetFollowedBy() bool {
	if o == nil || IsNil(o.FollowedBy) {
		var ret bool
		return ret
	}
	return *o.FollowedBy
}

// GetFollowedByOk returns a tuple with the FollowedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserViewerContext) GetFollowedByOk() (*bool, bool) {
	if o == nil || IsNil(o.FollowedBy) {
		return nil, false
	}
	return o.FollowedBy, true
}

// HasFollowedBy returns a boolean if a field has been set.
func (o *UserViewerContext) HasFollowedBy() bool {
	if o != nil && !IsNil(o.FollowedBy) {
		return true
	}

	return false
}

// SetFollowedBy gets a reference to the given bool and assigns it to the FollowedBy field.
func (o *UserViewerContext) SetFollowedBy(v bool) {
	o.FollowedBy = &v
}

func (o UserViewerContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserViewerContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Following) {
		toSerialize["following"] = o.Following
	}
	if !IsNil(o.FollowedBy) {
		toSerialize["followed_by"] = o.FollowedBy
	}
	return toSerialize, nil
}

type NullableUserViewerContext struct {
	value *UserViewerContext
	isSet bool
}

func (v NullableUserViewerContext) Get() *UserViewerContext {
	return v.value
}

func (v *NullableUserViewerContext) Set(val *UserViewerContext) {
	v.value = val
	v.isSet = true
}

func (v NullableUserViewerContext) IsSet() bool {
	return v.isSet
}

func (v *NullableUserViewerContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserViewerContext(val *UserViewerContext) *NullableUserViewerContext {
	return &NullableUserViewerContext{value: val, isSet: true}
}

func (v NullableUserViewerContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserViewerContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


