/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the UserViewerContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserViewerContext{}

// UserViewerContext Adds context on the viewer's follow relationship with the user.
type UserViewerContext struct {
	// Indicates if the viewer is following the user.
	Following bool `json:"following"`
	// Indicates if the viewer is followed by the user.
	FollowedBy bool `json:"followed_by"`
	AdditionalProperties map[string]interface{}
}

type _UserViewerContext UserViewerContext

// NewUserViewerContext instantiates a new UserViewerContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserViewerContext(following bool, followedBy bool) *UserViewerContext {
	this := UserViewerContext{}
	this.Following = following
	this.FollowedBy = followedBy
	return &this
}

// NewUserViewerContextWithDefaults instantiates a new UserViewerContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserViewerContextWithDefaults() *UserViewerContext {
	this := UserViewerContext{}
	return &this
}

// GetFollowing returns the Following field value
func (o *UserViewerContext) GetFollowing() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Following
}

// GetFollowingOk returns a tuple with the Following field value
// and a boolean to check if the value has been set.
func (o *UserViewerContext) GetFollowingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Following, true
}

// SetFollowing sets field value
func (o *UserViewerContext) SetFollowing(v bool) {
	o.Following = v
}

// GetFollowedBy returns the FollowedBy field value
func (o *UserViewerContext) GetFollowedBy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FollowedBy
}

// GetFollowedByOk returns a tuple with the FollowedBy field value
// and a boolean to check if the value has been set.
func (o *UserViewerContext) GetFollowedByOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FollowedBy, true
}

// SetFollowedBy sets field value
func (o *UserViewerContext) SetFollowedBy(v bool) {
	o.FollowedBy = v
}

func (o UserViewerContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserViewerContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["following"] = o.Following
	toSerialize["followed_by"] = o.FollowedBy

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserViewerContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"following",
		"followed_by",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserViewerContext := _UserViewerContext{}

	err = json.Unmarshal(data, &varUserViewerContext)

	if err != nil {
		return err
	}

	*o = UserViewerContext(varUserViewerContext)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "following")
		delete(additionalProperties, "followed_by")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserViewerContext struct {
	value *UserViewerContext
	isSet bool
}

func (v NullableUserViewerContext) Get() *UserViewerContext {
	return v.value
}

func (v *NullableUserViewerContext) Set(val *UserViewerContext) {
	v.value = val
	v.isSet = true
}

func (v NullableUserViewerContext) IsSet() bool {
	return v.isSet
}

func (v *NullableUserViewerContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserViewerContext(val *UserViewerContext) *NullableUserViewerContext {
	return &NullableUserViewerContext{value: val, isSet: true}
}

func (v NullableUserViewerContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserViewerContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


