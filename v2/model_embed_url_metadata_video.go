/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EmbedUrlMetadataVideo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbedUrlMetadataVideo{}

// EmbedUrlMetadataVideo struct for EmbedUrlMetadataVideo
type EmbedUrlMetadataVideo struct {
	DurationS *float32 `json:"duration_s,omitempty"`
	Stream []EmbedUrlMetadataVideoStreamInner `json:"stream,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EmbedUrlMetadataVideo EmbedUrlMetadataVideo

// NewEmbedUrlMetadataVideo instantiates a new EmbedUrlMetadataVideo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbedUrlMetadataVideo() *EmbedUrlMetadataVideo {
	this := EmbedUrlMetadataVideo{}
	return &this
}

// NewEmbedUrlMetadataVideoWithDefaults instantiates a new EmbedUrlMetadataVideo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbedUrlMetadataVideoWithDefaults() *EmbedUrlMetadataVideo {
	this := EmbedUrlMetadataVideo{}
	return &this
}

// GetDurationS returns the DurationS field value if set, zero value otherwise.
func (o *EmbedUrlMetadataVideo) GetDurationS() float32 {
	if o == nil || IsNil(o.DurationS) {
		var ret float32
		return ret
	}
	return *o.DurationS
}

// GetDurationSOk returns a tuple with the DurationS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbedUrlMetadataVideo) GetDurationSOk() (*float32, bool) {
	if o == nil || IsNil(o.DurationS) {
		return nil, false
	}
	return o.DurationS, true
}

// HasDurationS returns a boolean if a field has been set.
func (o *EmbedUrlMetadataVideo) HasDurationS() bool {
	if o != nil && !IsNil(o.DurationS) {
		return true
	}

	return false
}

// SetDurationS gets a reference to the given float32 and assigns it to the DurationS field.
func (o *EmbedUrlMetadataVideo) SetDurationS(v float32) {
	o.DurationS = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *EmbedUrlMetadataVideo) GetStream() []EmbedUrlMetadataVideoStreamInner {
	if o == nil || IsNil(o.Stream) {
		var ret []EmbedUrlMetadataVideoStreamInner
		return ret
	}
	return o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbedUrlMetadataVideo) GetStreamOk() ([]EmbedUrlMetadataVideoStreamInner, bool) {
	if o == nil || IsNil(o.Stream) {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *EmbedUrlMetadataVideo) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given []EmbedUrlMetadataVideoStreamInner and assigns it to the Stream field.
func (o *EmbedUrlMetadataVideo) SetStream(v []EmbedUrlMetadataVideoStreamInner) {
	o.Stream = v
}

func (o EmbedUrlMetadataVideo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbedUrlMetadataVideo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DurationS) {
		toSerialize["duration_s"] = o.DurationS
	}
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EmbedUrlMetadataVideo) UnmarshalJSON(data []byte) (err error) {
	varEmbedUrlMetadataVideo := _EmbedUrlMetadataVideo{}

	err = json.Unmarshal(data, &varEmbedUrlMetadataVideo)

	if err != nil {
		return err
	}

	*o = EmbedUrlMetadataVideo(varEmbedUrlMetadataVideo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "duration_s")
		delete(additionalProperties, "stream")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEmbedUrlMetadataVideo struct {
	value *EmbedUrlMetadataVideo
	isSet bool
}

func (v NullableEmbedUrlMetadataVideo) Get() *EmbedUrlMetadataVideo {
	return v.value
}

func (v *NullableEmbedUrlMetadataVideo) Set(val *EmbedUrlMetadataVideo) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbedUrlMetadataVideo) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbedUrlMetadataVideo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbedUrlMetadataVideo(val *EmbedUrlMetadataVideo) *NullableEmbedUrlMetadataVideo {
	return &NullableEmbedUrlMetadataVideo{value: val, isSet: true}
}

func (v NullableEmbedUrlMetadataVideo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbedUrlMetadataVideo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


