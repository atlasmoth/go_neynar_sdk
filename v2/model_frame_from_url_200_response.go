/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FrameFromUrl200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameFromUrl200Response{}

// FrameFromUrl200Response The frame object containing the meta tags
type FrameFromUrl200Response struct {
	Frame *Frame `json:"frame,omitempty"`
}

// NewFrameFromUrl200Response instantiates a new FrameFromUrl200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameFromUrl200Response() *FrameFromUrl200Response {
	this := FrameFromUrl200Response{}
	return &this
}

// NewFrameFromUrl200ResponseWithDefaults instantiates a new FrameFromUrl200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameFromUrl200ResponseWithDefaults() *FrameFromUrl200Response {
	this := FrameFromUrl200Response{}
	return &this
}

// GetFrame returns the Frame field value if set, zero value otherwise.
func (o *FrameFromUrl200Response) GetFrame() Frame {
	if o == nil || IsNil(o.Frame) {
		var ret Frame
		return ret
	}
	return *o.Frame
}

// GetFrameOk returns a tuple with the Frame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameFromUrl200Response) GetFrameOk() (*Frame, bool) {
	if o == nil || IsNil(o.Frame) {
		return nil, false
	}
	return o.Frame, true
}

// HasFrame returns a boolean if a field has been set.
func (o *FrameFromUrl200Response) HasFrame() bool {
	if o != nil && !IsNil(o.Frame) {
		return true
	}

	return false
}

// SetFrame gets a reference to the given Frame and assigns it to the Frame field.
func (o *FrameFromUrl200Response) SetFrame(v Frame) {
	o.Frame = &v
}

func (o FrameFromUrl200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameFromUrl200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Frame) {
		toSerialize["frame"] = o.Frame
	}
	return toSerialize, nil
}

type NullableFrameFromUrl200Response struct {
	value *FrameFromUrl200Response
	isSet bool
}

func (v NullableFrameFromUrl200Response) Get() *FrameFromUrl200Response {
	return v.value
}

func (v *NullableFrameFromUrl200Response) Set(val *FrameFromUrl200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameFromUrl200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameFromUrl200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameFromUrl200Response(val *FrameFromUrl200Response) *NullableFrameFromUrl200Response {
	return &NullableFrameFromUrl200Response{value: val, isSet: true}
}

func (v NullableFrameFromUrl200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameFromUrl200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


