/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReactionWithUserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReactionWithUserInfo{}

// ReactionWithUserInfo struct for ReactionWithUserInfo
type ReactionWithUserInfo struct {
	Object *string `json:"object,omitempty"`
	Cast *CastDehydrated `json:"cast,omitempty"`
	User *User `json:"user,omitempty"`
}

// NewReactionWithUserInfo instantiates a new ReactionWithUserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactionWithUserInfo() *ReactionWithUserInfo {
	this := ReactionWithUserInfo{}
	return &this
}

// NewReactionWithUserInfoWithDefaults instantiates a new ReactionWithUserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionWithUserInfoWithDefaults() *ReactionWithUserInfo {
	this := ReactionWithUserInfo{}
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *ReactionWithUserInfo) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionWithUserInfo) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *ReactionWithUserInfo) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *ReactionWithUserInfo) SetObject(v string) {
	o.Object = &v
}

// GetCast returns the Cast field value if set, zero value otherwise.
func (o *ReactionWithUserInfo) GetCast() CastDehydrated {
	if o == nil || IsNil(o.Cast) {
		var ret CastDehydrated
		return ret
	}
	return *o.Cast
}

// GetCastOk returns a tuple with the Cast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionWithUserInfo) GetCastOk() (*CastDehydrated, bool) {
	if o == nil || IsNil(o.Cast) {
		return nil, false
	}
	return o.Cast, true
}

// HasCast returns a boolean if a field has been set.
func (o *ReactionWithUserInfo) HasCast() bool {
	if o != nil && !IsNil(o.Cast) {
		return true
	}

	return false
}

// SetCast gets a reference to the given CastDehydrated and assigns it to the Cast field.
func (o *ReactionWithUserInfo) SetCast(v CastDehydrated) {
	o.Cast = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ReactionWithUserInfo) GetUser() User {
	if o == nil || IsNil(o.User) {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionWithUserInfo) GetUserOk() (*User, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ReactionWithUserInfo) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *ReactionWithUserInfo) SetUser(v User) {
	o.User = &v
}

func (o ReactionWithUserInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReactionWithUserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Cast) {
		toSerialize["cast"] = o.Cast
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableReactionWithUserInfo struct {
	value *ReactionWithUserInfo
	isSet bool
}

func (v NullableReactionWithUserInfo) Get() *ReactionWithUserInfo {
	return v.value
}

func (v *NullableReactionWithUserInfo) Set(val *ReactionWithUserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableReactionWithUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableReactionWithUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactionWithUserInfo(val *ReactionWithUserInfo) *NullableReactionWithUserInfo {
	return &NullableReactionWithUserInfo{value: val, isSet: true}
}

func (v NullableReactionWithUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactionWithUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


