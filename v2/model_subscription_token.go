/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubscriptionToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionToken{}

// SubscriptionToken struct for SubscriptionToken
type SubscriptionToken struct {
	Symbol *string `json:"symbol,omitempty"`
	Address NullableString `json:"address,omitempty"`
	Decimals *int32 `json:"decimals,omitempty"`
	Erc20 *bool `json:"erc20,omitempty"`
}

// NewSubscriptionToken instantiates a new SubscriptionToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionToken() *SubscriptionToken {
	this := SubscriptionToken{}
	return &this
}

// NewSubscriptionTokenWithDefaults instantiates a new SubscriptionToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionTokenWithDefaults() *SubscriptionToken {
	this := SubscriptionToken{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *SubscriptionToken) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionToken) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *SubscriptionToken) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *SubscriptionToken) SetSymbol(v string) {
	o.Symbol = &v
}

// GetAddress returns the Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionToken) GetAddress() string {
	if o == nil || IsNil(o.Address.Get()) {
		var ret string
		return ret
	}
	return *o.Address.Get()
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionToken) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Address.Get(), o.Address.IsSet()
}

// HasAddress returns a boolean if a field has been set.
func (o *SubscriptionToken) HasAddress() bool {
	if o != nil && o.Address.IsSet() {
		return true
	}

	return false
}

// SetAddress gets a reference to the given NullableString and assigns it to the Address field.
func (o *SubscriptionToken) SetAddress(v string) {
	o.Address.Set(&v)
}
// SetAddressNil sets the value for Address to be an explicit nil
func (o *SubscriptionToken) SetAddressNil() {
	o.Address.Set(nil)
}

// UnsetAddress ensures that no value is present for Address, not even an explicit nil
func (o *SubscriptionToken) UnsetAddress() {
	o.Address.Unset()
}

// GetDecimals returns the Decimals field value if set, zero value otherwise.
func (o *SubscriptionToken) GetDecimals() int32 {
	if o == nil || IsNil(o.Decimals) {
		var ret int32
		return ret
	}
	return *o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionToken) GetDecimalsOk() (*int32, bool) {
	if o == nil || IsNil(o.Decimals) {
		return nil, false
	}
	return o.Decimals, true
}

// HasDecimals returns a boolean if a field has been set.
func (o *SubscriptionToken) HasDecimals() bool {
	if o != nil && !IsNil(o.Decimals) {
		return true
	}

	return false
}

// SetDecimals gets a reference to the given int32 and assigns it to the Decimals field.
func (o *SubscriptionToken) SetDecimals(v int32) {
	o.Decimals = &v
}

// GetErc20 returns the Erc20 field value if set, zero value otherwise.
func (o *SubscriptionToken) GetErc20() bool {
	if o == nil || IsNil(o.Erc20) {
		var ret bool
		return ret
	}
	return *o.Erc20
}

// GetErc20Ok returns a tuple with the Erc20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionToken) GetErc20Ok() (*bool, bool) {
	if o == nil || IsNil(o.Erc20) {
		return nil, false
	}
	return o.Erc20, true
}

// HasErc20 returns a boolean if a field has been set.
func (o *SubscriptionToken) HasErc20() bool {
	if o != nil && !IsNil(o.Erc20) {
		return true
	}

	return false
}

// SetErc20 gets a reference to the given bool and assigns it to the Erc20 field.
func (o *SubscriptionToken) SetErc20(v bool) {
	o.Erc20 = &v
}

func (o SubscriptionToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Address.IsSet() {
		toSerialize["address"] = o.Address.Get()
	}
	if !IsNil(o.Decimals) {
		toSerialize["decimals"] = o.Decimals
	}
	if !IsNil(o.Erc20) {
		toSerialize["erc20"] = o.Erc20
	}
	return toSerialize, nil
}

type NullableSubscriptionToken struct {
	value *SubscriptionToken
	isSet bool
}

func (v NullableSubscriptionToken) Get() *SubscriptionToken {
	return v.value
}

func (v *NullableSubscriptionToken) Set(val *SubscriptionToken) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionToken) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionToken(val *SubscriptionToken) *NullableSubscriptionToken {
	return &NullableSubscriptionToken{value: val, isSet: true}
}

func (v NullableSubscriptionToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


