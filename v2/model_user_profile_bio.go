/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the UserProfileBio type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserProfileBio{}

// UserProfileBio struct for UserProfileBio
type UserProfileBio struct {
	Text string `json:"text"`
	MentionedProfiles []string `json:"mentioned_profiles"`
	AdditionalProperties map[string]interface{}
}

type _UserProfileBio UserProfileBio

// NewUserProfileBio instantiates a new UserProfileBio object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserProfileBio(text string, mentionedProfiles []string) *UserProfileBio {
	this := UserProfileBio{}
	this.Text = text
	this.MentionedProfiles = mentionedProfiles
	return &this
}

// NewUserProfileBioWithDefaults instantiates a new UserProfileBio object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserProfileBioWithDefaults() *UserProfileBio {
	this := UserProfileBio{}
	return &this
}

// GetText returns the Text field value
func (o *UserProfileBio) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *UserProfileBio) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *UserProfileBio) SetText(v string) {
	o.Text = v
}

// GetMentionedProfiles returns the MentionedProfiles field value
func (o *UserProfileBio) GetMentionedProfiles() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MentionedProfiles
}

// GetMentionedProfilesOk returns a tuple with the MentionedProfiles field value
// and a boolean to check if the value has been set.
func (o *UserProfileBio) GetMentionedProfilesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MentionedProfiles, true
}

// SetMentionedProfiles sets field value
func (o *UserProfileBio) SetMentionedProfiles(v []string) {
	o.MentionedProfiles = v
}

func (o UserProfileBio) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserProfileBio) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	toSerialize["mentioned_profiles"] = o.MentionedProfiles

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserProfileBio) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
		"mentioned_profiles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserProfileBio := _UserProfileBio{}

	err = json.Unmarshal(data, &varUserProfileBio)

	if err != nil {
		return err
	}

	*o = UserProfileBio(varUserProfileBio)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "text")
		delete(additionalProperties, "mentioned_profiles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserProfileBio struct {
	value *UserProfileBio
	isSet bool
}

func (v NullableUserProfileBio) Get() *UserProfileBio {
	return v.value
}

func (v *NullableUserProfileBio) Set(val *UserProfileBio) {
	v.value = val
	v.isSet = true
}

func (v NullableUserProfileBio) IsSet() bool {
	return v.isSet
}

func (v *NullableUserProfileBio) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserProfileBio(val *UserProfileBio) *NullableUserProfileBio {
	return &NullableUserProfileBio{value: val, isSet: true}
}

func (v NullableUserProfileBio) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserProfileBio) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


