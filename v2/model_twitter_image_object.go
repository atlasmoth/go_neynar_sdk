/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the TwitterImageObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TwitterImageObject{}

// TwitterImageObject struct for TwitterImageObject
type TwitterImageObject struct {
	Alt *string `json:"alt,omitempty"`
	Height *int32 `json:"height,omitempty"`
	Url string `json:"url"`
	Width *int32 `json:"width,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TwitterImageObject TwitterImageObject

// NewTwitterImageObject instantiates a new TwitterImageObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTwitterImageObject(url string) *TwitterImageObject {
	this := TwitterImageObject{}
	this.Url = url
	return &this
}

// NewTwitterImageObjectWithDefaults instantiates a new TwitterImageObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTwitterImageObjectWithDefaults() *TwitterImageObject {
	this := TwitterImageObject{}
	return &this
}

// GetAlt returns the Alt field value if set, zero value otherwise.
func (o *TwitterImageObject) GetAlt() string {
	if o == nil || IsNil(o.Alt) {
		var ret string
		return ret
	}
	return *o.Alt
}

// GetAltOk returns a tuple with the Alt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TwitterImageObject) GetAltOk() (*string, bool) {
	if o == nil || IsNil(o.Alt) {
		return nil, false
	}
	return o.Alt, true
}

// HasAlt returns a boolean if a field has been set.
func (o *TwitterImageObject) HasAlt() bool {
	if o != nil && !IsNil(o.Alt) {
		return true
	}

	return false
}

// SetAlt gets a reference to the given string and assigns it to the Alt field.
func (o *TwitterImageObject) SetAlt(v string) {
	o.Alt = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *TwitterImageObject) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TwitterImageObject) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *TwitterImageObject) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *TwitterImageObject) SetHeight(v int32) {
	o.Height = &v
}

// GetUrl returns the Url field value
func (o *TwitterImageObject) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *TwitterImageObject) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *TwitterImageObject) SetUrl(v string) {
	o.Url = v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *TwitterImageObject) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TwitterImageObject) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *TwitterImageObject) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *TwitterImageObject) SetWidth(v int32) {
	o.Width = &v
}

func (o TwitterImageObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TwitterImageObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alt) {
		toSerialize["alt"] = o.Alt
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	toSerialize["url"] = o.Url
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TwitterImageObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTwitterImageObject := _TwitterImageObject{}

	err = json.Unmarshal(data, &varTwitterImageObject)

	if err != nil {
		return err
	}

	*o = TwitterImageObject(varTwitterImageObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "alt")
		delete(additionalProperties, "height")
		delete(additionalProperties, "url")
		delete(additionalProperties, "width")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTwitterImageObject struct {
	value *TwitterImageObject
	isSet bool
}

func (v NullableTwitterImageObject) Get() *TwitterImageObject {
	return v.value
}

func (v *NullableTwitterImageObject) Set(val *TwitterImageObject) {
	v.value = val
	v.isSet = true
}

func (v NullableTwitterImageObject) IsSet() bool {
	return v.isSet
}

func (v *NullableTwitterImageObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTwitterImageObject(val *TwitterImageObject) *NullableTwitterImageObject {
	return &NullableTwitterImageObject{value: val, isSet: true}
}

func (v NullableTwitterImageObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTwitterImageObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


