/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Signer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Signer{}

// Signer struct for Signer
type Signer struct {
	// UUID of the signer
	SignerUuid *string `json:"signer_uuid,omitempty"`
	// Ed25519 public key
	PublicKey *string `json:"public_key,omitempty" validate:"regexp=^0x[a-fA-F0-9]{64}$"`
	Status *string `json:"status,omitempty"`
	SignerApprovalUrl *string `json:"signer_approval_url,omitempty"`
	// User identifier (unsigned integer)
	Fid *int32 `json:"fid,omitempty"`
}

// NewSigner instantiates a new Signer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSigner() *Signer {
	this := Signer{}
	return &this
}

// NewSignerWithDefaults instantiates a new Signer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignerWithDefaults() *Signer {
	this := Signer{}
	return &this
}

// GetSignerUuid returns the SignerUuid field value if set, zero value otherwise.
func (o *Signer) GetSignerUuid() string {
	if o == nil || IsNil(o.SignerUuid) {
		var ret string
		return ret
	}
	return *o.SignerUuid
}

// GetSignerUuidOk returns a tuple with the SignerUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signer) GetSignerUuidOk() (*string, bool) {
	if o == nil || IsNil(o.SignerUuid) {
		return nil, false
	}
	return o.SignerUuid, true
}

// HasSignerUuid returns a boolean if a field has been set.
func (o *Signer) HasSignerUuid() bool {
	if o != nil && !IsNil(o.SignerUuid) {
		return true
	}

	return false
}

// SetSignerUuid gets a reference to the given string and assigns it to the SignerUuid field.
func (o *Signer) SetSignerUuid(v string) {
	o.SignerUuid = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *Signer) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signer) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *Signer) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *Signer) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Signer) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signer) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Signer) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Signer) SetStatus(v string) {
	o.Status = &v
}

// GetSignerApprovalUrl returns the SignerApprovalUrl field value if set, zero value otherwise.
func (o *Signer) GetSignerApprovalUrl() string {
	if o == nil || IsNil(o.SignerApprovalUrl) {
		var ret string
		return ret
	}
	return *o.SignerApprovalUrl
}

// GetSignerApprovalUrlOk returns a tuple with the SignerApprovalUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signer) GetSignerApprovalUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SignerApprovalUrl) {
		return nil, false
	}
	return o.SignerApprovalUrl, true
}

// HasSignerApprovalUrl returns a boolean if a field has been set.
func (o *Signer) HasSignerApprovalUrl() bool {
	if o != nil && !IsNil(o.SignerApprovalUrl) {
		return true
	}

	return false
}

// SetSignerApprovalUrl gets a reference to the given string and assigns it to the SignerApprovalUrl field.
func (o *Signer) SetSignerApprovalUrl(v string) {
	o.SignerApprovalUrl = &v
}

// GetFid returns the Fid field value if set, zero value otherwise.
func (o *Signer) GetFid() int32 {
	if o == nil || IsNil(o.Fid) {
		var ret int32
		return ret
	}
	return *o.Fid
}

// GetFidOk returns a tuple with the Fid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signer) GetFidOk() (*int32, bool) {
	if o == nil || IsNil(o.Fid) {
		return nil, false
	}
	return o.Fid, true
}

// HasFid returns a boolean if a field has been set.
func (o *Signer) HasFid() bool {
	if o != nil && !IsNil(o.Fid) {
		return true
	}

	return false
}

// SetFid gets a reference to the given int32 and assigns it to the Fid field.
func (o *Signer) SetFid(v int32) {
	o.Fid = &v
}

func (o Signer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Signer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SignerUuid) {
		toSerialize["signer_uuid"] = o.SignerUuid
	}
	if !IsNil(o.PublicKey) {
		toSerialize["public_key"] = o.PublicKey
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.SignerApprovalUrl) {
		toSerialize["signer_approval_url"] = o.SignerApprovalUrl
	}
	if !IsNil(o.Fid) {
		toSerialize["fid"] = o.Fid
	}
	return toSerialize, nil
}

type NullableSigner struct {
	value *Signer
	isSet bool
}

func (v NullableSigner) Get() *Signer {
	return v.value
}

func (v *NullableSigner) Set(val *Signer) {
	v.value = val
	v.isSet = true
}

func (v NullableSigner) IsSet() bool {
	return v.isSet
}

func (v *NullableSigner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSigner(val *Signer) *NullableSigner {
	return &NullableSigner{value: val, isSet: true}
}

func (v NullableSigner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSigner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


