/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NeynarFrameUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NeynarFrameUpdateRequest{}

// NeynarFrameUpdateRequest struct for NeynarFrameUpdateRequest
type NeynarFrameUpdateRequest struct {
	// The UUID of the frame to update.
	Uuid *string `json:"uuid,omitempty"`
	// The name of the frame.
	Name *string `json:"name,omitempty"`
	Pages []NeynarFramePage `json:"pages,omitempty"`
}

// NewNeynarFrameUpdateRequest instantiates a new NeynarFrameUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNeynarFrameUpdateRequest() *NeynarFrameUpdateRequest {
	this := NeynarFrameUpdateRequest{}
	return &this
}

// NewNeynarFrameUpdateRequestWithDefaults instantiates a new NeynarFrameUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNeynarFrameUpdateRequestWithDefaults() *NeynarFrameUpdateRequest {
	this := NeynarFrameUpdateRequest{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *NeynarFrameUpdateRequest) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeynarFrameUpdateRequest) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *NeynarFrameUpdateRequest) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *NeynarFrameUpdateRequest) SetUuid(v string) {
	o.Uuid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NeynarFrameUpdateRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeynarFrameUpdateRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NeynarFrameUpdateRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NeynarFrameUpdateRequest) SetName(v string) {
	o.Name = &v
}

// GetPages returns the Pages field value if set, zero value otherwise.
func (o *NeynarFrameUpdateRequest) GetPages() []NeynarFramePage {
	if o == nil || IsNil(o.Pages) {
		var ret []NeynarFramePage
		return ret
	}
	return o.Pages
}

// GetPagesOk returns a tuple with the Pages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeynarFrameUpdateRequest) GetPagesOk() ([]NeynarFramePage, bool) {
	if o == nil || IsNil(o.Pages) {
		return nil, false
	}
	return o.Pages, true
}

// HasPages returns a boolean if a field has been set.
func (o *NeynarFrameUpdateRequest) HasPages() bool {
	if o != nil && !IsNil(o.Pages) {
		return true
	}

	return false
}

// SetPages gets a reference to the given []NeynarFramePage and assigns it to the Pages field.
func (o *NeynarFrameUpdateRequest) SetPages(v []NeynarFramePage) {
	o.Pages = v
}

func (o NeynarFrameUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NeynarFrameUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Pages) {
		toSerialize["pages"] = o.Pages
	}
	return toSerialize, nil
}

type NullableNeynarFrameUpdateRequest struct {
	value *NeynarFrameUpdateRequest
	isSet bool
}

func (v NullableNeynarFrameUpdateRequest) Get() *NeynarFrameUpdateRequest {
	return v.value
}

func (v *NullableNeynarFrameUpdateRequest) Set(val *NeynarFrameUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNeynarFrameUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNeynarFrameUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNeynarFrameUpdateRequest(val *NeynarFrameUpdateRequest) *NullableNeynarFrameUpdateRequest {
	return &NullableNeynarFrameUpdateRequest{value: val, isSet: true}
}

func (v NullableNeynarFrameUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNeynarFrameUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


