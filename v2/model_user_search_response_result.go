/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserSearchResponseResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSearchResponseResult{}

// UserSearchResponseResult struct for UserSearchResponseResult
type UserSearchResponseResult struct {
	Users []SearchedUser `json:"users,omitempty"`
	Next *NextCursor `json:"next,omitempty"`
}

// NewUserSearchResponseResult instantiates a new UserSearchResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSearchResponseResult() *UserSearchResponseResult {
	this := UserSearchResponseResult{}
	return &this
}

// NewUserSearchResponseResultWithDefaults instantiates a new UserSearchResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSearchResponseResultWithDefaults() *UserSearchResponseResult {
	this := UserSearchResponseResult{}
	return &this
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *UserSearchResponseResult) GetUsers() []SearchedUser {
	if o == nil || IsNil(o.Users) {
		var ret []SearchedUser
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSearchResponseResult) GetUsersOk() ([]SearchedUser, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *UserSearchResponseResult) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []SearchedUser and assigns it to the Users field.
func (o *UserSearchResponseResult) SetUsers(v []SearchedUser) {
	o.Users = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *UserSearchResponseResult) GetNext() NextCursor {
	if o == nil || IsNil(o.Next) {
		var ret NextCursor
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSearchResponseResult) GetNextOk() (*NextCursor, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *UserSearchResponseResult) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given NextCursor and assigns it to the Next field.
func (o *UserSearchResponseResult) SetNext(v NextCursor) {
	o.Next = &v
}

func (o UserSearchResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSearchResponseResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	return toSerialize, nil
}

type NullableUserSearchResponseResult struct {
	value *UserSearchResponseResult
	isSet bool
}

func (v NullableUserSearchResponseResult) Get() *UserSearchResponseResult {
	return v.value
}

func (v *NullableUserSearchResponseResult) Set(val *UserSearchResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSearchResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSearchResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSearchResponseResult(val *UserSearchResponseResult) *NullableUserSearchResponseResult {
	return &NullableUserSearchResponseResult{value: val, isSet: true}
}

func (v NullableUserSearchResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSearchResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


