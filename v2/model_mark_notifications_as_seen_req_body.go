/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MarkNotificationsAsSeenReqBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarkNotificationsAsSeenReqBody{}

// MarkNotificationsAsSeenReqBody struct for MarkNotificationsAsSeenReqBody
type MarkNotificationsAsSeenReqBody struct {
	// The UUID of the signer. Signer should have atleast one write permission 
	SignerUuid *string `json:"signer_uuid,omitempty"`
	Type *NotificationType `json:"type,omitempty"`
}

// NewMarkNotificationsAsSeenReqBody instantiates a new MarkNotificationsAsSeenReqBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarkNotificationsAsSeenReqBody() *MarkNotificationsAsSeenReqBody {
	this := MarkNotificationsAsSeenReqBody{}
	return &this
}

// NewMarkNotificationsAsSeenReqBodyWithDefaults instantiates a new MarkNotificationsAsSeenReqBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarkNotificationsAsSeenReqBodyWithDefaults() *MarkNotificationsAsSeenReqBody {
	this := MarkNotificationsAsSeenReqBody{}
	return &this
}

// GetSignerUuid returns the SignerUuid field value if set, zero value otherwise.
func (o *MarkNotificationsAsSeenReqBody) GetSignerUuid() string {
	if o == nil || IsNil(o.SignerUuid) {
		var ret string
		return ret
	}
	return *o.SignerUuid
}

// GetSignerUuidOk returns a tuple with the SignerUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarkNotificationsAsSeenReqBody) GetSignerUuidOk() (*string, bool) {
	if o == nil || IsNil(o.SignerUuid) {
		return nil, false
	}
	return o.SignerUuid, true
}

// HasSignerUuid returns a boolean if a field has been set.
func (o *MarkNotificationsAsSeenReqBody) HasSignerUuid() bool {
	if o != nil && !IsNil(o.SignerUuid) {
		return true
	}

	return false
}

// SetSignerUuid gets a reference to the given string and assigns it to the SignerUuid field.
func (o *MarkNotificationsAsSeenReqBody) SetSignerUuid(v string) {
	o.SignerUuid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MarkNotificationsAsSeenReqBody) GetType() NotificationType {
	if o == nil || IsNil(o.Type) {
		var ret NotificationType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarkNotificationsAsSeenReqBody) GetTypeOk() (*NotificationType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MarkNotificationsAsSeenReqBody) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given NotificationType and assigns it to the Type field.
func (o *MarkNotificationsAsSeenReqBody) SetType(v NotificationType) {
	o.Type = &v
}

func (o MarkNotificationsAsSeenReqBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarkNotificationsAsSeenReqBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SignerUuid) {
		toSerialize["signer_uuid"] = o.SignerUuid
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableMarkNotificationsAsSeenReqBody struct {
	value *MarkNotificationsAsSeenReqBody
	isSet bool
}

func (v NullableMarkNotificationsAsSeenReqBody) Get() *MarkNotificationsAsSeenReqBody {
	return v.value
}

func (v *NullableMarkNotificationsAsSeenReqBody) Set(val *MarkNotificationsAsSeenReqBody) {
	v.value = val
	v.isSet = true
}

func (v NullableMarkNotificationsAsSeenReqBody) IsSet() bool {
	return v.isSet
}

func (v *NullableMarkNotificationsAsSeenReqBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarkNotificationsAsSeenReqBody(val *MarkNotificationsAsSeenReqBody) *NullableMarkNotificationsAsSeenReqBody {
	return &NullableMarkNotificationsAsSeenReqBody{value: val, isSet: true}
}

func (v NullableMarkNotificationsAsSeenReqBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarkNotificationsAsSeenReqBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


