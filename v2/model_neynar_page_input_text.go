/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NeynarPageInputText type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NeynarPageInputText{}

// NeynarPageInputText struct for NeynarPageInputText
type NeynarPageInputText struct {
	// Indicates if text input is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The placeholder text for the input.
	Placeholder *string `json:"placeholder,omitempty"`
}

// NewNeynarPageInputText instantiates a new NeynarPageInputText object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNeynarPageInputText() *NeynarPageInputText {
	this := NeynarPageInputText{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewNeynarPageInputTextWithDefaults instantiates a new NeynarPageInputText object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNeynarPageInputTextWithDefaults() *NeynarPageInputText {
	this := NeynarPageInputText{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *NeynarPageInputText) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeynarPageInputText) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *NeynarPageInputText) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *NeynarPageInputText) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise.
func (o *NeynarPageInputText) GetPlaceholder() string {
	if o == nil || IsNil(o.Placeholder) {
		var ret string
		return ret
	}
	return *o.Placeholder
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NeynarPageInputText) GetPlaceholderOk() (*string, bool) {
	if o == nil || IsNil(o.Placeholder) {
		return nil, false
	}
	return o.Placeholder, true
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *NeynarPageInputText) HasPlaceholder() bool {
	if o != nil && !IsNil(o.Placeholder) {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given string and assigns it to the Placeholder field.
func (o *NeynarPageInputText) SetPlaceholder(v string) {
	o.Placeholder = &v
}

func (o NeynarPageInputText) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NeynarPageInputText) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Placeholder) {
		toSerialize["placeholder"] = o.Placeholder
	}
	return toSerialize, nil
}

type NullableNeynarPageInputText struct {
	value *NeynarPageInputText
	isSet bool
}

func (v NullableNeynarPageInputText) Get() *NeynarPageInputText {
	return v.value
}

func (v *NullableNeynarPageInputText) Set(val *NeynarPageInputText) {
	v.value = val
	v.isSet = true
}

func (v NullableNeynarPageInputText) IsSet() bool {
	return v.isSet
}

func (v *NullableNeynarPageInputText) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNeynarPageInputText(val *NeynarPageInputText) *NullableNeynarPageInputText {
	return &NullableNeynarPageInputText{value: val, isSet: true}
}

func (v NullableNeynarPageInputText) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNeynarPageInputText) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


