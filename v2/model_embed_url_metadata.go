/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the EmbedUrlMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbedUrlMetadata{}

// EmbedUrlMetadata struct for EmbedUrlMetadata
type EmbedUrlMetadata struct {
	Status string `json:"_status"`
	ContentType NullableString `json:"content_type,omitempty"`
	ContentLength NullableInt32 `json:"content_length,omitempty"`
	Image *EmbedUrlMetadataImage `json:"image,omitempty"`
	Video *EmbedUrlMetadataVideo `json:"video,omitempty"`
	Html *OgObject `json:"html,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EmbedUrlMetadata EmbedUrlMetadata

// NewEmbedUrlMetadata instantiates a new EmbedUrlMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbedUrlMetadata(status string) *EmbedUrlMetadata {
	this := EmbedUrlMetadata{}
	this.Status = status
	return &this
}

// NewEmbedUrlMetadataWithDefaults instantiates a new EmbedUrlMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbedUrlMetadataWithDefaults() *EmbedUrlMetadata {
	this := EmbedUrlMetadata{}
	return &this
}

// GetStatus returns the Status field value
func (o *EmbedUrlMetadata) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *EmbedUrlMetadata) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *EmbedUrlMetadata) SetStatus(v string) {
	o.Status = v
}

// GetContentType returns the ContentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmbedUrlMetadata) GetContentType() string {
	if o == nil || IsNil(o.ContentType.Get()) {
		var ret string
		return ret
	}
	return *o.ContentType.Get()
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbedUrlMetadata) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentType.Get(), o.ContentType.IsSet()
}

// HasContentType returns a boolean if a field has been set.
func (o *EmbedUrlMetadata) HasContentType() bool {
	if o != nil && o.ContentType.IsSet() {
		return true
	}

	return false
}

// SetContentType gets a reference to the given NullableString and assigns it to the ContentType field.
func (o *EmbedUrlMetadata) SetContentType(v string) {
	o.ContentType.Set(&v)
}
// SetContentTypeNil sets the value for ContentType to be an explicit nil
func (o *EmbedUrlMetadata) SetContentTypeNil() {
	o.ContentType.Set(nil)
}

// UnsetContentType ensures that no value is present for ContentType, not even an explicit nil
func (o *EmbedUrlMetadata) UnsetContentType() {
	o.ContentType.Unset()
}

// GetContentLength returns the ContentLength field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmbedUrlMetadata) GetContentLength() int32 {
	if o == nil || IsNil(o.ContentLength.Get()) {
		var ret int32
		return ret
	}
	return *o.ContentLength.Get()
}

// GetContentLengthOk returns a tuple with the ContentLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbedUrlMetadata) GetContentLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentLength.Get(), o.ContentLength.IsSet()
}

// HasContentLength returns a boolean if a field has been set.
func (o *EmbedUrlMetadata) HasContentLength() bool {
	if o != nil && o.ContentLength.IsSet() {
		return true
	}

	return false
}

// SetContentLength gets a reference to the given NullableInt32 and assigns it to the ContentLength field.
func (o *EmbedUrlMetadata) SetContentLength(v int32) {
	o.ContentLength.Set(&v)
}
// SetContentLengthNil sets the value for ContentLength to be an explicit nil
func (o *EmbedUrlMetadata) SetContentLengthNil() {
	o.ContentLength.Set(nil)
}

// UnsetContentLength ensures that no value is present for ContentLength, not even an explicit nil
func (o *EmbedUrlMetadata) UnsetContentLength() {
	o.ContentLength.Unset()
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *EmbedUrlMetadata) GetImage() EmbedUrlMetadataImage {
	if o == nil || IsNil(o.Image) {
		var ret EmbedUrlMetadataImage
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbedUrlMetadata) GetImageOk() (*EmbedUrlMetadataImage, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *EmbedUrlMetadata) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given EmbedUrlMetadataImage and assigns it to the Image field.
func (o *EmbedUrlMetadata) SetImage(v EmbedUrlMetadataImage) {
	o.Image = &v
}

// GetVideo returns the Video field value if set, zero value otherwise.
func (o *EmbedUrlMetadata) GetVideo() EmbedUrlMetadataVideo {
	if o == nil || IsNil(o.Video) {
		var ret EmbedUrlMetadataVideo
		return ret
	}
	return *o.Video
}

// GetVideoOk returns a tuple with the Video field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbedUrlMetadata) GetVideoOk() (*EmbedUrlMetadataVideo, bool) {
	if o == nil || IsNil(o.Video) {
		return nil, false
	}
	return o.Video, true
}

// HasVideo returns a boolean if a field has been set.
func (o *EmbedUrlMetadata) HasVideo() bool {
	if o != nil && !IsNil(o.Video) {
		return true
	}

	return false
}

// SetVideo gets a reference to the given EmbedUrlMetadataVideo and assigns it to the Video field.
func (o *EmbedUrlMetadata) SetVideo(v EmbedUrlMetadataVideo) {
	o.Video = &v
}

// GetHtml returns the Html field value if set, zero value otherwise.
func (o *EmbedUrlMetadata) GetHtml() OgObject {
	if o == nil || IsNil(o.Html) {
		var ret OgObject
		return ret
	}
	return *o.Html
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbedUrlMetadata) GetHtmlOk() (*OgObject, bool) {
	if o == nil || IsNil(o.Html) {
		return nil, false
	}
	return o.Html, true
}

// HasHtml returns a boolean if a field has been set.
func (o *EmbedUrlMetadata) HasHtml() bool {
	if o != nil && !IsNil(o.Html) {
		return true
	}

	return false
}

// SetHtml gets a reference to the given OgObject and assigns it to the Html field.
func (o *EmbedUrlMetadata) SetHtml(v OgObject) {
	o.Html = &v
}

func (o EmbedUrlMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbedUrlMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_status"] = o.Status
	if o.ContentType.IsSet() {
		toSerialize["content_type"] = o.ContentType.Get()
	}
	if o.ContentLength.IsSet() {
		toSerialize["content_length"] = o.ContentLength.Get()
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Video) {
		toSerialize["video"] = o.Video
	}
	if !IsNil(o.Html) {
		toSerialize["html"] = o.Html
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EmbedUrlMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbedUrlMetadata := _EmbedUrlMetadata{}

	err = json.Unmarshal(data, &varEmbedUrlMetadata)

	if err != nil {
		return err
	}

	*o = EmbedUrlMetadata(varEmbedUrlMetadata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_status")
		delete(additionalProperties, "content_type")
		delete(additionalProperties, "content_length")
		delete(additionalProperties, "image")
		delete(additionalProperties, "video")
		delete(additionalProperties, "html")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEmbedUrlMetadata struct {
	value *EmbedUrlMetadata
	isSet bool
}

func (v NullableEmbedUrlMetadata) Get() *EmbedUrlMetadata {
	return v.value
}

func (v *NullableEmbedUrlMetadata) Set(val *EmbedUrlMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbedUrlMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbedUrlMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbedUrlMetadata(val *EmbedUrlMetadata) *NullableEmbedUrlMetadata {
	return &NullableEmbedUrlMetadata{value: val, isSet: true}
}

func (v NullableEmbedUrlMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbedUrlMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


