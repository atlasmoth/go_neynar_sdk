/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ChannelSearchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelSearchResponse{}

// ChannelSearchResponse struct for ChannelSearchResponse
type ChannelSearchResponse struct {
	Channels []Channel `json:"channels"`
	Next NextCursor `json:"next"`
	AdditionalProperties map[string]interface{}
}

type _ChannelSearchResponse ChannelSearchResponse

// NewChannelSearchResponse instantiates a new ChannelSearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelSearchResponse(channels []Channel, next NextCursor) *ChannelSearchResponse {
	this := ChannelSearchResponse{}
	this.Channels = channels
	this.Next = next
	return &this
}

// NewChannelSearchResponseWithDefaults instantiates a new ChannelSearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelSearchResponseWithDefaults() *ChannelSearchResponse {
	this := ChannelSearchResponse{}
	return &this
}

// GetChannels returns the Channels field value
func (o *ChannelSearchResponse) GetChannels() []Channel {
	if o == nil {
		var ret []Channel
		return ret
	}

	return o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value
// and a boolean to check if the value has been set.
func (o *ChannelSearchResponse) GetChannelsOk() ([]Channel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Channels, true
}

// SetChannels sets field value
func (o *ChannelSearchResponse) SetChannels(v []Channel) {
	o.Channels = v
}

// GetNext returns the Next field value
func (o *ChannelSearchResponse) GetNext() NextCursor {
	if o == nil {
		var ret NextCursor
		return ret
	}

	return o.Next
}

// GetNextOk returns a tuple with the Next field value
// and a boolean to check if the value has been set.
func (o *ChannelSearchResponse) GetNextOk() (*NextCursor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Next, true
}

// SetNext sets field value
func (o *ChannelSearchResponse) SetNext(v NextCursor) {
	o.Next = v
}

func (o ChannelSearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelSearchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["channels"] = o.Channels
	toSerialize["next"] = o.Next

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChannelSearchResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"channels",
		"next",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChannelSearchResponse := _ChannelSearchResponse{}

	err = json.Unmarshal(data, &varChannelSearchResponse)

	if err != nil {
		return err
	}

	*o = ChannelSearchResponse(varChannelSearchResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "channels")
		delete(additionalProperties, "next")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChannelSearchResponse struct {
	value *ChannelSearchResponse
	isSet bool
}

func (v NullableChannelSearchResponse) Get() *ChannelSearchResponse {
	return v.value
}

func (v *NullableChannelSearchResponse) Set(val *ChannelSearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelSearchResponse(val *ChannelSearchResponse) *NullableChannelSearchResponse {
	return &NullableChannelSearchResponse{value: val, isSet: true}
}

func (v NullableChannelSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


