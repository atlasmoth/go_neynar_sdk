/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PostCastResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostCastResponse{}

// PostCastResponse struct for PostCastResponse
type PostCastResponse struct {
	Success *bool `json:"success,omitempty"`
	Cast *PostCastResponseCast `json:"cast,omitempty"`
}

// NewPostCastResponse instantiates a new PostCastResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostCastResponse() *PostCastResponse {
	this := PostCastResponse{}
	return &this
}

// NewPostCastResponseWithDefaults instantiates a new PostCastResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostCastResponseWithDefaults() *PostCastResponse {
	this := PostCastResponse{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *PostCastResponse) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCastResponse) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *PostCastResponse) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *PostCastResponse) SetSuccess(v bool) {
	o.Success = &v
}

// GetCast returns the Cast field value if set, zero value otherwise.
func (o *PostCastResponse) GetCast() PostCastResponseCast {
	if o == nil || IsNil(o.Cast) {
		var ret PostCastResponseCast
		return ret
	}
	return *o.Cast
}

// GetCastOk returns a tuple with the Cast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCastResponse) GetCastOk() (*PostCastResponseCast, bool) {
	if o == nil || IsNil(o.Cast) {
		return nil, false
	}
	return o.Cast, true
}

// HasCast returns a boolean if a field has been set.
func (o *PostCastResponse) HasCast() bool {
	if o != nil && !IsNil(o.Cast) {
		return true
	}

	return false
}

// SetCast gets a reference to the given PostCastResponseCast and assigns it to the Cast field.
func (o *PostCastResponse) SetCast(v PostCastResponseCast) {
	o.Cast = &v
}

func (o PostCastResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostCastResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Cast) {
		toSerialize["cast"] = o.Cast
	}
	return toSerialize, nil
}

type NullablePostCastResponse struct {
	value *PostCastResponse
	isSet bool
}

func (v NullablePostCastResponse) Get() *PostCastResponse {
	return v.value
}

func (v *NullablePostCastResponse) Set(val *PostCastResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePostCastResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePostCastResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostCastResponse(val *PostCastResponse) *NullablePostCastResponse {
	return &NullablePostCastResponse{value: val, isSet: true}
}

func (v NullablePostCastResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostCastResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


