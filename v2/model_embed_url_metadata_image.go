/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EmbedUrlMetadataImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbedUrlMetadataImage{}

// EmbedUrlMetadataImage struct for EmbedUrlMetadataImage
type EmbedUrlMetadataImage struct {
	HeightPx *int32 `json:"height_px,omitempty"`
	WidthPx *int32 `json:"width_px,omitempty"`
}

// NewEmbedUrlMetadataImage instantiates a new EmbedUrlMetadataImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbedUrlMetadataImage() *EmbedUrlMetadataImage {
	this := EmbedUrlMetadataImage{}
	return &this
}

// NewEmbedUrlMetadataImageWithDefaults instantiates a new EmbedUrlMetadataImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbedUrlMetadataImageWithDefaults() *EmbedUrlMetadataImage {
	this := EmbedUrlMetadataImage{}
	return &this
}

// GetHeightPx returns the HeightPx field value if set, zero value otherwise.
func (o *EmbedUrlMetadataImage) GetHeightPx() int32 {
	if o == nil || IsNil(o.HeightPx) {
		var ret int32
		return ret
	}
	return *o.HeightPx
}

// GetHeightPxOk returns a tuple with the HeightPx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbedUrlMetadataImage) GetHeightPxOk() (*int32, bool) {
	if o == nil || IsNil(o.HeightPx) {
		return nil, false
	}
	return o.HeightPx, true
}

// HasHeightPx returns a boolean if a field has been set.
func (o *EmbedUrlMetadataImage) HasHeightPx() bool {
	if o != nil && !IsNil(o.HeightPx) {
		return true
	}

	return false
}

// SetHeightPx gets a reference to the given int32 and assigns it to the HeightPx field.
func (o *EmbedUrlMetadataImage) SetHeightPx(v int32) {
	o.HeightPx = &v
}

// GetWidthPx returns the WidthPx field value if set, zero value otherwise.
func (o *EmbedUrlMetadataImage) GetWidthPx() int32 {
	if o == nil || IsNil(o.WidthPx) {
		var ret int32
		return ret
	}
	return *o.WidthPx
}

// GetWidthPxOk returns a tuple with the WidthPx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbedUrlMetadataImage) GetWidthPxOk() (*int32, bool) {
	if o == nil || IsNil(o.WidthPx) {
		return nil, false
	}
	return o.WidthPx, true
}

// HasWidthPx returns a boolean if a field has been set.
func (o *EmbedUrlMetadataImage) HasWidthPx() bool {
	if o != nil && !IsNil(o.WidthPx) {
		return true
	}

	return false
}

// SetWidthPx gets a reference to the given int32 and assigns it to the WidthPx field.
func (o *EmbedUrlMetadataImage) SetWidthPx(v int32) {
	o.WidthPx = &v
}

func (o EmbedUrlMetadataImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbedUrlMetadataImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HeightPx) {
		toSerialize["height_px"] = o.HeightPx
	}
	if !IsNil(o.WidthPx) {
		toSerialize["width_px"] = o.WidthPx
	}
	return toSerialize, nil
}

type NullableEmbedUrlMetadataImage struct {
	value *EmbedUrlMetadataImage
	isSet bool
}

func (v NullableEmbedUrlMetadataImage) Get() *EmbedUrlMetadataImage {
	return v.value
}

func (v *NullableEmbedUrlMetadataImage) Set(val *EmbedUrlMetadataImage) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbedUrlMetadataImage) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbedUrlMetadataImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbedUrlMetadataImage(val *EmbedUrlMetadataImage) *NullableEmbedUrlMetadataImage {
	return &NullableEmbedUrlMetadataImage{value: val, isSet: true}
}

func (v NullableEmbedUrlMetadataImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbedUrlMetadataImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


