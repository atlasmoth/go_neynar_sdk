/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConversationConversation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversationConversation{}

// ConversationConversation struct for ConversationConversation
type ConversationConversation struct {
	Cast *CastWithInteractionsAndConversations `json:"cast,omitempty"`
	ChronologicalParentCasts []CastWithInteractions `json:"chronological_parent_casts,omitempty"`
}

// NewConversationConversation instantiates a new ConversationConversation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversationConversation() *ConversationConversation {
	this := ConversationConversation{}
	return &this
}

// NewConversationConversationWithDefaults instantiates a new ConversationConversation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversationConversationWithDefaults() *ConversationConversation {
	this := ConversationConversation{}
	return &this
}

// GetCast returns the Cast field value if set, zero value otherwise.
func (o *ConversationConversation) GetCast() CastWithInteractionsAndConversations {
	if o == nil || IsNil(o.Cast) {
		var ret CastWithInteractionsAndConversations
		return ret
	}
	return *o.Cast
}

// GetCastOk returns a tuple with the Cast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationConversation) GetCastOk() (*CastWithInteractionsAndConversations, bool) {
	if o == nil || IsNil(o.Cast) {
		return nil, false
	}
	return o.Cast, true
}

// HasCast returns a boolean if a field has been set.
func (o *ConversationConversation) HasCast() bool {
	if o != nil && !IsNil(o.Cast) {
		return true
	}

	return false
}

// SetCast gets a reference to the given CastWithInteractionsAndConversations and assigns it to the Cast field.
func (o *ConversationConversation) SetCast(v CastWithInteractionsAndConversations) {
	o.Cast = &v
}

// GetChronologicalParentCasts returns the ChronologicalParentCasts field value if set, zero value otherwise.
func (o *ConversationConversation) GetChronologicalParentCasts() []CastWithInteractions {
	if o == nil || IsNil(o.ChronologicalParentCasts) {
		var ret []CastWithInteractions
		return ret
	}
	return o.ChronologicalParentCasts
}

// GetChronologicalParentCastsOk returns a tuple with the ChronologicalParentCasts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationConversation) GetChronologicalParentCastsOk() ([]CastWithInteractions, bool) {
	if o == nil || IsNil(o.ChronologicalParentCasts) {
		return nil, false
	}
	return o.ChronologicalParentCasts, true
}

// HasChronologicalParentCasts returns a boolean if a field has been set.
func (o *ConversationConversation) HasChronologicalParentCasts() bool {
	if o != nil && !IsNil(o.ChronologicalParentCasts) {
		return true
	}

	return false
}

// SetChronologicalParentCasts gets a reference to the given []CastWithInteractions and assigns it to the ChronologicalParentCasts field.
func (o *ConversationConversation) SetChronologicalParentCasts(v []CastWithInteractions) {
	o.ChronologicalParentCasts = v
}

func (o ConversationConversation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversationConversation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cast) {
		toSerialize["cast"] = o.Cast
	}
	if !IsNil(o.ChronologicalParentCasts) {
		toSerialize["chronological_parent_casts"] = o.ChronologicalParentCasts
	}
	return toSerialize, nil
}

type NullableConversationConversation struct {
	value *ConversationConversation
	isSet bool
}

func (v NullableConversationConversation) Get() *ConversationConversation {
	return v.value
}

func (v *NullableConversationConversation) Set(val *ConversationConversation) {
	v.value = val
	v.isSet = true
}

func (v NullableConversationConversation) IsSet() bool {
	return v.isSet
}

func (v *NullableConversationConversation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversationConversation(val *ConversationConversation) *NullableConversationConversation {
	return &NullableConversationConversation{value: val, isSet: true}
}

func (v NullableConversationConversation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversationConversation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


