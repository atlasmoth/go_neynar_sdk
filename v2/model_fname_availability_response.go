/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FnameAvailabilityResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FnameAvailabilityResponse{}

// FnameAvailabilityResponse struct for FnameAvailabilityResponse
type FnameAvailabilityResponse struct {
	Available *bool `json:"available,omitempty"`
}

// NewFnameAvailabilityResponse instantiates a new FnameAvailabilityResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFnameAvailabilityResponse() *FnameAvailabilityResponse {
	this := FnameAvailabilityResponse{}
	return &this
}

// NewFnameAvailabilityResponseWithDefaults instantiates a new FnameAvailabilityResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFnameAvailabilityResponseWithDefaults() *FnameAvailabilityResponse {
	this := FnameAvailabilityResponse{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *FnameAvailabilityResponse) GetAvailable() bool {
	if o == nil || IsNil(o.Available) {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FnameAvailabilityResponse) GetAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *FnameAvailabilityResponse) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *FnameAvailabilityResponse) SetAvailable(v bool) {
	o.Available = &v
}

func (o FnameAvailabilityResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FnameAvailabilityResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	return toSerialize, nil
}

type NullableFnameAvailabilityResponse struct {
	value *FnameAvailabilityResponse
	isSet bool
}

func (v NullableFnameAvailabilityResponse) Get() *FnameAvailabilityResponse {
	return v.value
}

func (v *NullableFnameAvailabilityResponse) Set(val *FnameAvailabilityResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFnameAvailabilityResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFnameAvailabilityResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFnameAvailabilityResponse(val *FnameAvailabilityResponse) *NullableFnameAvailabilityResponse {
	return &NullableFnameAvailabilityResponse{value: val, isSet: true}
}

func (v NullableFnameAvailabilityResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFnameAvailabilityResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


