/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EmbedType The content type of the embedded file
type EmbedType string

// List of EmbedType
const (
	EMBEDTYPE_TEXT EmbedType = "text"
	EMBEDTYPE_IMAGE EmbedType = "image"
	EMBEDTYPE_VIDEO EmbedType = "video"
	EMBEDTYPE_AUDIO EmbedType = "audio"
	EMBEDTYPE_TEXT_HTML EmbedType = "text/html"
	EMBEDTYPE_TEXT_PLAIN EmbedType = "text/plain"
	EMBEDTYPE_IMAGE_JPEG EmbedType = "image/jpeg"
	EMBEDTYPE_IMAGE_PNG EmbedType = "image/png"
	EMBEDTYPE_IMAGE_GIF EmbedType = "image/gif"
	EMBEDTYPE_IMAGE_WEBP EmbedType = "image/webp"
	EMBEDTYPE_IMAGE_SVGXML EmbedType = "image/svg+xml"
	EMBEDTYPE_IMAGE_HEIF EmbedType = "image/heif"
	EMBEDTYPE_VIDEO_MP4 EmbedType = "video/mp4"
	EMBEDTYPE_VIDEO_QUICKTIME EmbedType = "video/quicktime"
	EMBEDTYPE_AUDIO_MPEG EmbedType = "audio/mpeg"
	EMBEDTYPE_APPLICATION_PDF EmbedType = "application/pdf"
	EMBEDTYPE_APPLICATION_JSON EmbedType = "application/json"
	EMBEDTYPE_APPLICATION_X_MPEGURL EmbedType = "application/x-mpegurl"
)

// All allowed values of EmbedType enum
var AllowedEmbedTypeEnumValues = []EmbedType{
	"text",
	"image",
	"video",
	"audio",
	"text/html",
	"text/plain",
	"image/jpeg",
	"image/png",
	"image/gif",
	"image/webp",
	"image/svg+xml",
	"image/heif",
	"video/mp4",
	"video/quicktime",
	"audio/mpeg",
	"application/pdf",
	"application/json",
	"application/x-mpegurl",
}

func (v *EmbedType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EmbedType(value)
	for _, existing := range AllowedEmbedTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EmbedType", value)
}

// NewEmbedTypeFromValue returns a pointer to a valid EmbedType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmbedTypeFromValue(v string) (*EmbedType, error) {
	ev := EmbedType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EmbedType: valid values are %v", v, AllowedEmbedTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EmbedType) IsValid() bool {
	for _, existing := range AllowedEmbedTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EmbedType value
func (v EmbedType) Ptr() *EmbedType {
	return &v
}

type NullableEmbedType struct {
	value *EmbedType
	isSet bool
}

func (v NullableEmbedType) Get() *EmbedType {
	return v.value
}

func (v *NullableEmbedType) Set(val *EmbedType) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbedType) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbedType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbedType(val *EmbedType) *NullableEmbedType {
	return &NullableEmbedType{value: val, isSet: true}
}

func (v NullableEmbedType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbedType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

