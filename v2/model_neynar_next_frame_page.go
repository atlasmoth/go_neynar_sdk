/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the NeynarNextFramePage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NeynarNextFramePage{}

// NeynarNextFramePage struct for NeynarNextFramePage
type NeynarNextFramePage struct {
	// The UUID of the next page.
	Uuid string `json:"uuid"`
	AdditionalProperties map[string]interface{}
}

type _NeynarNextFramePage NeynarNextFramePage

// NewNeynarNextFramePage instantiates a new NeynarNextFramePage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNeynarNextFramePage(uuid string) *NeynarNextFramePage {
	this := NeynarNextFramePage{}
	this.Uuid = uuid
	return &this
}

// NewNeynarNextFramePageWithDefaults instantiates a new NeynarNextFramePage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNeynarNextFramePageWithDefaults() *NeynarNextFramePage {
	this := NeynarNextFramePage{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *NeynarNextFramePage) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *NeynarNextFramePage) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *NeynarNextFramePage) SetUuid(v string) {
	o.Uuid = v
}

func (o NeynarNextFramePage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NeynarNextFramePage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NeynarNextFramePage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNeynarNextFramePage := _NeynarNextFramePage{}

	err = json.Unmarshal(data, &varNeynarNextFramePage)

	if err != nil {
		return err
	}

	*o = NeynarNextFramePage(varNeynarNextFramePage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNeynarNextFramePage struct {
	value *NeynarNextFramePage
	isSet bool
}

func (v NullableNeynarNextFramePage) Get() *NeynarNextFramePage {
	return v.value
}

func (v *NullableNeynarNextFramePage) Set(val *NeynarNextFramePage) {
	v.value = val
	v.isSet = true
}

func (v NullableNeynarNextFramePage) IsSet() bool {
	return v.isSet
}

func (v *NullableNeynarNextFramePage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNeynarNextFramePage(val *NeynarNextFramePage) *NullableNeynarNextFramePage {
	return &NullableNeynarNextFramePage{value: val, isSet: true}
}

func (v NullableNeynarNextFramePage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNeynarNextFramePage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


