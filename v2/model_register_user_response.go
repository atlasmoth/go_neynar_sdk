/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RegisterUserResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterUserResponse{}

// RegisterUserResponse struct for RegisterUserResponse
type RegisterUserResponse struct {
	Success *bool `json:"success,omitempty"`
	Message *string `json:"message,omitempty"`
	Signer *Signer `json:"signer,omitempty"`
}

// NewRegisterUserResponse instantiates a new RegisterUserResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterUserResponse() *RegisterUserResponse {
	this := RegisterUserResponse{}
	return &this
}

// NewRegisterUserResponseWithDefaults instantiates a new RegisterUserResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterUserResponseWithDefaults() *RegisterUserResponse {
	this := RegisterUserResponse{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *RegisterUserResponse) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterUserResponse) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *RegisterUserResponse) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *RegisterUserResponse) SetSuccess(v bool) {
	o.Success = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *RegisterUserResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterUserResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *RegisterUserResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *RegisterUserResponse) SetMessage(v string) {
	o.Message = &v
}

// GetSigner returns the Signer field value if set, zero value otherwise.
func (o *RegisterUserResponse) GetSigner() Signer {
	if o == nil || IsNil(o.Signer) {
		var ret Signer
		return ret
	}
	return *o.Signer
}

// GetSignerOk returns a tuple with the Signer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterUserResponse) GetSignerOk() (*Signer, bool) {
	if o == nil || IsNil(o.Signer) {
		return nil, false
	}
	return o.Signer, true
}

// HasSigner returns a boolean if a field has been set.
func (o *RegisterUserResponse) HasSigner() bool {
	if o != nil && !IsNil(o.Signer) {
		return true
	}

	return false
}

// SetSigner gets a reference to the given Signer and assigns it to the Signer field.
func (o *RegisterUserResponse) SetSigner(v Signer) {
	o.Signer = &v
}

func (o RegisterUserResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterUserResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Signer) {
		toSerialize["signer"] = o.Signer
	}
	return toSerialize, nil
}

type NullableRegisterUserResponse struct {
	value *RegisterUserResponse
	isSet bool
}

func (v NullableRegisterUserResponse) Get() *RegisterUserResponse {
	return v.value
}

func (v *NullableRegisterUserResponse) Set(val *RegisterUserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterUserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterUserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterUserResponse(val *RegisterUserResponse) *NullableRegisterUserResponse {
	return &NullableRegisterUserResponse{value: val, isSet: true}
}

func (v NullableRegisterUserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterUserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


