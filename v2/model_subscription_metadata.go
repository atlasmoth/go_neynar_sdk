/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubscriptionMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionMetadata{}

// SubscriptionMetadata struct for SubscriptionMetadata
type SubscriptionMetadata struct {
	Title *string `json:"title,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	ArtUrl *string `json:"art_url,omitempty"`
}

// NewSubscriptionMetadata instantiates a new SubscriptionMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionMetadata() *SubscriptionMetadata {
	this := SubscriptionMetadata{}
	return &this
}

// NewSubscriptionMetadataWithDefaults instantiates a new SubscriptionMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionMetadataWithDefaults() *SubscriptionMetadata {
	this := SubscriptionMetadata{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SubscriptionMetadata) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionMetadata) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SubscriptionMetadata) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SubscriptionMetadata) SetTitle(v string) {
	o.Title = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *SubscriptionMetadata) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionMetadata) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *SubscriptionMetadata) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *SubscriptionMetadata) SetSymbol(v string) {
	o.Symbol = &v
}

// GetArtUrl returns the ArtUrl field value if set, zero value otherwise.
func (o *SubscriptionMetadata) GetArtUrl() string {
	if o == nil || IsNil(o.ArtUrl) {
		var ret string
		return ret
	}
	return *o.ArtUrl
}

// GetArtUrlOk returns a tuple with the ArtUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionMetadata) GetArtUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ArtUrl) {
		return nil, false
	}
	return o.ArtUrl, true
}

// HasArtUrl returns a boolean if a field has been set.
func (o *SubscriptionMetadata) HasArtUrl() bool {
	if o != nil && !IsNil(o.ArtUrl) {
		return true
	}

	return false
}

// SetArtUrl gets a reference to the given string and assigns it to the ArtUrl field.
func (o *SubscriptionMetadata) SetArtUrl(v string) {
	o.ArtUrl = &v
}

func (o SubscriptionMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.ArtUrl) {
		toSerialize["art_url"] = o.ArtUrl
	}
	return toSerialize, nil
}

type NullableSubscriptionMetadata struct {
	value *SubscriptionMetadata
	isSet bool
}

func (v NullableSubscriptionMetadata) Get() *SubscriptionMetadata {
	return v.value
}

func (v *NullableSubscriptionMetadata) Set(val *SubscriptionMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionMetadata(val *SubscriptionMetadata) *NullableSubscriptionMetadata {
	return &NullableSubscriptionMetadata{value: val, isSet: true}
}

func (v NullableSubscriptionMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


