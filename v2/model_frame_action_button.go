/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the FrameActionButton type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameActionButton{}

// FrameActionButton struct for FrameActionButton
type FrameActionButton struct {
	// Title of the button
	Title *string `json:"title,omitempty"`
	// Index of the button
	Index int32 `json:"index"`
	ActionType FrameButtonActionType `json:"action_type"`
	// Target of the button
	Target *string `json:"target,omitempty"`
	// Used specifically for the tx action type to post a successful transaction hash
	PostUrl *string `json:"post_url,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FrameActionButton FrameActionButton

// NewFrameActionButton instantiates a new FrameActionButton object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameActionButton(index int32, actionType FrameButtonActionType) *FrameActionButton {
	this := FrameActionButton{}
	this.Index = index
	this.ActionType = actionType
	return &this
}

// NewFrameActionButtonWithDefaults instantiates a new FrameActionButton object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameActionButtonWithDefaults() *FrameActionButton {
	this := FrameActionButton{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *FrameActionButton) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameActionButton) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *FrameActionButton) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *FrameActionButton) SetTitle(v string) {
	o.Title = &v
}

// GetIndex returns the Index field value
func (o *FrameActionButton) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *FrameActionButton) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *FrameActionButton) SetIndex(v int32) {
	o.Index = v
}

// GetActionType returns the ActionType field value
func (o *FrameActionButton) GetActionType() FrameButtonActionType {
	if o == nil {
		var ret FrameButtonActionType
		return ret
	}

	return o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value
// and a boolean to check if the value has been set.
func (o *FrameActionButton) GetActionTypeOk() (*FrameButtonActionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionType, true
}

// SetActionType sets field value
func (o *FrameActionButton) SetActionType(v FrameButtonActionType) {
	o.ActionType = v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *FrameActionButton) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameActionButton) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *FrameActionButton) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *FrameActionButton) SetTarget(v string) {
	o.Target = &v
}

// GetPostUrl returns the PostUrl field value if set, zero value otherwise.
func (o *FrameActionButton) GetPostUrl() string {
	if o == nil || IsNil(o.PostUrl) {
		var ret string
		return ret
	}
	return *o.PostUrl
}

// GetPostUrlOk returns a tuple with the PostUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameActionButton) GetPostUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PostUrl) {
		return nil, false
	}
	return o.PostUrl, true
}

// HasPostUrl returns a boolean if a field has been set.
func (o *FrameActionButton) HasPostUrl() bool {
	if o != nil && !IsNil(o.PostUrl) {
		return true
	}

	return false
}

// SetPostUrl gets a reference to the given string and assigns it to the PostUrl field.
func (o *FrameActionButton) SetPostUrl(v string) {
	o.PostUrl = &v
}

func (o FrameActionButton) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameActionButton) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	toSerialize["index"] = o.Index
	toSerialize["action_type"] = o.ActionType
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.PostUrl) {
		toSerialize["post_url"] = o.PostUrl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FrameActionButton) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"index",
		"action_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFrameActionButton := _FrameActionButton{}

	err = json.Unmarshal(data, &varFrameActionButton)

	if err != nil {
		return err
	}

	*o = FrameActionButton(varFrameActionButton)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "title")
		delete(additionalProperties, "index")
		delete(additionalProperties, "action_type")
		delete(additionalProperties, "target")
		delete(additionalProperties, "post_url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFrameActionButton struct {
	value *FrameActionButton
	isSet bool
}

func (v NullableFrameActionButton) Get() *FrameActionButton {
	return v.value
}

func (v *NullableFrameActionButton) Set(val *FrameActionButton) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameActionButton) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameActionButton) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameActionButton(val *FrameActionButton) *NullableFrameActionButton {
	return &NullableFrameActionButton{value: val, isSet: true}
}

func (v NullableFrameActionButton) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameActionButton) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


