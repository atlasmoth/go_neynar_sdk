/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FrameInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameInput{}

// FrameInput struct for FrameInput
type FrameInput struct {
	// Input text for the frame
	Text *string `json:"text,omitempty"`
}

// NewFrameInput instantiates a new FrameInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameInput() *FrameInput {
	this := FrameInput{}
	return &this
}

// NewFrameInputWithDefaults instantiates a new FrameInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameInputWithDefaults() *FrameInput {
	this := FrameInput{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *FrameInput) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameInput) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *FrameInput) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *FrameInput) SetText(v string) {
	o.Text = &v
}

func (o FrameInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return toSerialize, nil
}

type NullableFrameInput struct {
	value *FrameInput
	isSet bool
}

func (v NullableFrameInput) Get() *FrameInput {
	return v.value
}

func (v *NullableFrameInput) Set(val *FrameInput) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameInput) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameInput(val *FrameInput) *NullableFrameInput {
	return &NullableFrameInput{value: val, isSet: true}
}

func (v NullableFrameInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


