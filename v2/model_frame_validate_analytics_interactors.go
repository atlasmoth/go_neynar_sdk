/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FrameValidateAnalyticsInteractors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrameValidateAnalyticsInteractors{}

// FrameValidateAnalyticsInteractors struct for FrameValidateAnalyticsInteractors
type FrameValidateAnalyticsInteractors struct {
	Interactors []FrameValidateAnalyticsInteractorsInteractorsInner `json:"interactors,omitempty"`
}

// NewFrameValidateAnalyticsInteractors instantiates a new FrameValidateAnalyticsInteractors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrameValidateAnalyticsInteractors() *FrameValidateAnalyticsInteractors {
	this := FrameValidateAnalyticsInteractors{}
	return &this
}

// NewFrameValidateAnalyticsInteractorsWithDefaults instantiates a new FrameValidateAnalyticsInteractors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrameValidateAnalyticsInteractorsWithDefaults() *FrameValidateAnalyticsInteractors {
	this := FrameValidateAnalyticsInteractors{}
	return &this
}

// GetInteractors returns the Interactors field value if set, zero value otherwise.
func (o *FrameValidateAnalyticsInteractors) GetInteractors() []FrameValidateAnalyticsInteractorsInteractorsInner {
	if o == nil || IsNil(o.Interactors) {
		var ret []FrameValidateAnalyticsInteractorsInteractorsInner
		return ret
	}
	return o.Interactors
}

// GetInteractorsOk returns a tuple with the Interactors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrameValidateAnalyticsInteractors) GetInteractorsOk() ([]FrameValidateAnalyticsInteractorsInteractorsInner, bool) {
	if o == nil || IsNil(o.Interactors) {
		return nil, false
	}
	return o.Interactors, true
}

// HasInteractors returns a boolean if a field has been set.
func (o *FrameValidateAnalyticsInteractors) HasInteractors() bool {
	if o != nil && !IsNil(o.Interactors) {
		return true
	}

	return false
}

// SetInteractors gets a reference to the given []FrameValidateAnalyticsInteractorsInteractorsInner and assigns it to the Interactors field.
func (o *FrameValidateAnalyticsInteractors) SetInteractors(v []FrameValidateAnalyticsInteractorsInteractorsInner) {
	o.Interactors = v
}

func (o FrameValidateAnalyticsInteractors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrameValidateAnalyticsInteractors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Interactors) {
		toSerialize["interactors"] = o.Interactors
	}
	return toSerialize, nil
}

type NullableFrameValidateAnalyticsInteractors struct {
	value *FrameValidateAnalyticsInteractors
	isSet bool
}

func (v NullableFrameValidateAnalyticsInteractors) Get() *FrameValidateAnalyticsInteractors {
	return v.value
}

func (v *NullableFrameValidateAnalyticsInteractors) Set(val *FrameValidateAnalyticsInteractors) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameValidateAnalyticsInteractors) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameValidateAnalyticsInteractors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameValidateAnalyticsInteractors(val *FrameValidateAnalyticsInteractors) *NullableFrameValidateAnalyticsInteractors {
	return &NullableFrameValidateAnalyticsInteractors{value: val, isSet: true}
}

func (v NullableFrameValidateAnalyticsInteractors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameValidateAnalyticsInteractors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


