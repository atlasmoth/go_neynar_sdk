/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FeedTrendingProvider The provider of the trending casts feed. 
type FeedTrendingProvider string

// List of FeedTrendingProvider
const (
	FEEDTRENDINGPROVIDER_NEYNAR FeedTrendingProvider = "neynar"
	FEEDTRENDINGPROVIDER_OPENRANK FeedTrendingProvider = "openrank"
)

// All allowed values of FeedTrendingProvider enum
var AllowedFeedTrendingProviderEnumValues = []FeedTrendingProvider{
	"neynar",
	"openrank",
}

func (v *FeedTrendingProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FeedTrendingProvider(value)
	for _, existing := range AllowedFeedTrendingProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FeedTrendingProvider", value)
}

// NewFeedTrendingProviderFromValue returns a pointer to a valid FeedTrendingProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeedTrendingProviderFromValue(v string) (*FeedTrendingProvider, error) {
	ev := FeedTrendingProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FeedTrendingProvider: valid values are %v", v, AllowedFeedTrendingProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FeedTrendingProvider) IsValid() bool {
	for _, existing := range AllowedFeedTrendingProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeedTrendingProvider value
func (v FeedTrendingProvider) Ptr() *FeedTrendingProvider {
	return &v
}

type NullableFeedTrendingProvider struct {
	value *FeedTrendingProvider
	isSet bool
}

func (v NullableFeedTrendingProvider) Get() *FeedTrendingProvider {
	return v.value
}

func (v *NullableFeedTrendingProvider) Set(val *FeedTrendingProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedTrendingProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedTrendingProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedTrendingProvider(val *FeedTrendingProvider) *NullableFeedTrendingProvider {
	return &NullableFeedTrendingProvider{value: val, isSet: true}
}

func (v NullableFeedTrendingProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedTrendingProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

