/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// FeedTrending400Response - struct for FeedTrending400Response
type FeedTrending400Response struct {
	ErrorRes *ErrorRes
	ZodError *ZodError
}

// ErrorResAsFeedTrending400Response is a convenience function that returns ErrorRes wrapped in FeedTrending400Response
func ErrorResAsFeedTrending400Response(v *ErrorRes) FeedTrending400Response {
	return FeedTrending400Response{
		ErrorRes: v,
	}
}

// ZodErrorAsFeedTrending400Response is a convenience function that returns ZodError wrapped in FeedTrending400Response
func ZodErrorAsFeedTrending400Response(v *ZodError) FeedTrending400Response {
	return FeedTrending400Response{
		ZodError: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FeedTrending400Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ErrorRes
	err = newStrictDecoder(data).Decode(&dst.ErrorRes)
	if err == nil {
		jsonErrorRes, _ := json.Marshal(dst.ErrorRes)
		if string(jsonErrorRes) == "{}" { // empty struct
			dst.ErrorRes = nil
		} else {
			if err = validator.Validate(dst.ErrorRes); err != nil {
				dst.ErrorRes = nil
			} else {
				match++
			}
		}
	} else {
		dst.ErrorRes = nil
	}

	// try to unmarshal data into ZodError
	err = newStrictDecoder(data).Decode(&dst.ZodError)
	if err == nil {
		jsonZodError, _ := json.Marshal(dst.ZodError)
		if string(jsonZodError) == "{}" { // empty struct
			dst.ZodError = nil
		} else {
			if err = validator.Validate(dst.ZodError); err != nil {
				dst.ZodError = nil
			} else {
				match++
			}
		}
	} else {
		dst.ZodError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ErrorRes = nil
		dst.ZodError = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FeedTrending400Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FeedTrending400Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FeedTrending400Response) MarshalJSON() ([]byte, error) {
	if src.ErrorRes != nil {
		return json.Marshal(&src.ErrorRes)
	}

	if src.ZodError != nil {
		return json.Marshal(&src.ZodError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FeedTrending400Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ErrorRes != nil {
		return obj.ErrorRes
	}

	if obj.ZodError != nil {
		return obj.ZodError
	}

	// all schemas are nil
	return nil
}

type NullableFeedTrending400Response struct {
	value *FeedTrending400Response
	isSet bool
}

func (v NullableFeedTrending400Response) Get() *FeedTrending400Response {
	return v.value
}

func (v *NullableFeedTrending400Response) Set(val *FeedTrending400Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedTrending400Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedTrending400Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedTrending400Response(val *FeedTrending400Response) *NullableFeedTrending400Response {
	return &NullableFeedTrending400Response{value: val, isSet: true}
}

func (v NullableFeedTrending400Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedTrending400Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


