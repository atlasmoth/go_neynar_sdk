/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the SubscriptionPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPrice{}

// SubscriptionPrice struct for SubscriptionPrice
type SubscriptionPrice struct {
	PeriodDurationSeconds int32 `json:"period_duration_seconds"`
	TokensPerPeriod string `json:"tokens_per_period"`
	InitialMintPrice string `json:"initial_mint_price"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionPrice SubscriptionPrice

// NewSubscriptionPrice instantiates a new SubscriptionPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPrice(periodDurationSeconds int32, tokensPerPeriod string, initialMintPrice string) *SubscriptionPrice {
	this := SubscriptionPrice{}
	this.PeriodDurationSeconds = periodDurationSeconds
	this.TokensPerPeriod = tokensPerPeriod
	this.InitialMintPrice = initialMintPrice
	return &this
}

// NewSubscriptionPriceWithDefaults instantiates a new SubscriptionPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPriceWithDefaults() *SubscriptionPrice {
	this := SubscriptionPrice{}
	return &this
}

// GetPeriodDurationSeconds returns the PeriodDurationSeconds field value
func (o *SubscriptionPrice) GetPeriodDurationSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PeriodDurationSeconds
}

// GetPeriodDurationSecondsOk returns a tuple with the PeriodDurationSeconds field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPrice) GetPeriodDurationSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeriodDurationSeconds, true
}

// SetPeriodDurationSeconds sets field value
func (o *SubscriptionPrice) SetPeriodDurationSeconds(v int32) {
	o.PeriodDurationSeconds = v
}

// GetTokensPerPeriod returns the TokensPerPeriod field value
func (o *SubscriptionPrice) GetTokensPerPeriod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokensPerPeriod
}

// GetTokensPerPeriodOk returns a tuple with the TokensPerPeriod field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPrice) GetTokensPerPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokensPerPeriod, true
}

// SetTokensPerPeriod sets field value
func (o *SubscriptionPrice) SetTokensPerPeriod(v string) {
	o.TokensPerPeriod = v
}

// GetInitialMintPrice returns the InitialMintPrice field value
func (o *SubscriptionPrice) GetInitialMintPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InitialMintPrice
}

// GetInitialMintPriceOk returns a tuple with the InitialMintPrice field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPrice) GetInitialMintPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InitialMintPrice, true
}

// SetInitialMintPrice sets field value
func (o *SubscriptionPrice) SetInitialMintPrice(v string) {
	o.InitialMintPrice = v
}

func (o SubscriptionPrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["period_duration_seconds"] = o.PeriodDurationSeconds
	toSerialize["tokens_per_period"] = o.TokensPerPeriod
	toSerialize["initial_mint_price"] = o.InitialMintPrice

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubscriptionPrice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"period_duration_seconds",
		"tokens_per_period",
		"initial_mint_price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionPrice := _SubscriptionPrice{}

	err = json.Unmarshal(data, &varSubscriptionPrice)

	if err != nil {
		return err
	}

	*o = SubscriptionPrice(varSubscriptionPrice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "period_duration_seconds")
		delete(additionalProperties, "tokens_per_period")
		delete(additionalProperties, "initial_mint_price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionPrice struct {
	value *SubscriptionPrice
	isSet bool
}

func (v NullableSubscriptionPrice) Get() *SubscriptionPrice {
	return v.value
}

func (v *NullableSubscriptionPrice) Set(val *SubscriptionPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPrice(val *SubscriptionPrice) *NullableSubscriptionPrice {
	return &NullableSubscriptionPrice{value: val, isSet: true}
}

func (v NullableSubscriptionPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


