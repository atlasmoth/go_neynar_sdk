/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the EmbedUrl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbedUrl{}

// EmbedUrl struct for EmbedUrl
type EmbedUrl struct {
	Url string `json:"url"`
	Metadata *EmbedUrlMetadata `json:"metadata,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EmbedUrl EmbedUrl

// NewEmbedUrl instantiates a new EmbedUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbedUrl(url string) *EmbedUrl {
	this := EmbedUrl{}
	this.Url = url
	return &this
}

// NewEmbedUrlWithDefaults instantiates a new EmbedUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbedUrlWithDefaults() *EmbedUrl {
	this := EmbedUrl{}
	return &this
}

// GetUrl returns the Url field value
func (o *EmbedUrl) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *EmbedUrl) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *EmbedUrl) SetUrl(v string) {
	o.Url = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *EmbedUrl) GetMetadata() EmbedUrlMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret EmbedUrlMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbedUrl) GetMetadataOk() (*EmbedUrlMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *EmbedUrl) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given EmbedUrlMetadata and assigns it to the Metadata field.
func (o *EmbedUrl) SetMetadata(v EmbedUrlMetadata) {
	o.Metadata = &v
}

func (o EmbedUrl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbedUrl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EmbedUrl) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbedUrl := _EmbedUrl{}

	err = json.Unmarshal(data, &varEmbedUrl)

	if err != nil {
		return err
	}

	*o = EmbedUrl(varEmbedUrl)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "url")
		delete(additionalProperties, "metadata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEmbedUrl struct {
	value *EmbedUrl
	isSet bool
}

func (v NullableEmbedUrl) Get() *EmbedUrl {
	return v.value
}

func (v *NullableEmbedUrl) Set(val *EmbedUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbedUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbedUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbedUrl(val *EmbedUrl) *NullableEmbedUrl {
	return &NullableEmbedUrl{value: val, isSet: true}
}

func (v NullableEmbedUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbedUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


