/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Subscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subscription{}

// Subscription struct for Subscription
type Subscription struct {
	Object string `json:"object"`
	ProviderName *string `json:"provider_name,omitempty"`
	ContractAddress string `json:"contract_address"`
	Chain int32 `json:"chain"`
	Metadata SubscriptionMetadata `json:"metadata"`
	OwnerAddress string `json:"owner_address"`
	Price SubscriptionPrice `json:"price"`
	Tiers []SubscriptionTier `json:"tiers,omitempty"`
	ProtocolVersion int32 `json:"protocol_version"`
	Token SubscriptionToken `json:"token"`
}

type _Subscription Subscription

// NewSubscription instantiates a new Subscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscription(object string, contractAddress string, chain int32, metadata SubscriptionMetadata, ownerAddress string, price SubscriptionPrice, protocolVersion int32, token SubscriptionToken) *Subscription {
	this := Subscription{}
	this.Object = object
	this.ContractAddress = contractAddress
	this.Chain = chain
	this.Metadata = metadata
	this.OwnerAddress = ownerAddress
	this.Price = price
	this.ProtocolVersion = protocolVersion
	this.Token = token
	return &this
}

// NewSubscriptionWithDefaults instantiates a new Subscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionWithDefaults() *Subscription {
	this := Subscription{}
	return &this
}

// GetObject returns the Object field value
func (o *Subscription) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Subscription) SetObject(v string) {
	o.Object = v
}

// GetProviderName returns the ProviderName field value if set, zero value otherwise.
func (o *Subscription) GetProviderName() string {
	if o == nil || IsNil(o.ProviderName) {
		var ret string
		return ret
	}
	return *o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetProviderNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderName) {
		return nil, false
	}
	return o.ProviderName, true
}

// HasProviderName returns a boolean if a field has been set.
func (o *Subscription) HasProviderName() bool {
	if o != nil && !IsNil(o.ProviderName) {
		return true
	}

	return false
}

// SetProviderName gets a reference to the given string and assigns it to the ProviderName field.
func (o *Subscription) SetProviderName(v string) {
	o.ProviderName = &v
}

// GetContractAddress returns the ContractAddress field value
func (o *Subscription) GetContractAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetContractAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractAddress, true
}

// SetContractAddress sets field value
func (o *Subscription) SetContractAddress(v string) {
	o.ContractAddress = v
}

// GetChain returns the Chain field value
func (o *Subscription) GetChain() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Chain
}

// GetChainOk returns a tuple with the Chain field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetChainOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chain, true
}

// SetChain sets field value
func (o *Subscription) SetChain(v int32) {
	o.Chain = v
}

// GetMetadata returns the Metadata field value
func (o *Subscription) GetMetadata() SubscriptionMetadata {
	if o == nil {
		var ret SubscriptionMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetMetadataOk() (*SubscriptionMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *Subscription) SetMetadata(v SubscriptionMetadata) {
	o.Metadata = v
}

// GetOwnerAddress returns the OwnerAddress field value
func (o *Subscription) GetOwnerAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerAddress
}

// GetOwnerAddressOk returns a tuple with the OwnerAddress field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetOwnerAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerAddress, true
}

// SetOwnerAddress sets field value
func (o *Subscription) SetOwnerAddress(v string) {
	o.OwnerAddress = v
}

// GetPrice returns the Price field value
func (o *Subscription) GetPrice() SubscriptionPrice {
	if o == nil {
		var ret SubscriptionPrice
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetPriceOk() (*SubscriptionPrice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Subscription) SetPrice(v SubscriptionPrice) {
	o.Price = v
}

// GetTiers returns the Tiers field value if set, zero value otherwise.
func (o *Subscription) GetTiers() []SubscriptionTier {
	if o == nil || IsNil(o.Tiers) {
		var ret []SubscriptionTier
		return ret
	}
	return o.Tiers
}

// GetTiersOk returns a tuple with the Tiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetTiersOk() ([]SubscriptionTier, bool) {
	if o == nil || IsNil(o.Tiers) {
		return nil, false
	}
	return o.Tiers, true
}

// HasTiers returns a boolean if a field has been set.
func (o *Subscription) HasTiers() bool {
	if o != nil && !IsNil(o.Tiers) {
		return true
	}

	return false
}

// SetTiers gets a reference to the given []SubscriptionTier and assigns it to the Tiers field.
func (o *Subscription) SetTiers(v []SubscriptionTier) {
	o.Tiers = v
}

// GetProtocolVersion returns the ProtocolVersion field value
func (o *Subscription) GetProtocolVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProtocolVersion
}

// GetProtocolVersionOk returns a tuple with the ProtocolVersion field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetProtocolVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProtocolVersion, true
}

// SetProtocolVersion sets field value
func (o *Subscription) SetProtocolVersion(v int32) {
	o.ProtocolVersion = v
}

// GetToken returns the Token field value
func (o *Subscription) GetToken() SubscriptionToken {
	if o == nil {
		var ret SubscriptionToken
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetTokenOk() (*SubscriptionToken, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *Subscription) SetToken(v SubscriptionToken) {
	o.Token = v
}

func (o Subscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	if !IsNil(o.ProviderName) {
		toSerialize["provider_name"] = o.ProviderName
	}
	toSerialize["contract_address"] = o.ContractAddress
	toSerialize["chain"] = o.Chain
	toSerialize["metadata"] = o.Metadata
	toSerialize["owner_address"] = o.OwnerAddress
	toSerialize["price"] = o.Price
	if !IsNil(o.Tiers) {
		toSerialize["tiers"] = o.Tiers
	}
	toSerialize["protocol_version"] = o.ProtocolVersion
	toSerialize["token"] = o.Token
	return toSerialize, nil
}

func (o *Subscription) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"contract_address",
		"chain",
		"metadata",
		"owner_address",
		"price",
		"protocol_version",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscription := _Subscription{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscription)

	if err != nil {
		return err
	}

	*o = Subscription(varSubscription)

	return err
}

type NullableSubscription struct {
	value *Subscription
	isSet bool
}

func (v NullableSubscription) Get() *Subscription {
	return v.value
}

func (v *NullableSubscription) Set(val *Subscription) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscription(val *Subscription) *NullableSubscription {
	return &NullableSubscription{value: val, isSet: true}
}

func (v NullableSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


