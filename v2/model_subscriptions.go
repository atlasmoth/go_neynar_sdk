/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Subscriptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subscriptions{}

// Subscriptions struct for Subscriptions
type Subscriptions struct {
	Object *string `json:"object,omitempty"`
	SubscriptionsCreated []Subscription `json:"subscriptions_created,omitempty"`
}

// NewSubscriptions instantiates a new Subscriptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptions() *Subscriptions {
	this := Subscriptions{}
	return &this
}

// NewSubscriptionsWithDefaults instantiates a new Subscriptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionsWithDefaults() *Subscriptions {
	this := Subscriptions{}
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *Subscriptions) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriptions) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *Subscriptions) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *Subscriptions) SetObject(v string) {
	o.Object = &v
}

// GetSubscriptionsCreated returns the SubscriptionsCreated field value if set, zero value otherwise.
func (o *Subscriptions) GetSubscriptionsCreated() []Subscription {
	if o == nil || IsNil(o.SubscriptionsCreated) {
		var ret []Subscription
		return ret
	}
	return o.SubscriptionsCreated
}

// GetSubscriptionsCreatedOk returns a tuple with the SubscriptionsCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriptions) GetSubscriptionsCreatedOk() ([]Subscription, bool) {
	if o == nil || IsNil(o.SubscriptionsCreated) {
		return nil, false
	}
	return o.SubscriptionsCreated, true
}

// HasSubscriptionsCreated returns a boolean if a field has been set.
func (o *Subscriptions) HasSubscriptionsCreated() bool {
	if o != nil && !IsNil(o.SubscriptionsCreated) {
		return true
	}

	return false
}

// SetSubscriptionsCreated gets a reference to the given []Subscription and assigns it to the SubscriptionsCreated field.
func (o *Subscriptions) SetSubscriptionsCreated(v []Subscription) {
	o.SubscriptionsCreated = v
}

func (o Subscriptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subscriptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.SubscriptionsCreated) {
		toSerialize["subscriptions_created"] = o.SubscriptionsCreated
	}
	return toSerialize, nil
}

type NullableSubscriptions struct {
	value *Subscriptions
	isSet bool
}

func (v NullableSubscriptions) Get() *Subscriptions {
	return v.value
}

func (v *NullableSubscriptions) Set(val *Subscriptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptions(val *Subscriptions) *NullableSubscriptions {
	return &NullableSubscriptions{value: val, isSet: true}
}

func (v NullableSubscriptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


