/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ReactionWithCastInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReactionWithCastInfo{}

// ReactionWithCastInfo struct for ReactionWithCastInfo
type ReactionWithCastInfo struct {
	ReactionType *string `json:"reaction_type,omitempty"`
	Cast *CastWithInteractions `json:"cast,omitempty"`
	ReactionTimestamp *time.Time `json:"reaction_timestamp,omitempty"`
	Object *string `json:"object,omitempty"`
	User *UserDehydrated `json:"user,omitempty"`
}

// NewReactionWithCastInfo instantiates a new ReactionWithCastInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactionWithCastInfo() *ReactionWithCastInfo {
	this := ReactionWithCastInfo{}
	return &this
}

// NewReactionWithCastInfoWithDefaults instantiates a new ReactionWithCastInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionWithCastInfoWithDefaults() *ReactionWithCastInfo {
	this := ReactionWithCastInfo{}
	return &this
}

// GetReactionType returns the ReactionType field value if set, zero value otherwise.
func (o *ReactionWithCastInfo) GetReactionType() string {
	if o == nil || IsNil(o.ReactionType) {
		var ret string
		return ret
	}
	return *o.ReactionType
}

// GetReactionTypeOk returns a tuple with the ReactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionWithCastInfo) GetReactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReactionType) {
		return nil, false
	}
	return o.ReactionType, true
}

// HasReactionType returns a boolean if a field has been set.
func (o *ReactionWithCastInfo) HasReactionType() bool {
	if o != nil && !IsNil(o.ReactionType) {
		return true
	}

	return false
}

// SetReactionType gets a reference to the given string and assigns it to the ReactionType field.
func (o *ReactionWithCastInfo) SetReactionType(v string) {
	o.ReactionType = &v
}

// GetCast returns the Cast field value if set, zero value otherwise.
func (o *ReactionWithCastInfo) GetCast() CastWithInteractions {
	if o == nil || IsNil(o.Cast) {
		var ret CastWithInteractions
		return ret
	}
	return *o.Cast
}

// GetCastOk returns a tuple with the Cast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionWithCastInfo) GetCastOk() (*CastWithInteractions, bool) {
	if o == nil || IsNil(o.Cast) {
		return nil, false
	}
	return o.Cast, true
}

// HasCast returns a boolean if a field has been set.
func (o *ReactionWithCastInfo) HasCast() bool {
	if o != nil && !IsNil(o.Cast) {
		return true
	}

	return false
}

// SetCast gets a reference to the given CastWithInteractions and assigns it to the Cast field.
func (o *ReactionWithCastInfo) SetCast(v CastWithInteractions) {
	o.Cast = &v
}

// GetReactionTimestamp returns the ReactionTimestamp field value if set, zero value otherwise.
func (o *ReactionWithCastInfo) GetReactionTimestamp() time.Time {
	if o == nil || IsNil(o.ReactionTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.ReactionTimestamp
}

// GetReactionTimestampOk returns a tuple with the ReactionTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionWithCastInfo) GetReactionTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ReactionTimestamp) {
		return nil, false
	}
	return o.ReactionTimestamp, true
}

// HasReactionTimestamp returns a boolean if a field has been set.
func (o *ReactionWithCastInfo) HasReactionTimestamp() bool {
	if o != nil && !IsNil(o.ReactionTimestamp) {
		return true
	}

	return false
}

// SetReactionTimestamp gets a reference to the given time.Time and assigns it to the ReactionTimestamp field.
func (o *ReactionWithCastInfo) SetReactionTimestamp(v time.Time) {
	o.ReactionTimestamp = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *ReactionWithCastInfo) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionWithCastInfo) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *ReactionWithCastInfo) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *ReactionWithCastInfo) SetObject(v string) {
	o.Object = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ReactionWithCastInfo) GetUser() UserDehydrated {
	if o == nil || IsNil(o.User) {
		var ret UserDehydrated
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionWithCastInfo) GetUserOk() (*UserDehydrated, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ReactionWithCastInfo) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UserDehydrated and assigns it to the User field.
func (o *ReactionWithCastInfo) SetUser(v UserDehydrated) {
	o.User = &v
}

func (o ReactionWithCastInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReactionWithCastInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReactionType) {
		toSerialize["reaction_type"] = o.ReactionType
	}
	if !IsNil(o.Cast) {
		toSerialize["cast"] = o.Cast
	}
	if !IsNil(o.ReactionTimestamp) {
		toSerialize["reaction_timestamp"] = o.ReactionTimestamp
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableReactionWithCastInfo struct {
	value *ReactionWithCastInfo
	isSet bool
}

func (v NullableReactionWithCastInfo) Get() *ReactionWithCastInfo {
	return v.value
}

func (v *NullableReactionWithCastInfo) Set(val *ReactionWithCastInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableReactionWithCastInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableReactionWithCastInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactionWithCastInfo(val *ReactionWithCastInfo) *NullableReactionWithCastInfo {
	return &NullableReactionWithCastInfo{value: val, isSet: true}
}

func (v NullableReactionWithCastInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactionWithCastInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


