/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AddVerificationReqBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddVerificationReqBody{}

// AddVerificationReqBody struct for AddVerificationReqBody
type AddVerificationReqBody struct {
	// UUID of the signer
	SignerUuid string `json:"signer_uuid"`
	// Ethereum address
	Address string `json:"address" validate:"regexp=^0x[a-fA-F0-9]{40}$"`
	BlockHash string `json:"block_hash"`
	EthSignature string `json:"eth_signature"`
	VerificationType *VerificationType `json:"verification_type,omitempty"`
	ChainId *VerificationChainId `json:"chain_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AddVerificationReqBody AddVerificationReqBody

// NewAddVerificationReqBody instantiates a new AddVerificationReqBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddVerificationReqBody(signerUuid string, address string, blockHash string, ethSignature string) *AddVerificationReqBody {
	this := AddVerificationReqBody{}
	this.SignerUuid = signerUuid
	this.Address = address
	this.BlockHash = blockHash
	this.EthSignature = ethSignature
	var verificationType VerificationType = VERIFICATIONTYPE__0
	this.VerificationType = &verificationType
	var chainId VerificationChainId = VERIFICATIONCHAINID__0
	this.ChainId = &chainId
	return &this
}

// NewAddVerificationReqBodyWithDefaults instantiates a new AddVerificationReqBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddVerificationReqBodyWithDefaults() *AddVerificationReqBody {
	this := AddVerificationReqBody{}
	var verificationType VerificationType = VERIFICATIONTYPE__0
	this.VerificationType = &verificationType
	var chainId VerificationChainId = VERIFICATIONCHAINID__0
	this.ChainId = &chainId
	return &this
}

// GetSignerUuid returns the SignerUuid field value
func (o *AddVerificationReqBody) GetSignerUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignerUuid
}

// GetSignerUuidOk returns a tuple with the SignerUuid field value
// and a boolean to check if the value has been set.
func (o *AddVerificationReqBody) GetSignerUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignerUuid, true
}

// SetSignerUuid sets field value
func (o *AddVerificationReqBody) SetSignerUuid(v string) {
	o.SignerUuid = v
}

// GetAddress returns the Address field value
func (o *AddVerificationReqBody) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *AddVerificationReqBody) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *AddVerificationReqBody) SetAddress(v string) {
	o.Address = v
}

// GetBlockHash returns the BlockHash field value
func (o *AddVerificationReqBody) GetBlockHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value
// and a boolean to check if the value has been set.
func (o *AddVerificationReqBody) GetBlockHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockHash, true
}

// SetBlockHash sets field value
func (o *AddVerificationReqBody) SetBlockHash(v string) {
	o.BlockHash = v
}

// GetEthSignature returns the EthSignature field value
func (o *AddVerificationReqBody) GetEthSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EthSignature
}

// GetEthSignatureOk returns a tuple with the EthSignature field value
// and a boolean to check if the value has been set.
func (o *AddVerificationReqBody) GetEthSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EthSignature, true
}

// SetEthSignature sets field value
func (o *AddVerificationReqBody) SetEthSignature(v string) {
	o.EthSignature = v
}

// GetVerificationType returns the VerificationType field value if set, zero value otherwise.
func (o *AddVerificationReqBody) GetVerificationType() VerificationType {
	if o == nil || IsNil(o.VerificationType) {
		var ret VerificationType
		return ret
	}
	return *o.VerificationType
}

// GetVerificationTypeOk returns a tuple with the VerificationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVerificationReqBody) GetVerificationTypeOk() (*VerificationType, bool) {
	if o == nil || IsNil(o.VerificationType) {
		return nil, false
	}
	return o.VerificationType, true
}

// HasVerificationType returns a boolean if a field has been set.
func (o *AddVerificationReqBody) HasVerificationType() bool {
	if o != nil && !IsNil(o.VerificationType) {
		return true
	}

	return false
}

// SetVerificationType gets a reference to the given VerificationType and assigns it to the VerificationType field.
func (o *AddVerificationReqBody) SetVerificationType(v VerificationType) {
	o.VerificationType = &v
}

// GetChainId returns the ChainId field value if set, zero value otherwise.
func (o *AddVerificationReqBody) GetChainId() VerificationChainId {
	if o == nil || IsNil(o.ChainId) {
		var ret VerificationChainId
		return ret
	}
	return *o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVerificationReqBody) GetChainIdOk() (*VerificationChainId, bool) {
	if o == nil || IsNil(o.ChainId) {
		return nil, false
	}
	return o.ChainId, true
}

// HasChainId returns a boolean if a field has been set.
func (o *AddVerificationReqBody) HasChainId() bool {
	if o != nil && !IsNil(o.ChainId) {
		return true
	}

	return false
}

// SetChainId gets a reference to the given VerificationChainId and assigns it to the ChainId field.
func (o *AddVerificationReqBody) SetChainId(v VerificationChainId) {
	o.ChainId = &v
}

func (o AddVerificationReqBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddVerificationReqBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["signer_uuid"] = o.SignerUuid
	toSerialize["address"] = o.Address
	toSerialize["block_hash"] = o.BlockHash
	toSerialize["eth_signature"] = o.EthSignature
	if !IsNil(o.VerificationType) {
		toSerialize["verification_type"] = o.VerificationType
	}
	if !IsNil(o.ChainId) {
		toSerialize["chain_id"] = o.ChainId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AddVerificationReqBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"signer_uuid",
		"address",
		"block_hash",
		"eth_signature",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddVerificationReqBody := _AddVerificationReqBody{}

	err = json.Unmarshal(data, &varAddVerificationReqBody)

	if err != nil {
		return err
	}

	*o = AddVerificationReqBody(varAddVerificationReqBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "signer_uuid")
		delete(additionalProperties, "address")
		delete(additionalProperties, "block_hash")
		delete(additionalProperties, "eth_signature")
		delete(additionalProperties, "verification_type")
		delete(additionalProperties, "chain_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAddVerificationReqBody struct {
	value *AddVerificationReqBody
	isSet bool
}

func (v NullableAddVerificationReqBody) Get() *AddVerificationReqBody {
	return v.value
}

func (v *NullableAddVerificationReqBody) Set(val *AddVerificationReqBody) {
	v.value = val
	v.isSet = true
}

func (v NullableAddVerificationReqBody) IsSet() bool {
	return v.isSet
}

func (v *NullableAddVerificationReqBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddVerificationReqBody(val *AddVerificationReqBody) *NullableAddVerificationReqBody {
	return &NullableAddVerificationReqBody{value: val, isSet: true}
}

func (v NullableAddVerificationReqBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddVerificationReqBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


