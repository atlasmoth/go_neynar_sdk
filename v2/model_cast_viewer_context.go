/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CastViewerContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CastViewerContext{}

// CastViewerContext Adds context on interactions the viewer has made with the cast.
type CastViewerContext struct {
	// Indicates if the viewer liked the cast.
	Liked bool `json:"liked"`
	// Indicates if the viewer recasted the cast.
	Recasted bool `json:"recasted"`
	AdditionalProperties map[string]interface{}
}

type _CastViewerContext CastViewerContext

// NewCastViewerContext instantiates a new CastViewerContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCastViewerContext(liked bool, recasted bool) *CastViewerContext {
	this := CastViewerContext{}
	this.Liked = liked
	this.Recasted = recasted
	return &this
}

// NewCastViewerContextWithDefaults instantiates a new CastViewerContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCastViewerContextWithDefaults() *CastViewerContext {
	this := CastViewerContext{}
	return &this
}

// GetLiked returns the Liked field value
func (o *CastViewerContext) GetLiked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Liked
}

// GetLikedOk returns a tuple with the Liked field value
// and a boolean to check if the value has been set.
func (o *CastViewerContext) GetLikedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Liked, true
}

// SetLiked sets field value
func (o *CastViewerContext) SetLiked(v bool) {
	o.Liked = v
}

// GetRecasted returns the Recasted field value
func (o *CastViewerContext) GetRecasted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Recasted
}

// GetRecastedOk returns a tuple with the Recasted field value
// and a boolean to check if the value has been set.
func (o *CastViewerContext) GetRecastedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recasted, true
}

// SetRecasted sets field value
func (o *CastViewerContext) SetRecasted(v bool) {
	o.Recasted = v
}

func (o CastViewerContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CastViewerContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["liked"] = o.Liked
	toSerialize["recasted"] = o.Recasted

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CastViewerContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"liked",
		"recasted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCastViewerContext := _CastViewerContext{}

	err = json.Unmarshal(data, &varCastViewerContext)

	if err != nil {
		return err
	}

	*o = CastViewerContext(varCastViewerContext)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "liked")
		delete(additionalProperties, "recasted")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCastViewerContext struct {
	value *CastViewerContext
	isSet bool
}

func (v NullableCastViewerContext) Get() *CastViewerContext {
	return v.value
}

func (v *NullableCastViewerContext) Set(val *CastViewerContext) {
	v.value = val
	v.isSet = true
}

func (v NullableCastViewerContext) IsSet() bool {
	return v.isSet
}

func (v *NullableCastViewerContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastViewerContext(val *CastViewerContext) *NullableCastViewerContext {
	return &NullableCastViewerContext{value: val, isSet: true}
}

func (v NullableCastViewerContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastViewerContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


