/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CastViewerContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CastViewerContext{}

// CastViewerContext Adds context on interactions the viewer has made with the cast.
type CastViewerContext struct {
	// Indicates if the viewer liked the cast.
	Liked *bool `json:"liked,omitempty"`
	// Indicates if the viewer recasted the cast.
	Recasted *bool `json:"recasted,omitempty"`
}

// NewCastViewerContext instantiates a new CastViewerContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCastViewerContext() *CastViewerContext {
	this := CastViewerContext{}
	return &this
}

// NewCastViewerContextWithDefaults instantiates a new CastViewerContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCastViewerContextWithDefaults() *CastViewerContext {
	this := CastViewerContext{}
	return &this
}

// GetLiked returns the Liked field value if set, zero value otherwise.
func (o *CastViewerContext) GetLiked() bool {
	if o == nil || IsNil(o.Liked) {
		var ret bool
		return ret
	}
	return *o.Liked
}

// GetLikedOk returns a tuple with the Liked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CastViewerContext) GetLikedOk() (*bool, bool) {
	if o == nil || IsNil(o.Liked) {
		return nil, false
	}
	return o.Liked, true
}

// HasLiked returns a boolean if a field has been set.
func (o *CastViewerContext) HasLiked() bool {
	if o != nil && !IsNil(o.Liked) {
		return true
	}

	return false
}

// SetLiked gets a reference to the given bool and assigns it to the Liked field.
func (o *CastViewerContext) SetLiked(v bool) {
	o.Liked = &v
}

// GetRecasted returns the Recasted field value if set, zero value otherwise.
func (o *CastViewerContext) GetRecasted() bool {
	if o == nil || IsNil(o.Recasted) {
		var ret bool
		return ret
	}
	return *o.Recasted
}

// GetRecastedOk returns a tuple with the Recasted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CastViewerContext) GetRecastedOk() (*bool, bool) {
	if o == nil || IsNil(o.Recasted) {
		return nil, false
	}
	return o.Recasted, true
}

// HasRecasted returns a boolean if a field has been set.
func (o *CastViewerContext) HasRecasted() bool {
	if o != nil && !IsNil(o.Recasted) {
		return true
	}

	return false
}

// SetRecasted gets a reference to the given bool and assigns it to the Recasted field.
func (o *CastViewerContext) SetRecasted(v bool) {
	o.Recasted = &v
}

func (o CastViewerContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CastViewerContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Liked) {
		toSerialize["liked"] = o.Liked
	}
	if !IsNil(o.Recasted) {
		toSerialize["recasted"] = o.Recasted
	}
	return toSerialize, nil
}

type NullableCastViewerContext struct {
	value *CastViewerContext
	isSet bool
}

func (v NullableCastViewerContext) Get() *CastViewerContext {
	return v.value
}

func (v *NullableCastViewerContext) Set(val *CastViewerContext) {
	v.value = val
	v.isSet = true
}

func (v NullableCastViewerContext) IsSet() bool {
	return v.isSet
}

func (v *NullableCastViewerContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastViewerContext(val *CastViewerContext) *NullableCastViewerContext {
	return &NullableCastViewerContext{value: val, isSet: true}
}

func (v NullableCastViewerContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastViewerContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


