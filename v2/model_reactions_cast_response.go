/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReactionsCastResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReactionsCastResponse{}

// ReactionsCastResponse struct for ReactionsCastResponse
type ReactionsCastResponse struct {
	Reactions []ReactionForCast `json:"reactions,omitempty"`
	Next *NextCursor `json:"next,omitempty"`
}

// NewReactionsCastResponse instantiates a new ReactionsCastResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactionsCastResponse() *ReactionsCastResponse {
	this := ReactionsCastResponse{}
	return &this
}

// NewReactionsCastResponseWithDefaults instantiates a new ReactionsCastResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionsCastResponseWithDefaults() *ReactionsCastResponse {
	this := ReactionsCastResponse{}
	return &this
}

// GetReactions returns the Reactions field value if set, zero value otherwise.
func (o *ReactionsCastResponse) GetReactions() []ReactionForCast {
	if o == nil || IsNil(o.Reactions) {
		var ret []ReactionForCast
		return ret
	}
	return o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionsCastResponse) GetReactionsOk() ([]ReactionForCast, bool) {
	if o == nil || IsNil(o.Reactions) {
		return nil, false
	}
	return o.Reactions, true
}

// HasReactions returns a boolean if a field has been set.
func (o *ReactionsCastResponse) HasReactions() bool {
	if o != nil && !IsNil(o.Reactions) {
		return true
	}

	return false
}

// SetReactions gets a reference to the given []ReactionForCast and assigns it to the Reactions field.
func (o *ReactionsCastResponse) SetReactions(v []ReactionForCast) {
	o.Reactions = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *ReactionsCastResponse) GetNext() NextCursor {
	if o == nil || IsNil(o.Next) {
		var ret NextCursor
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionsCastResponse) GetNextOk() (*NextCursor, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *ReactionsCastResponse) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given NextCursor and assigns it to the Next field.
func (o *ReactionsCastResponse) SetNext(v NextCursor) {
	o.Next = &v
}

func (o ReactionsCastResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReactionsCastResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reactions) {
		toSerialize["reactions"] = o.Reactions
	}
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	return toSerialize, nil
}

type NullableReactionsCastResponse struct {
	value *ReactionsCastResponse
	isSet bool
}

func (v NullableReactionsCastResponse) Get() *ReactionsCastResponse {
	return v.value
}

func (v *NullableReactionsCastResponse) Set(val *ReactionsCastResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReactionsCastResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReactionsCastResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactionsCastResponse(val *ReactionsCastResponse) *NullableReactionsCastResponse {
	return &NullableReactionsCastResponse{value: val, isSet: true}
}

func (v NullableReactionsCastResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactionsCastResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


