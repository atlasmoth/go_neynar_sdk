/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the MuteList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MuteList{}

// MuteList struct for MuteList
type MuteList struct {
	Object *string `json:"object,omitempty"`
	Muted *User `json:"muted,omitempty"`
	MutedAt *time.Time `json:"muted_at,omitempty"`
}

// NewMuteList instantiates a new MuteList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMuteList() *MuteList {
	this := MuteList{}
	return &this
}

// NewMuteListWithDefaults instantiates a new MuteList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMuteListWithDefaults() *MuteList {
	this := MuteList{}
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *MuteList) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MuteList) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *MuteList) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *MuteList) SetObject(v string) {
	o.Object = &v
}

// GetMuted returns the Muted field value if set, zero value otherwise.
func (o *MuteList) GetMuted() User {
	if o == nil || IsNil(o.Muted) {
		var ret User
		return ret
	}
	return *o.Muted
}

// GetMutedOk returns a tuple with the Muted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MuteList) GetMutedOk() (*User, bool) {
	if o == nil || IsNil(o.Muted) {
		return nil, false
	}
	return o.Muted, true
}

// HasMuted returns a boolean if a field has been set.
func (o *MuteList) HasMuted() bool {
	if o != nil && !IsNil(o.Muted) {
		return true
	}

	return false
}

// SetMuted gets a reference to the given User and assigns it to the Muted field.
func (o *MuteList) SetMuted(v User) {
	o.Muted = &v
}

// GetMutedAt returns the MutedAt field value if set, zero value otherwise.
func (o *MuteList) GetMutedAt() time.Time {
	if o == nil || IsNil(o.MutedAt) {
		var ret time.Time
		return ret
	}
	return *o.MutedAt
}

// GetMutedAtOk returns a tuple with the MutedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MuteList) GetMutedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.MutedAt) {
		return nil, false
	}
	return o.MutedAt, true
}

// HasMutedAt returns a boolean if a field has been set.
func (o *MuteList) HasMutedAt() bool {
	if o != nil && !IsNil(o.MutedAt) {
		return true
	}

	return false
}

// SetMutedAt gets a reference to the given time.Time and assigns it to the MutedAt field.
func (o *MuteList) SetMutedAt(v time.Time) {
	o.MutedAt = &v
}

func (o MuteList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MuteList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Muted) {
		toSerialize["muted"] = o.Muted
	}
	if !IsNil(o.MutedAt) {
		toSerialize["muted_at"] = o.MutedAt
	}
	return toSerialize, nil
}

type NullableMuteList struct {
	value *MuteList
	isSet bool
}

func (v NullableMuteList) Get() *MuteList {
	return v.value
}

func (v *NullableMuteList) Set(val *MuteList) {
	v.value = val
	v.isSet = true
}

func (v NullableMuteList) IsSet() bool {
	return v.isSet
}

func (v *NullableMuteList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMuteList(val *MuteList) *NullableMuteList {
	return &NullableMuteList{value: val, isSet: true}
}

func (v NullableMuteList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMuteList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


