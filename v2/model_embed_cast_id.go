/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EmbedCastId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbedCastId{}

// EmbedCastId struct for EmbedCastId
type EmbedCastId struct {
	CastId *CastId `json:"cast_id,omitempty"`
}

// NewEmbedCastId instantiates a new EmbedCastId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbedCastId() *EmbedCastId {
	this := EmbedCastId{}
	return &this
}

// NewEmbedCastIdWithDefaults instantiates a new EmbedCastId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbedCastIdWithDefaults() *EmbedCastId {
	this := EmbedCastId{}
	return &this
}

// GetCastId returns the CastId field value if set, zero value otherwise.
func (o *EmbedCastId) GetCastId() CastId {
	if o == nil || IsNil(o.CastId) {
		var ret CastId
		return ret
	}
	return *o.CastId
}

// GetCastIdOk returns a tuple with the CastId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbedCastId) GetCastIdOk() (*CastId, bool) {
	if o == nil || IsNil(o.CastId) {
		return nil, false
	}
	return o.CastId, true
}

// HasCastId returns a boolean if a field has been set.
func (o *EmbedCastId) HasCastId() bool {
	if o != nil && !IsNil(o.CastId) {
		return true
	}

	return false
}

// SetCastId gets a reference to the given CastId and assigns it to the CastId field.
func (o *EmbedCastId) SetCastId(v CastId) {
	o.CastId = &v
}

func (o EmbedCastId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbedCastId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CastId) {
		toSerialize["cast_id"] = o.CastId
	}
	return toSerialize, nil
}

type NullableEmbedCastId struct {
	value *EmbedCastId
	isSet bool
}

func (v NullableEmbedCastId) Get() *EmbedCastId {
	return v.value
}

func (v *NullableEmbedCastId) Set(val *EmbedCastId) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbedCastId) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbedCastId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbedCastId(val *EmbedCastId) *NullableEmbedCastId {
	return &NullableEmbedCastId{value: val, isSet: true}
}

func (v NullableEmbedCastId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbedCastId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


