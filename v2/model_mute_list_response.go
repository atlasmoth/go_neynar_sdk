/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MuteListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MuteListResponse{}

// MuteListResponse struct for MuteListResponse
type MuteListResponse struct {
	Mutes []MuteList `json:"mutes,omitempty"`
	Next *NextCursor `json:"next,omitempty"`
}

// NewMuteListResponse instantiates a new MuteListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMuteListResponse() *MuteListResponse {
	this := MuteListResponse{}
	return &this
}

// NewMuteListResponseWithDefaults instantiates a new MuteListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMuteListResponseWithDefaults() *MuteListResponse {
	this := MuteListResponse{}
	return &this
}

// GetMutes returns the Mutes field value if set, zero value otherwise.
func (o *MuteListResponse) GetMutes() []MuteList {
	if o == nil || IsNil(o.Mutes) {
		var ret []MuteList
		return ret
	}
	return o.Mutes
}

// GetMutesOk returns a tuple with the Mutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MuteListResponse) GetMutesOk() ([]MuteList, bool) {
	if o == nil || IsNil(o.Mutes) {
		return nil, false
	}
	return o.Mutes, true
}

// HasMutes returns a boolean if a field has been set.
func (o *MuteListResponse) HasMutes() bool {
	if o != nil && !IsNil(o.Mutes) {
		return true
	}

	return false
}

// SetMutes gets a reference to the given []MuteList and assigns it to the Mutes field.
func (o *MuteListResponse) SetMutes(v []MuteList) {
	o.Mutes = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *MuteListResponse) GetNext() NextCursor {
	if o == nil || IsNil(o.Next) {
		var ret NextCursor
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MuteListResponse) GetNextOk() (*NextCursor, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *MuteListResponse) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given NextCursor and assigns it to the Next field.
func (o *MuteListResponse) SetNext(v NextCursor) {
	o.Next = &v
}

func (o MuteListResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MuteListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mutes) {
		toSerialize["mutes"] = o.Mutes
	}
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	return toSerialize, nil
}

type NullableMuteListResponse struct {
	value *MuteListResponse
	isSet bool
}

func (v NullableMuteListResponse) Get() *MuteListResponse {
	return v.value
}

func (v *NullableMuteListResponse) Set(val *MuteListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMuteListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMuteListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMuteListResponse(val *MuteListResponse) *NullableMuteListResponse {
	return &NullableMuteListResponse{value: val, isSet: true}
}

func (v NullableMuteListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMuteListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


