/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CastComposerType the model 'CastComposerType'
type CastComposerType string

// List of CastComposerType
const (
	CASTCOMPOSERTYPE_TOP CastComposerType = "top"
	CASTCOMPOSERTYPE_FEATURED CastComposerType = "featured"
)

// All allowed values of CastComposerType enum
var AllowedCastComposerTypeEnumValues = []CastComposerType{
	"top",
	"featured",
}

func (v *CastComposerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CastComposerType(value)
	for _, existing := range AllowedCastComposerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CastComposerType", value)
}

// NewCastComposerTypeFromValue returns a pointer to a valid CastComposerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCastComposerTypeFromValue(v string) (*CastComposerType, error) {
	ev := CastComposerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CastComposerType: valid values are %v", v, AllowedCastComposerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CastComposerType) IsValid() bool {
	for _, existing := range AllowedCastComposerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CastComposerType value
func (v CastComposerType) Ptr() *CastComposerType {
	return &v
}

type NullableCastComposerType struct {
	value *CastComposerType
	isSet bool
}

func (v NullableCastComposerType) Get() *CastComposerType {
	return v.value
}

func (v *NullableCastComposerType) Set(val *CastComposerType) {
	v.value = val
	v.isSet = true
}

func (v NullableCastComposerType) IsSet() bool {
	return v.isSet
}

func (v *NullableCastComposerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastComposerType(val *CastComposerType) *NullableCastComposerType {
	return &NullableCastComposerType{value: val, isSet: true}
}

func (v NullableCastComposerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastComposerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

