/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FrameButtonActionType the model 'FrameButtonActionType'
type FrameButtonActionType string

// List of FrameButtonActionType
const (
	FRAMEBUTTONACTIONTYPE_POST FrameButtonActionType = "post"
	FRAMEBUTTONACTIONTYPE_POST_REDIRECT FrameButtonActionType = "post_redirect"
	FRAMEBUTTONACTIONTYPE_TX FrameButtonActionType = "tx"
)

// All allowed values of FrameButtonActionType enum
var AllowedFrameButtonActionTypeEnumValues = []FrameButtonActionType{
	"post",
	"post_redirect",
	"tx",
}

func (v *FrameButtonActionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FrameButtonActionType(value)
	for _, existing := range AllowedFrameButtonActionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FrameButtonActionType", value)
}

// NewFrameButtonActionTypeFromValue returns a pointer to a valid FrameButtonActionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFrameButtonActionTypeFromValue(v string) (*FrameButtonActionType, error) {
	ev := FrameButtonActionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FrameButtonActionType: valid values are %v", v, AllowedFrameButtonActionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FrameButtonActionType) IsValid() bool {
	for _, existing := range AllowedFrameButtonActionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FrameButtonActionType value
func (v FrameButtonActionType) Ptr() *FrameButtonActionType {
	return &v
}

type NullableFrameButtonActionType struct {
	value *FrameButtonActionType
	isSet bool
}

func (v NullableFrameButtonActionType) Get() *FrameButtonActionType {
	return v.value
}

func (v *NullableFrameButtonActionType) Set(val *FrameButtonActionType) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameButtonActionType) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameButtonActionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameButtonActionType(val *FrameButtonActionType) *NullableFrameButtonActionType {
	return &NullableFrameButtonActionType{value: val, isSet: true}
}

func (v NullableFrameButtonActionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameButtonActionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

