/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ChannelViewerContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelViewerContext{}

// ChannelViewerContext struct for ChannelViewerContext
type ChannelViewerContext struct {
	// Indicates if the viewer is following the channel.
	Following bool `json:"following"`
}

type _ChannelViewerContext ChannelViewerContext

// NewChannelViewerContext instantiates a new ChannelViewerContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelViewerContext(following bool) *ChannelViewerContext {
	this := ChannelViewerContext{}
	this.Following = following
	return &this
}

// NewChannelViewerContextWithDefaults instantiates a new ChannelViewerContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelViewerContextWithDefaults() *ChannelViewerContext {
	this := ChannelViewerContext{}
	return &this
}

// GetFollowing returns the Following field value
func (o *ChannelViewerContext) GetFollowing() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Following
}

// GetFollowingOk returns a tuple with the Following field value
// and a boolean to check if the value has been set.
func (o *ChannelViewerContext) GetFollowingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Following, true
}

// SetFollowing sets field value
func (o *ChannelViewerContext) SetFollowing(v bool) {
	o.Following = v
}

func (o ChannelViewerContext) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelViewerContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["following"] = o.Following
	return toSerialize, nil
}

func (o *ChannelViewerContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"following",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChannelViewerContext := _ChannelViewerContext{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChannelViewerContext)

	if err != nil {
		return err
	}

	*o = ChannelViewerContext(varChannelViewerContext)

	return err
}

type NullableChannelViewerContext struct {
	value *ChannelViewerContext
	isSet bool
}

func (v NullableChannelViewerContext) Get() *ChannelViewerContext {
	return v.value
}

func (v *NullableChannelViewerContext) Set(val *ChannelViewerContext) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelViewerContext) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelViewerContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelViewerContext(val *ChannelViewerContext) *NullableChannelViewerContext {
	return &NullableChannelViewerContext{value: val, isSet: true}
}

func (v NullableChannelViewerContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelViewerContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
