/*
STP API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// STPAPIService STPAPI service
type STPAPIService service

type ApiSubscriptionCheckRequest struct {
	ctx context.Context
	ApiService *STPAPIService
	apiKey *string
	addresses *string
	contractAddress *string
	chainId *string
}

// API key required for authentication.
func (r ApiSubscriptionCheckRequest) ApiKey(apiKey string) ApiSubscriptionCheckRequest {
	r.apiKey = &apiKey
	return r
}

// Comma separated list of Ethereum addresses, up to 350 at a time
func (r ApiSubscriptionCheckRequest) Addresses(addresses string) ApiSubscriptionCheckRequest {
	r.addresses = &addresses
	return r
}

// Ethereum address of the STP contract
func (r ApiSubscriptionCheckRequest) ContractAddress(contractAddress string) ApiSubscriptionCheckRequest {
	r.contractAddress = &contractAddress
	return r
}

// Chain ID of the STP contract
func (r ApiSubscriptionCheckRequest) ChainId(chainId string) ApiSubscriptionCheckRequest {
	r.chainId = &chainId
	return r
}

func (r ApiSubscriptionCheckRequest) Execute() (*map[string]SubscriptionStatus, *http.Response, error) {
	return r.ApiService.SubscriptionCheckExecute(r)
}

/*
SubscriptionCheck Check if a wallet address is subscribed to a STP contract

Check if a wallet address is subscribed to a given STP contract.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSubscriptionCheckRequest
*/
func (a *STPAPIService) SubscriptionCheck(ctx context.Context) ApiSubscriptionCheckRequest {
	return ApiSubscriptionCheckRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]SubscriptionStatus
func (a *STPAPIService) SubscriptionCheckExecute(r ApiSubscriptionCheckRequest) (*map[string]SubscriptionStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *map[string]SubscriptionStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "STPAPIService.SubscriptionCheck")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stp/subscription_check"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.addresses != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "addresses", r.addresses, "form", "")
	}
	if r.contractAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contract_address", r.contractAddress, "form", "")
	}
	if r.chainId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chain_id", r.chainId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "api_key", r.apiKey, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
