/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostCastResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostCastResponse{}

// PostCastResponse struct for PostCastResponse
type PostCastResponse struct {
	Success bool `json:"success"`
	Cast PostCastResponseCast `json:"cast"`
}

type _PostCastResponse PostCastResponse

// NewPostCastResponse instantiates a new PostCastResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostCastResponse(success bool, cast PostCastResponseCast) *PostCastResponse {
	this := PostCastResponse{}
	this.Success = success
	this.Cast = cast
	return &this
}

// NewPostCastResponseWithDefaults instantiates a new PostCastResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostCastResponseWithDefaults() *PostCastResponse {
	this := PostCastResponse{}
	return &this
}

// GetSuccess returns the Success field value
func (o *PostCastResponse) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *PostCastResponse) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *PostCastResponse) SetSuccess(v bool) {
	o.Success = v
}

// GetCast returns the Cast field value
func (o *PostCastResponse) GetCast() PostCastResponseCast {
	if o == nil {
		var ret PostCastResponseCast
		return ret
	}

	return o.Cast
}

// GetCastOk returns a tuple with the Cast field value
// and a boolean to check if the value has been set.
func (o *PostCastResponse) GetCastOk() (*PostCastResponseCast, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cast, true
}

// SetCast sets field value
func (o *PostCastResponse) SetCast(v PostCastResponseCast) {
	o.Cast = v
}

func (o PostCastResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostCastResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	toSerialize["cast"] = o.Cast
	return toSerialize, nil
}

func (o *PostCastResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
		"cast",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostCastResponse := _PostCastResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostCastResponse)

	if err != nil {
		return err
	}

	*o = PostCastResponse(varPostCastResponse)

	return err
}

type NullablePostCastResponse struct {
	value *PostCastResponse
	isSet bool
}

func (v NullablePostCastResponse) Get() *PostCastResponse {
	return v.value
}

func (v *NullablePostCastResponse) Set(val *PostCastResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePostCastResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePostCastResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostCastResponse(val *PostCastResponse) *NullablePostCastResponse {
	return &NullablePostCastResponse{value: val, isSet: true}
}

func (v NullablePostCastResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostCastResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


