/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// NeynarPageButtonNextPage - struct for NeynarPageButtonNextPage
type NeynarPageButtonNextPage struct {
	NeynarNextFramePage         *NeynarNextFramePage
	NeynarNextFramePageMintUrl  *NeynarNextFramePageMintUrl
	NeynarNextFramePageRedirect *NeynarNextFramePageRedirect
}

// NeynarNextFramePageAsNeynarPageButtonNextPage is a convenience function that returns NeynarNextFramePage wrapped in NeynarPageButtonNextPage
func NeynarNextFramePageAsNeynarPageButtonNextPage(v *NeynarNextFramePage) NeynarPageButtonNextPage {
	return NeynarPageButtonNextPage{
		NeynarNextFramePage: v,
	}
}

// NeynarNextFramePageMintUrlAsNeynarPageButtonNextPage is a convenience function that returns NeynarNextFramePageMintUrl wrapped in NeynarPageButtonNextPage
func NeynarNextFramePageMintUrlAsNeynarPageButtonNextPage(v *NeynarNextFramePageMintUrl) NeynarPageButtonNextPage {
	return NeynarPageButtonNextPage{
		NeynarNextFramePageMintUrl: v,
	}
}

// NeynarNextFramePageRedirectAsNeynarPageButtonNextPage is a convenience function that returns NeynarNextFramePageRedirect wrapped in NeynarPageButtonNextPage
func NeynarNextFramePageRedirectAsNeynarPageButtonNextPage(v *NeynarNextFramePageRedirect) NeynarPageButtonNextPage {
	return NeynarPageButtonNextPage{
		NeynarNextFramePageRedirect: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *NeynarPageButtonNextPage) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NeynarNextFramePage
	err = newStrictDecoder(data).Decode(&dst.NeynarNextFramePage)
	if err == nil {
		jsonNeynarNextFramePage, _ := json.Marshal(dst.NeynarNextFramePage)
		if string(jsonNeynarNextFramePage) == "{}" { // empty struct
			dst.NeynarNextFramePage = nil
		} else {
			if err = validator.Validate(dst.NeynarNextFramePage); err != nil {
				dst.NeynarNextFramePage = nil
			} else {
				match++
			}
		}
	} else {
		dst.NeynarNextFramePage = nil
	}

	// try to unmarshal data into NeynarNextFramePageMintUrl
	err = newStrictDecoder(data).Decode(&dst.NeynarNextFramePageMintUrl)
	if err == nil {
		jsonNeynarNextFramePageMintUrl, _ := json.Marshal(dst.NeynarNextFramePageMintUrl)
		if string(jsonNeynarNextFramePageMintUrl) == "{}" { // empty struct
			dst.NeynarNextFramePageMintUrl = nil
		} else {
			if err = validator.Validate(dst.NeynarNextFramePageMintUrl); err != nil {
				dst.NeynarNextFramePageMintUrl = nil
			} else {
				match++
			}
		}
	} else {
		dst.NeynarNextFramePageMintUrl = nil
	}

	// try to unmarshal data into NeynarNextFramePageRedirect
	err = newStrictDecoder(data).Decode(&dst.NeynarNextFramePageRedirect)
	if err == nil {
		jsonNeynarNextFramePageRedirect, _ := json.Marshal(dst.NeynarNextFramePageRedirect)
		if string(jsonNeynarNextFramePageRedirect) == "{}" { // empty struct
			dst.NeynarNextFramePageRedirect = nil
		} else {
			if err = validator.Validate(dst.NeynarNextFramePageRedirect); err != nil {
				dst.NeynarNextFramePageRedirect = nil
			} else {
				match++
			}
		}
	} else {
		dst.NeynarNextFramePageRedirect = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NeynarNextFramePage = nil
		dst.NeynarNextFramePageMintUrl = nil
		dst.NeynarNextFramePageRedirect = nil

		return fmt.Errorf("data matches more than one schema in oneOf(NeynarPageButtonNextPage)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(NeynarPageButtonNextPage)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NeynarPageButtonNextPage) MarshalJSON() ([]byte, error) {
	if src.NeynarNextFramePage != nil {
		return json.Marshal(&src.NeynarNextFramePage)
	}

	if src.NeynarNextFramePageMintUrl != nil {
		return json.Marshal(&src.NeynarNextFramePageMintUrl)
	}

	if src.NeynarNextFramePageRedirect != nil {
		return json.Marshal(&src.NeynarNextFramePageRedirect)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NeynarPageButtonNextPage) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.NeynarNextFramePage != nil {
		return obj.NeynarNextFramePage
	}

	if obj.NeynarNextFramePageMintUrl != nil {
		return obj.NeynarNextFramePageMintUrl
	}

	if obj.NeynarNextFramePageRedirect != nil {
		return obj.NeynarNextFramePageRedirect
	}

	// all schemas are nil
	return nil
}

type NullableNeynarPageButtonNextPage struct {
	value *NeynarPageButtonNextPage
	isSet bool
}

func (v NullableNeynarPageButtonNextPage) Get() *NeynarPageButtonNextPage {
	return v.value
}

func (v *NullableNeynarPageButtonNextPage) Set(val *NeynarPageButtonNextPage) {
	v.value = val
	v.isSet = true
}

func (v NullableNeynarPageButtonNextPage) IsSet() bool {
	return v.isSet
}

func (v *NullableNeynarPageButtonNextPage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNeynarPageButtonNextPage(val *NeynarPageButtonNextPage) *NullableNeynarPageButtonNextPage {
	return &NullableNeynarPageButtonNextPage{value: val, isSet: true}
}

func (v NullableNeynarPageButtonNextPage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNeynarPageButtonNextPage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
