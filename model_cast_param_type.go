/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CastParamType The query param accepted by the API. Sent along with identifier param. url - Cast identifier is a url hash - Cast identifier is a hash
type CastParamType string

// List of CastParamType
const (
	// URL CastParamType = "url"
	HASH CastParamType = "hash"
)

// All allowed values of CastParamType enum
var AllowedCastParamTypeEnumValues = []CastParamType{
	"url",
	"hash",
}

func (v *CastParamType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CastParamType(value)
	for _, existing := range AllowedCastParamTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CastParamType", value)
}

// NewCastParamTypeFromValue returns a pointer to a valid CastParamType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCastParamTypeFromValue(v string) (*CastParamType, error) {
	ev := CastParamType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CastParamType: valid values are %v", v, AllowedCastParamTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CastParamType) IsValid() bool {
	for _, existing := range AllowedCastParamTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CastParamType value
func (v CastParamType) Ptr() *CastParamType {
	return &v
}

type NullableCastParamType struct {
	value *CastParamType
	isSet bool
}

func (v NullableCastParamType) Get() *CastParamType {
	return v.value
}

func (v *NullableCastParamType) Set(val *CastParamType) {
	v.value = val
	v.isSet = true
}

func (v NullableCastParamType) IsSet() bool {
	return v.isSet
}

func (v *NullableCastParamType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastParamType(val *CastParamType) *NullableCastParamType {
	return &NullableCastParamType{value: val, isSet: true}
}

func (v NullableCastParamType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastParamType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
