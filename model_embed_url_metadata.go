/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EmbedUrlMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbedUrlMetadata{}

// EmbedUrlMetadata struct for EmbedUrlMetadata
type EmbedUrlMetadata struct {
	ContentType   NullableString `json:"content_type"`
	ContentLength NullableInt32  `json:"content_length"`
}

type _EmbedUrlMetadata EmbedUrlMetadata

// NewEmbedUrlMetadata instantiates a new EmbedUrlMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbedUrlMetadata(contentType NullableString, contentLength NullableInt32) *EmbedUrlMetadata {
	this := EmbedUrlMetadata{}
	this.ContentType = contentType
	this.ContentLength = contentLength
	return &this
}

// NewEmbedUrlMetadataWithDefaults instantiates a new EmbedUrlMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbedUrlMetadataWithDefaults() *EmbedUrlMetadata {
	this := EmbedUrlMetadata{}
	return &this
}

// GetContentType returns the ContentType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *EmbedUrlMetadata) GetContentType() string {
	if o == nil || o.ContentType.Get() == nil {
		var ret string
		return ret
	}

	return *o.ContentType.Get()
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbedUrlMetadata) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentType.Get(), o.ContentType.IsSet()
}

// SetContentType sets field value
func (o *EmbedUrlMetadata) SetContentType(v string) {
	o.ContentType.Set(&v)
}

// GetContentLength returns the ContentLength field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *EmbedUrlMetadata) GetContentLength() int32 {
	if o == nil || o.ContentLength.Get() == nil {
		var ret int32
		return ret
	}

	return *o.ContentLength.Get()
}

// GetContentLengthOk returns a tuple with the ContentLength field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbedUrlMetadata) GetContentLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentLength.Get(), o.ContentLength.IsSet()
}

// SetContentLength sets field value
func (o *EmbedUrlMetadata) SetContentLength(v int32) {
	o.ContentLength.Set(&v)
}

func (o EmbedUrlMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbedUrlMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content_type"] = o.ContentType.Get()
	toSerialize["content_length"] = o.ContentLength.Get()
	return toSerialize, nil
}

func (o *EmbedUrlMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content_type",
		"content_length",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbedUrlMetadata := _EmbedUrlMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmbedUrlMetadata)

	if err != nil {
		return err
	}

	*o = EmbedUrlMetadata(varEmbedUrlMetadata)

	return err
}

type NullableEmbedUrlMetadata struct {
	value *EmbedUrlMetadata
	isSet bool
}

func (v NullableEmbedUrlMetadata) Get() *EmbedUrlMetadata {
	return v.value
}

func (v *NullableEmbedUrlMetadata) Set(val *EmbedUrlMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbedUrlMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbedUrlMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbedUrlMetadata(val *EmbedUrlMetadata) *NullableEmbedUrlMetadata {
	return &NullableEmbedUrlMetadata{value: val, isSet: true}
}

func (v NullableEmbedUrlMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbedUrlMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
