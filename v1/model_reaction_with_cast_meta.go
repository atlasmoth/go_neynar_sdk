/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReactionWithCastMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReactionWithCastMeta{}

// ReactionWithCastMeta Reaction of a user (either like or recast), along with its associated cast
type ReactionWithCastMeta struct {
	Reaction ReactionWithCastMetaReaction `json:"reaction"`
	Cast *ReactionWithCastMetaCast `json:"cast,omitempty"`
	CastAuthor *User `json:"cast_author,omitempty"`
}

type _ReactionWithCastMeta ReactionWithCastMeta

// NewReactionWithCastMeta instantiates a new ReactionWithCastMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactionWithCastMeta(reaction ReactionWithCastMetaReaction) *ReactionWithCastMeta {
	this := ReactionWithCastMeta{}
	this.Reaction = reaction
	return &this
}

// NewReactionWithCastMetaWithDefaults instantiates a new ReactionWithCastMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionWithCastMetaWithDefaults() *ReactionWithCastMeta {
	this := ReactionWithCastMeta{}
	return &this
}

// GetReaction returns the Reaction field value
func (o *ReactionWithCastMeta) GetReaction() ReactionWithCastMetaReaction {
	if o == nil {
		var ret ReactionWithCastMetaReaction
		return ret
	}

	return o.Reaction
}

// GetReactionOk returns a tuple with the Reaction field value
// and a boolean to check if the value has been set.
func (o *ReactionWithCastMeta) GetReactionOk() (*ReactionWithCastMetaReaction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reaction, true
}

// SetReaction sets field value
func (o *ReactionWithCastMeta) SetReaction(v ReactionWithCastMetaReaction) {
	o.Reaction = v
}

// GetCast returns the Cast field value if set, zero value otherwise.
func (o *ReactionWithCastMeta) GetCast() ReactionWithCastMetaCast {
	if o == nil || IsNil(o.Cast) {
		var ret ReactionWithCastMetaCast
		return ret
	}
	return *o.Cast
}

// GetCastOk returns a tuple with the Cast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionWithCastMeta) GetCastOk() (*ReactionWithCastMetaCast, bool) {
	if o == nil || IsNil(o.Cast) {
		return nil, false
	}
	return o.Cast, true
}

// HasCast returns a boolean if a field has been set.
func (o *ReactionWithCastMeta) HasCast() bool {
	if o != nil && !IsNil(o.Cast) {
		return true
	}

	return false
}

// SetCast gets a reference to the given ReactionWithCastMetaCast and assigns it to the Cast field.
func (o *ReactionWithCastMeta) SetCast(v ReactionWithCastMetaCast) {
	o.Cast = &v
}

// GetCastAuthor returns the CastAuthor field value if set, zero value otherwise.
func (o *ReactionWithCastMeta) GetCastAuthor() User {
	if o == nil || IsNil(o.CastAuthor) {
		var ret User
		return ret
	}
	return *o.CastAuthor
}

// GetCastAuthorOk returns a tuple with the CastAuthor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionWithCastMeta) GetCastAuthorOk() (*User, bool) {
	if o == nil || IsNil(o.CastAuthor) {
		return nil, false
	}
	return o.CastAuthor, true
}

// HasCastAuthor returns a boolean if a field has been set.
func (o *ReactionWithCastMeta) HasCastAuthor() bool {
	if o != nil && !IsNil(o.CastAuthor) {
		return true
	}

	return false
}

// SetCastAuthor gets a reference to the given User and assigns it to the CastAuthor field.
func (o *ReactionWithCastMeta) SetCastAuthor(v User) {
	o.CastAuthor = &v
}

func (o ReactionWithCastMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReactionWithCastMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reaction"] = o.Reaction
	if !IsNil(o.Cast) {
		toSerialize["cast"] = o.Cast
	}
	if !IsNil(o.CastAuthor) {
		toSerialize["cast_author"] = o.CastAuthor
	}
	return toSerialize, nil
}

func (o *ReactionWithCastMeta) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reaction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReactionWithCastMeta := _ReactionWithCastMeta{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReactionWithCastMeta)

	if err != nil {
		return err
	}

	*o = ReactionWithCastMeta(varReactionWithCastMeta)

	return err
}

type NullableReactionWithCastMeta struct {
	value *ReactionWithCastMeta
	isSet bool
}

func (v NullableReactionWithCastMeta) Get() *ReactionWithCastMeta {
	return v.value
}

func (v *NullableReactionWithCastMeta) Set(val *ReactionWithCastMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableReactionWithCastMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableReactionWithCastMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactionWithCastMeta(val *ReactionWithCastMeta) *NullableReactionWithCastMeta {
	return &NullableReactionWithCastMeta{value: val, isSet: true}
}

func (v NullableReactionWithCastMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactionWithCastMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


