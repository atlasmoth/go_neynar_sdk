/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RecentUsersResponseResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecentUsersResponseResult{}

// RecentUsersResponseResult struct for RecentUsersResponseResult
type RecentUsersResponseResult struct {
	Users []User `json:"users,omitempty"`
	Next *NextCursor `json:"next,omitempty"`
}

// NewRecentUsersResponseResult instantiates a new RecentUsersResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecentUsersResponseResult() *RecentUsersResponseResult {
	this := RecentUsersResponseResult{}
	return &this
}

// NewRecentUsersResponseResultWithDefaults instantiates a new RecentUsersResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecentUsersResponseResultWithDefaults() *RecentUsersResponseResult {
	this := RecentUsersResponseResult{}
	return &this
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *RecentUsersResponseResult) GetUsers() []User {
	if o == nil || IsNil(o.Users) {
		var ret []User
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentUsersResponseResult) GetUsersOk() ([]User, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *RecentUsersResponseResult) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []User and assigns it to the Users field.
func (o *RecentUsersResponseResult) SetUsers(v []User) {
	o.Users = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *RecentUsersResponseResult) GetNext() NextCursor {
	if o == nil || IsNil(o.Next) {
		var ret NextCursor
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentUsersResponseResult) GetNextOk() (*NextCursor, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *RecentUsersResponseResult) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given NextCursor and assigns it to the Next field.
func (o *RecentUsersResponseResult) SetNext(v NextCursor) {
	o.Next = &v
}

func (o RecentUsersResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecentUsersResponseResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	return toSerialize, nil
}

type NullableRecentUsersResponseResult struct {
	value *RecentUsersResponseResult
	isSet bool
}

func (v NullableRecentUsersResponseResult) Get() *RecentUsersResponseResult {
	return v.value
}

func (v *NullableRecentUsersResponseResult) Set(val *RecentUsersResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableRecentUsersResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableRecentUsersResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecentUsersResponseResult(val *RecentUsersResponseResult) *NullableRecentUsersResponseResult {
	return &NullableRecentUsersResponseResult{value: val, isSet: true}
}

func (v NullableRecentUsersResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecentUsersResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


