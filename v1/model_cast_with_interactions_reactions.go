/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CastWithInteractionsReactions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CastWithInteractionsReactions{}

// CastWithInteractionsReactions struct for CastWithInteractionsReactions
type CastWithInteractionsReactions struct {
	Count int32 `json:"count"`
	Fids []int32 `json:"fids"`
	Fnames []string `json:"fnames"`
}

type _CastWithInteractionsReactions CastWithInteractionsReactions

// NewCastWithInteractionsReactions instantiates a new CastWithInteractionsReactions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCastWithInteractionsReactions(count int32, fids []int32, fnames []string) *CastWithInteractionsReactions {
	this := CastWithInteractionsReactions{}
	this.Count = count
	this.Fids = fids
	this.Fnames = fnames
	return &this
}

// NewCastWithInteractionsReactionsWithDefaults instantiates a new CastWithInteractionsReactions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCastWithInteractionsReactionsWithDefaults() *CastWithInteractionsReactions {
	this := CastWithInteractionsReactions{}
	return &this
}

// GetCount returns the Count field value
func (o *CastWithInteractionsReactions) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *CastWithInteractionsReactions) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *CastWithInteractionsReactions) SetCount(v int32) {
	o.Count = v
}

// GetFids returns the Fids field value
func (o *CastWithInteractionsReactions) GetFids() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Fids
}

// GetFidsOk returns a tuple with the Fids field value
// and a boolean to check if the value has been set.
func (o *CastWithInteractionsReactions) GetFidsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fids, true
}

// SetFids sets field value
func (o *CastWithInteractionsReactions) SetFids(v []int32) {
	o.Fids = v
}

// GetFnames returns the Fnames field value
func (o *CastWithInteractionsReactions) GetFnames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Fnames
}

// GetFnamesOk returns a tuple with the Fnames field value
// and a boolean to check if the value has been set.
func (o *CastWithInteractionsReactions) GetFnamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fnames, true
}

// SetFnames sets field value
func (o *CastWithInteractionsReactions) SetFnames(v []string) {
	o.Fnames = v
}

func (o CastWithInteractionsReactions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CastWithInteractionsReactions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["fids"] = o.Fids
	toSerialize["fnames"] = o.Fnames
	return toSerialize, nil
}

func (o *CastWithInteractionsReactions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"fids",
		"fnames",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCastWithInteractionsReactions := _CastWithInteractionsReactions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCastWithInteractionsReactions)

	if err != nil {
		return err
	}

	*o = CastWithInteractionsReactions(varCastWithInteractionsReactions)

	return err
}

type NullableCastWithInteractionsReactions struct {
	value *CastWithInteractionsReactions
	isSet bool
}

func (v NullableCastWithInteractionsReactions) Get() *CastWithInteractionsReactions {
	return v.value
}

func (v *NullableCastWithInteractionsReactions) Set(val *CastWithInteractionsReactions) {
	v.value = val
	v.isSet = true
}

func (v NullableCastWithInteractionsReactions) IsSet() bool {
	return v.isSet
}

func (v *NullableCastWithInteractionsReactions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastWithInteractionsReactions(val *CastWithInteractionsReactions) *NullableCastWithInteractionsReactions {
	return &NullableCastWithInteractionsReactions{value: val, isSet: true}
}

func (v NullableCastWithInteractionsReactions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastWithInteractionsReactions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


