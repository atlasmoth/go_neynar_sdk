/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CastReactionsResponseResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CastReactionsResponseResult{}

// CastReactionsResponseResult struct for CastReactionsResponseResult
type CastReactionsResponseResult struct {
	Casts []Reaction `json:"casts"`
	Next NextCursor `json:"next"`
}

type _CastReactionsResponseResult CastReactionsResponseResult

// NewCastReactionsResponseResult instantiates a new CastReactionsResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCastReactionsResponseResult(casts []Reaction, next NextCursor) *CastReactionsResponseResult {
	this := CastReactionsResponseResult{}
	this.Casts = casts
	this.Next = next
	return &this
}

// NewCastReactionsResponseResultWithDefaults instantiates a new CastReactionsResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCastReactionsResponseResultWithDefaults() *CastReactionsResponseResult {
	this := CastReactionsResponseResult{}
	return &this
}

// GetCasts returns the Casts field value
func (o *CastReactionsResponseResult) GetCasts() []Reaction {
	if o == nil {
		var ret []Reaction
		return ret
	}

	return o.Casts
}

// GetCastsOk returns a tuple with the Casts field value
// and a boolean to check if the value has been set.
func (o *CastReactionsResponseResult) GetCastsOk() ([]Reaction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Casts, true
}

// SetCasts sets field value
func (o *CastReactionsResponseResult) SetCasts(v []Reaction) {
	o.Casts = v
}

// GetNext returns the Next field value
func (o *CastReactionsResponseResult) GetNext() NextCursor {
	if o == nil {
		var ret NextCursor
		return ret
	}

	return o.Next
}

// GetNextOk returns a tuple with the Next field value
// and a boolean to check if the value has been set.
func (o *CastReactionsResponseResult) GetNextOk() (*NextCursor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Next, true
}

// SetNext sets field value
func (o *CastReactionsResponseResult) SetNext(v NextCursor) {
	o.Next = v
}

func (o CastReactionsResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CastReactionsResponseResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["casts"] = o.Casts
	toSerialize["next"] = o.Next
	return toSerialize, nil
}

func (o *CastReactionsResponseResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"casts",
		"next",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCastReactionsResponseResult := _CastReactionsResponseResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCastReactionsResponseResult)

	if err != nil {
		return err
	}

	*o = CastReactionsResponseResult(varCastReactionsResponseResult)

	return err
}

type NullableCastReactionsResponseResult struct {
	value *CastReactionsResponseResult
	isSet bool
}

func (v NullableCastReactionsResponseResult) Get() *CastReactionsResponseResult {
	return v.value
}

func (v *NullableCastReactionsResponseResult) Set(val *CastReactionsResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCastReactionsResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCastReactionsResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastReactionsResponseResult(val *CastReactionsResponseResult) *NullableCastReactionsResponseResult {
	return &NullableCastReactionsResponseResult{value: val, isSet: true}
}

func (v NullableCastReactionsResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastReactionsResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


