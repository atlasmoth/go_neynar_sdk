/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ReactionWithCastMetaReaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReactionWithCastMetaReaction{}

// ReactionWithCastMetaReaction struct for ReactionWithCastMetaReaction
type ReactionWithCastMetaReaction struct {
	// User identifier (unsigned integer)
	ReactorFid int32 `json:"reactor_fid"`
	ReactionType ReactionType `json:"reaction_type"`
	ReactionHash string `json:"reaction_hash"`
	ReactionTargetHash string `json:"reaction_target_hash"`
	ReactionTimestamp time.Time `json:"reaction_timestamp"`
}

type _ReactionWithCastMetaReaction ReactionWithCastMetaReaction

// NewReactionWithCastMetaReaction instantiates a new ReactionWithCastMetaReaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactionWithCastMetaReaction(reactorFid int32, reactionType ReactionType, reactionHash string, reactionTargetHash string, reactionTimestamp time.Time) *ReactionWithCastMetaReaction {
	this := ReactionWithCastMetaReaction{}
	this.ReactorFid = reactorFid
	this.ReactionType = reactionType
	this.ReactionHash = reactionHash
	this.ReactionTargetHash = reactionTargetHash
	this.ReactionTimestamp = reactionTimestamp
	return &this
}

// NewReactionWithCastMetaReactionWithDefaults instantiates a new ReactionWithCastMetaReaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionWithCastMetaReactionWithDefaults() *ReactionWithCastMetaReaction {
	this := ReactionWithCastMetaReaction{}
	var reactorFid int32 = 3
	this.ReactorFid = reactorFid
	return &this
}

// GetReactorFid returns the ReactorFid field value
func (o *ReactionWithCastMetaReaction) GetReactorFid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ReactorFid
}

// GetReactorFidOk returns a tuple with the ReactorFid field value
// and a boolean to check if the value has been set.
func (o *ReactionWithCastMetaReaction) GetReactorFidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReactorFid, true
}

// SetReactorFid sets field value
func (o *ReactionWithCastMetaReaction) SetReactorFid(v int32) {
	o.ReactorFid = v
}

// GetReactionType returns the ReactionType field value
func (o *ReactionWithCastMetaReaction) GetReactionType() ReactionType {
	if o == nil {
		var ret ReactionType
		return ret
	}

	return o.ReactionType
}

// GetReactionTypeOk returns a tuple with the ReactionType field value
// and a boolean to check if the value has been set.
func (o *ReactionWithCastMetaReaction) GetReactionTypeOk() (*ReactionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReactionType, true
}

// SetReactionType sets field value
func (o *ReactionWithCastMetaReaction) SetReactionType(v ReactionType) {
	o.ReactionType = v
}

// GetReactionHash returns the ReactionHash field value
func (o *ReactionWithCastMetaReaction) GetReactionHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReactionHash
}

// GetReactionHashOk returns a tuple with the ReactionHash field value
// and a boolean to check if the value has been set.
func (o *ReactionWithCastMetaReaction) GetReactionHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReactionHash, true
}

// SetReactionHash sets field value
func (o *ReactionWithCastMetaReaction) SetReactionHash(v string) {
	o.ReactionHash = v
}

// GetReactionTargetHash returns the ReactionTargetHash field value
func (o *ReactionWithCastMetaReaction) GetReactionTargetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReactionTargetHash
}

// GetReactionTargetHashOk returns a tuple with the ReactionTargetHash field value
// and a boolean to check if the value has been set.
func (o *ReactionWithCastMetaReaction) GetReactionTargetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReactionTargetHash, true
}

// SetReactionTargetHash sets field value
func (o *ReactionWithCastMetaReaction) SetReactionTargetHash(v string) {
	o.ReactionTargetHash = v
}

// GetReactionTimestamp returns the ReactionTimestamp field value
func (o *ReactionWithCastMetaReaction) GetReactionTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ReactionTimestamp
}

// GetReactionTimestampOk returns a tuple with the ReactionTimestamp field value
// and a boolean to check if the value has been set.
func (o *ReactionWithCastMetaReaction) GetReactionTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReactionTimestamp, true
}

// SetReactionTimestamp sets field value
func (o *ReactionWithCastMetaReaction) SetReactionTimestamp(v time.Time) {
	o.ReactionTimestamp = v
}

func (o ReactionWithCastMetaReaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReactionWithCastMetaReaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reactor_fid"] = o.ReactorFid
	toSerialize["reaction_type"] = o.ReactionType
	toSerialize["reaction_hash"] = o.ReactionHash
	toSerialize["reaction_target_hash"] = o.ReactionTargetHash
	toSerialize["reaction_timestamp"] = o.ReactionTimestamp
	return toSerialize, nil
}

func (o *ReactionWithCastMetaReaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reactor_fid",
		"reaction_type",
		"reaction_hash",
		"reaction_target_hash",
		"reaction_timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReactionWithCastMetaReaction := _ReactionWithCastMetaReaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReactionWithCastMetaReaction)

	if err != nil {
		return err
	}

	*o = ReactionWithCastMetaReaction(varReactionWithCastMetaReaction)

	return err
}

type NullableReactionWithCastMetaReaction struct {
	value *ReactionWithCastMetaReaction
	isSet bool
}

func (v NullableReactionWithCastMetaReaction) Get() *ReactionWithCastMetaReaction {
	return v.value
}

func (v *NullableReactionWithCastMetaReaction) Set(val *ReactionWithCastMetaReaction) {
	v.value = val
	v.isSet = true
}

func (v NullableReactionWithCastMetaReaction) IsSet() bool {
	return v.isSet
}

func (v *NullableReactionWithCastMetaReaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactionWithCastMetaReaction(val *ReactionWithCastMetaReaction) *NullableReactionWithCastMetaReaction {
	return &NullableReactionWithCastMetaReaction{value: val, isSet: true}
}

func (v NullableReactionWithCastMetaReaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactionWithCastMetaReaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


