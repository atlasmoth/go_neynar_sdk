/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ReactionWithCastMetaReaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReactionWithCastMetaReaction{}

// ReactionWithCastMetaReaction struct for ReactionWithCastMetaReaction
type ReactionWithCastMetaReaction struct {
	// User identifier (unsigned integer)
	ReactorFid *int32 `json:"reactor_fid,omitempty"`
	ReactionType *ReactionType `json:"reaction_type,omitempty"`
	ReactionHash *string `json:"reaction_hash,omitempty"`
	ReactionTargetHash *string `json:"reaction_target_hash,omitempty"`
	ReactionTimestamp *time.Time `json:"reaction_timestamp,omitempty"`
}

// NewReactionWithCastMetaReaction instantiates a new ReactionWithCastMetaReaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactionWithCastMetaReaction() *ReactionWithCastMetaReaction {
	this := ReactionWithCastMetaReaction{}
	var reactorFid int32 = 3
	this.ReactorFid = &reactorFid
	return &this
}

// NewReactionWithCastMetaReactionWithDefaults instantiates a new ReactionWithCastMetaReaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionWithCastMetaReactionWithDefaults() *ReactionWithCastMetaReaction {
	this := ReactionWithCastMetaReaction{}
	var reactorFid int32 = 3
	this.ReactorFid = &reactorFid
	return &this
}

// GetReactorFid returns the ReactorFid field value if set, zero value otherwise.
func (o *ReactionWithCastMetaReaction) GetReactorFid() int32 {
	if o == nil || IsNil(o.ReactorFid) {
		var ret int32
		return ret
	}
	return *o.ReactorFid
}

// GetReactorFidOk returns a tuple with the ReactorFid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionWithCastMetaReaction) GetReactorFidOk() (*int32, bool) {
	if o == nil || IsNil(o.ReactorFid) {
		return nil, false
	}
	return o.ReactorFid, true
}

// HasReactorFid returns a boolean if a field has been set.
func (o *ReactionWithCastMetaReaction) HasReactorFid() bool {
	if o != nil && !IsNil(o.ReactorFid) {
		return true
	}

	return false
}

// SetReactorFid gets a reference to the given int32 and assigns it to the ReactorFid field.
func (o *ReactionWithCastMetaReaction) SetReactorFid(v int32) {
	o.ReactorFid = &v
}

// GetReactionType returns the ReactionType field value if set, zero value otherwise.
func (o *ReactionWithCastMetaReaction) GetReactionType() ReactionType {
	if o == nil || IsNil(o.ReactionType) {
		var ret ReactionType
		return ret
	}
	return *o.ReactionType
}

// GetReactionTypeOk returns a tuple with the ReactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionWithCastMetaReaction) GetReactionTypeOk() (*ReactionType, bool) {
	if o == nil || IsNil(o.ReactionType) {
		return nil, false
	}
	return o.ReactionType, true
}

// HasReactionType returns a boolean if a field has been set.
func (o *ReactionWithCastMetaReaction) HasReactionType() bool {
	if o != nil && !IsNil(o.ReactionType) {
		return true
	}

	return false
}

// SetReactionType gets a reference to the given ReactionType and assigns it to the ReactionType field.
func (o *ReactionWithCastMetaReaction) SetReactionType(v ReactionType) {
	o.ReactionType = &v
}

// GetReactionHash returns the ReactionHash field value if set, zero value otherwise.
func (o *ReactionWithCastMetaReaction) GetReactionHash() string {
	if o == nil || IsNil(o.ReactionHash) {
		var ret string
		return ret
	}
	return *o.ReactionHash
}

// GetReactionHashOk returns a tuple with the ReactionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionWithCastMetaReaction) GetReactionHashOk() (*string, bool) {
	if o == nil || IsNil(o.ReactionHash) {
		return nil, false
	}
	return o.ReactionHash, true
}

// HasReactionHash returns a boolean if a field has been set.
func (o *ReactionWithCastMetaReaction) HasReactionHash() bool {
	if o != nil && !IsNil(o.ReactionHash) {
		return true
	}

	return false
}

// SetReactionHash gets a reference to the given string and assigns it to the ReactionHash field.
func (o *ReactionWithCastMetaReaction) SetReactionHash(v string) {
	o.ReactionHash = &v
}

// GetReactionTargetHash returns the ReactionTargetHash field value if set, zero value otherwise.
func (o *ReactionWithCastMetaReaction) GetReactionTargetHash() string {
	if o == nil || IsNil(o.ReactionTargetHash) {
		var ret string
		return ret
	}
	return *o.ReactionTargetHash
}

// GetReactionTargetHashOk returns a tuple with the ReactionTargetHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionWithCastMetaReaction) GetReactionTargetHashOk() (*string, bool) {
	if o == nil || IsNil(o.ReactionTargetHash) {
		return nil, false
	}
	return o.ReactionTargetHash, true
}

// HasReactionTargetHash returns a boolean if a field has been set.
func (o *ReactionWithCastMetaReaction) HasReactionTargetHash() bool {
	if o != nil && !IsNil(o.ReactionTargetHash) {
		return true
	}

	return false
}

// SetReactionTargetHash gets a reference to the given string and assigns it to the ReactionTargetHash field.
func (o *ReactionWithCastMetaReaction) SetReactionTargetHash(v string) {
	o.ReactionTargetHash = &v
}

// GetReactionTimestamp returns the ReactionTimestamp field value if set, zero value otherwise.
func (o *ReactionWithCastMetaReaction) GetReactionTimestamp() time.Time {
	if o == nil || IsNil(o.ReactionTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.ReactionTimestamp
}

// GetReactionTimestampOk returns a tuple with the ReactionTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactionWithCastMetaReaction) GetReactionTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ReactionTimestamp) {
		return nil, false
	}
	return o.ReactionTimestamp, true
}

// HasReactionTimestamp returns a boolean if a field has been set.
func (o *ReactionWithCastMetaReaction) HasReactionTimestamp() bool {
	if o != nil && !IsNil(o.ReactionTimestamp) {
		return true
	}

	return false
}

// SetReactionTimestamp gets a reference to the given time.Time and assigns it to the ReactionTimestamp field.
func (o *ReactionWithCastMetaReaction) SetReactionTimestamp(v time.Time) {
	o.ReactionTimestamp = &v
}

func (o ReactionWithCastMetaReaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReactionWithCastMetaReaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReactorFid) {
		toSerialize["reactor_fid"] = o.ReactorFid
	}
	if !IsNil(o.ReactionType) {
		toSerialize["reaction_type"] = o.ReactionType
	}
	if !IsNil(o.ReactionHash) {
		toSerialize["reaction_hash"] = o.ReactionHash
	}
	if !IsNil(o.ReactionTargetHash) {
		toSerialize["reaction_target_hash"] = o.ReactionTargetHash
	}
	if !IsNil(o.ReactionTimestamp) {
		toSerialize["reaction_timestamp"] = o.ReactionTimestamp
	}
	return toSerialize, nil
}

type NullableReactionWithCastMetaReaction struct {
	value *ReactionWithCastMetaReaction
	isSet bool
}

func (v NullableReactionWithCastMetaReaction) Get() *ReactionWithCastMetaReaction {
	return v.value
}

func (v *NullableReactionWithCastMetaReaction) Set(val *ReactionWithCastMetaReaction) {
	v.value = val
	v.isSet = true
}

func (v NullableReactionWithCastMetaReaction) IsSet() bool {
	return v.isSet
}

func (v *NullableReactionWithCastMetaReaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactionWithCastMetaReaction(val *ReactionWithCastMetaReaction) *NullableReactionWithCastMetaReaction {
	return &NullableReactionWithCastMetaReaction{value: val, isSet: true}
}

func (v NullableReactionWithCastMetaReaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactionWithCastMetaReaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


