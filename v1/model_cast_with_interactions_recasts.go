/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CastWithInteractionsRecasts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CastWithInteractionsRecasts{}

// CastWithInteractionsRecasts struct for CastWithInteractionsRecasts
type CastWithInteractionsRecasts struct {
	Count int32 `json:"count"`
	Fids []int32 `json:"fids"`
	AdditionalProperties map[string]interface{}
}

type _CastWithInteractionsRecasts CastWithInteractionsRecasts

// NewCastWithInteractionsRecasts instantiates a new CastWithInteractionsRecasts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCastWithInteractionsRecasts(count int32, fids []int32) *CastWithInteractionsRecasts {
	this := CastWithInteractionsRecasts{}
	this.Count = count
	this.Fids = fids
	return &this
}

// NewCastWithInteractionsRecastsWithDefaults instantiates a new CastWithInteractionsRecasts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCastWithInteractionsRecastsWithDefaults() *CastWithInteractionsRecasts {
	this := CastWithInteractionsRecasts{}
	return &this
}

// GetCount returns the Count field value
func (o *CastWithInteractionsRecasts) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *CastWithInteractionsRecasts) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *CastWithInteractionsRecasts) SetCount(v int32) {
	o.Count = v
}

// GetFids returns the Fids field value
func (o *CastWithInteractionsRecasts) GetFids() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Fids
}

// GetFidsOk returns a tuple with the Fids field value
// and a boolean to check if the value has been set.
func (o *CastWithInteractionsRecasts) GetFidsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fids, true
}

// SetFids sets field value
func (o *CastWithInteractionsRecasts) SetFids(v []int32) {
	o.Fids = v
}

func (o CastWithInteractionsRecasts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CastWithInteractionsRecasts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["fids"] = o.Fids

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CastWithInteractionsRecasts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"fids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCastWithInteractionsRecasts := _CastWithInteractionsRecasts{}

	err = json.Unmarshal(data, &varCastWithInteractionsRecasts)

	if err != nil {
		return err
	}

	*o = CastWithInteractionsRecasts(varCastWithInteractionsRecasts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "count")
		delete(additionalProperties, "fids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCastWithInteractionsRecasts struct {
	value *CastWithInteractionsRecasts
	isSet bool
}

func (v NullableCastWithInteractionsRecasts) Get() *CastWithInteractionsRecasts {
	return v.value
}

func (v *NullableCastWithInteractionsRecasts) Set(val *CastWithInteractionsRecasts) {
	v.value = val
	v.isSet = true
}

func (v NullableCastWithInteractionsRecasts) IsSet() bool {
	return v.isSet
}

func (v *NullableCastWithInteractionsRecasts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastWithInteractionsRecasts(val *CastWithInteractionsRecasts) *NullableCastWithInteractionsRecasts {
	return &NullableCastWithInteractionsRecasts{value: val, isSet: true}
}

func (v NullableCastWithInteractionsRecasts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastWithInteractionsRecasts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


