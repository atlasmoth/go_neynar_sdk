/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CastWithInteractionsRecasts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CastWithInteractionsRecasts{}

// CastWithInteractionsRecasts struct for CastWithInteractionsRecasts
type CastWithInteractionsRecasts struct {
	Count *int32 `json:"count,omitempty"`
	Fids []int32 `json:"fids,omitempty"`
}

// NewCastWithInteractionsRecasts instantiates a new CastWithInteractionsRecasts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCastWithInteractionsRecasts() *CastWithInteractionsRecasts {
	this := CastWithInteractionsRecasts{}
	return &this
}

// NewCastWithInteractionsRecastsWithDefaults instantiates a new CastWithInteractionsRecasts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCastWithInteractionsRecastsWithDefaults() *CastWithInteractionsRecasts {
	this := CastWithInteractionsRecasts{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *CastWithInteractionsRecasts) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CastWithInteractionsRecasts) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *CastWithInteractionsRecasts) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *CastWithInteractionsRecasts) SetCount(v int32) {
	o.Count = &v
}

// GetFids returns the Fids field value if set, zero value otherwise.
func (o *CastWithInteractionsRecasts) GetFids() []int32 {
	if o == nil || IsNil(o.Fids) {
		var ret []int32
		return ret
	}
	return o.Fids
}

// GetFidsOk returns a tuple with the Fids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CastWithInteractionsRecasts) GetFidsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Fids) {
		return nil, false
	}
	return o.Fids, true
}

// HasFids returns a boolean if a field has been set.
func (o *CastWithInteractionsRecasts) HasFids() bool {
	if o != nil && !IsNil(o.Fids) {
		return true
	}

	return false
}

// SetFids gets a reference to the given []int32 and assigns it to the Fids field.
func (o *CastWithInteractionsRecasts) SetFids(v []int32) {
	o.Fids = v
}

func (o CastWithInteractionsRecasts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CastWithInteractionsRecasts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Fids) {
		toSerialize["fids"] = o.Fids
	}
	return toSerialize, nil
}

type NullableCastWithInteractionsRecasts struct {
	value *CastWithInteractionsRecasts
	isSet bool
}

func (v NullableCastWithInteractionsRecasts) Get() *CastWithInteractionsRecasts {
	return v.value
}

func (v *NullableCastWithInteractionsRecasts) Set(val *CastWithInteractionsRecasts) {
	v.value = val
	v.isSet = true
}

func (v NullableCastWithInteractionsRecasts) IsSet() bool {
	return v.isSet
}

func (v *NullableCastWithInteractionsRecasts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastWithInteractionsRecasts(val *CastWithInteractionsRecasts) *NullableCastWithInteractionsRecasts {
	return &NullableCastWithInteractionsRecasts{value: val, isSet: true}
}

func (v NullableCastWithInteractionsRecasts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastWithInteractionsRecasts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


