/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CastAuthor - struct for CastAuthor
type CastAuthor struct {
	CastAuthorOneOf *CastAuthorOneOf
	User *User
}

// CastAuthorOneOfAsCastAuthor is a convenience function that returns CastAuthorOneOf wrapped in CastAuthor
func CastAuthorOneOfAsCastAuthor(v *CastAuthorOneOf) CastAuthor {
	return CastAuthor{
		CastAuthorOneOf: v,
	}
}

// UserAsCastAuthor is a convenience function that returns User wrapped in CastAuthor
func UserAsCastAuthor(v *User) CastAuthor {
	return CastAuthor{
		User: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CastAuthor) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CastAuthorOneOf
	err = newStrictDecoder(data).Decode(&dst.CastAuthorOneOf)
	if err == nil {
		jsonCastAuthorOneOf, _ := json.Marshal(dst.CastAuthorOneOf)
		if string(jsonCastAuthorOneOf) == "{}" { // empty struct
			dst.CastAuthorOneOf = nil
		} else {
			if err = validator.Validate(dst.CastAuthorOneOf); err != nil {
				dst.CastAuthorOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.CastAuthorOneOf = nil
	}

	// try to unmarshal data into User
	err = newStrictDecoder(data).Decode(&dst.User)
	if err == nil {
		jsonUser, _ := json.Marshal(dst.User)
		if string(jsonUser) == "{}" { // empty struct
			dst.User = nil
		} else {
			if err = validator.Validate(dst.User); err != nil {
				dst.User = nil
			} else {
				match++
			}
		}
	} else {
		dst.User = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CastAuthorOneOf = nil
		dst.User = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CastAuthor)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CastAuthor)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CastAuthor) MarshalJSON() ([]byte, error) {
	if src.CastAuthorOneOf != nil {
		return json.Marshal(&src.CastAuthorOneOf)
	}

	if src.User != nil {
		return json.Marshal(&src.User)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CastAuthor) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CastAuthorOneOf != nil {
		return obj.CastAuthorOneOf
	}

	if obj.User != nil {
		return obj.User
	}

	// all schemas are nil
	return nil
}

type NullableCastAuthor struct {
	value *CastAuthor
	isSet bool
}

func (v NullableCastAuthor) Get() *CastAuthor {
	return v.value
}

func (v *NullableCastAuthor) Set(val *CastAuthor) {
	v.value = val
	v.isSet = true
}

func (v NullableCastAuthor) IsSet() bool {
	return v.isSet
}

func (v *NullableCastAuthor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastAuthor(val *CastAuthor) *NullableCastAuthor {
	return &NullableCastAuthor{value: val, isSet: true}
}

func (v NullableCastAuthor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastAuthor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


