/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CastResponseResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CastResponseResult{}

// CastResponseResult struct for CastResponseResult
type CastResponseResult struct {
	Cast CastWithInteractions `json:"cast"`
	AdditionalProperties map[string]interface{}
}

type _CastResponseResult CastResponseResult

// NewCastResponseResult instantiates a new CastResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCastResponseResult(cast CastWithInteractions) *CastResponseResult {
	this := CastResponseResult{}
	this.Cast = cast
	return &this
}

// NewCastResponseResultWithDefaults instantiates a new CastResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCastResponseResultWithDefaults() *CastResponseResult {
	this := CastResponseResult{}
	return &this
}

// GetCast returns the Cast field value
func (o *CastResponseResult) GetCast() CastWithInteractions {
	if o == nil {
		var ret CastWithInteractions
		return ret
	}

	return o.Cast
}

// GetCastOk returns a tuple with the Cast field value
// and a boolean to check if the value has been set.
func (o *CastResponseResult) GetCastOk() (*CastWithInteractions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cast, true
}

// SetCast sets field value
func (o *CastResponseResult) SetCast(v CastWithInteractions) {
	o.Cast = v
}

func (o CastResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CastResponseResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cast"] = o.Cast

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CastResponseResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cast",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCastResponseResult := _CastResponseResult{}

	err = json.Unmarshal(data, &varCastResponseResult)

	if err != nil {
		return err
	}

	*o = CastResponseResult(varCastResponseResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cast")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCastResponseResult struct {
	value *CastResponseResult
	isSet bool
}

func (v NullableCastResponseResult) Get() *CastResponseResult {
	return v.value
}

func (v *NullableCastResponseResult) Set(val *CastResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCastResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCastResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastResponseResult(val *CastResponseResult) *NullableCastResponseResult {
	return &NullableCastResponseResult{value: val, isSet: true}
}

func (v NullableCastResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


