/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CastType The notification type of a cast. 
type CastType string

// List of CastType
const (
	CASTTYPE_MENTION CastType = "cast-mention"
	CASTTYPE_REPLY CastType = "cast-reply"
)

// All allowed values of CastType enum
var AllowedCastTypeEnumValues = []CastType{
	"cast-mention",
	"cast-reply",
}

func (v *CastType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CastType(value)
	for _, existing := range AllowedCastTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CastType", value)
}

// NewCastTypeFromValue returns a pointer to a valid CastType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCastTypeFromValue(v string) (*CastType, error) {
	ev := CastType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CastType: valid values are %v", v, AllowedCastTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CastType) IsValid() bool {
	for _, existing := range AllowedCastTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CastType value
func (v CastType) Ptr() *CastType {
	return &v
}

type NullableCastType struct {
	value *CastType
	isSet bool
}

func (v NullableCastType) Get() *CastType {
	return v.value
}

func (v *NullableCastType) Set(val *CastType) {
	v.value = val
	v.isSet = true
}

func (v NullableCastType) IsSet() bool {
	return v.isSet
}

func (v *NullableCastType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCastType(val *CastType) *NullableCastType {
	return &NullableCastType{value: val, isSet: true}
}

func (v NullableCastType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCastType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

