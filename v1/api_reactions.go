/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ReactionsAPIService ReactionsAPI service
type ReactionsAPIService service

type ApiCastLikesRequest struct {
	ctx context.Context
	ApiService *ReactionsAPIService
	apiKey *string
	castHash *string
	viewerFid *int32
	limit *int32
	cursor *string
}

// API key required for authentication.
func (r ApiCastLikesRequest) ApiKey(apiKey string) ApiCastLikesRequest {
	r.apiKey = &apiKey
	return r
}

// Cast hash
func (r ApiCastLikesRequest) CastHash(castHash string) ApiCastLikesRequest {
	r.castHash = &castHash
	return r
}

// fid of the user viewing this information, needed for contextual information.
func (r ApiCastLikesRequest) ViewerFid(viewerFid int32) ApiCastLikesRequest {
	r.viewerFid = &viewerFid
	return r
}

// Number of results to retrieve (default 25, max 150)
func (r ApiCastLikesRequest) Limit(limit int32) ApiCastLikesRequest {
	r.limit = &limit
	return r
}

// Pagination cursor.
func (r ApiCastLikesRequest) Cursor(cursor string) ApiCastLikesRequest {
	r.cursor = &cursor
	return r
}

func (r ApiCastLikesRequest) Execute() (*CastLikesResponse, *http.Response, error) {
	return r.ApiService.CastLikesExecute(r)
}

/*
CastLikes DEPRECATED - Get all like reactions for a specific cast

Now deprecated, use [/v2/farcaster/reactions/cast](https://docs.neynar.com/reference/reactions-cast) - Get all like reactions for a specific cast in reverse chronological order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCastLikesRequest

Deprecated
*/
func (a *ReactionsAPIService) CastLikes(ctx context.Context) ApiCastLikesRequest {
	return ApiCastLikesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CastLikesResponse
// Deprecated
func (a *ReactionsAPIService) CastLikesExecute(r ApiCastLikesRequest) (*CastLikesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CastLikesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReactionsAPIService.CastLikes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/cast-likes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.castHash != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "castHash", r.castHash, "form", "")
	} else {
		var defaultValue string = "0xfe90f9de682273e05b201629ad2338bdcd89b6be"
		r.castHash = &defaultValue
	}
	if r.viewerFid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "viewerFid", r.viewerFid, "form", "")
	} else {
		var defaultValue int32 = 3
		r.viewerFid = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 25
		r.limit = &defaultValue
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "api_key", r.apiKey, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCastReactionsRequest struct {
	ctx context.Context
	ApiService *ReactionsAPIService
	apiKey *string
	castHash *string
	viewerFid *int32
	limit *int32
	cursor *string
}

// API key required for authentication.
func (r ApiCastReactionsRequest) ApiKey(apiKey string) ApiCastReactionsRequest {
	r.apiKey = &apiKey
	return r
}

// Cast hash
func (r ApiCastReactionsRequest) CastHash(castHash string) ApiCastReactionsRequest {
	r.castHash = &castHash
	return r
}

// fid of the user viewing this information, needed for contextual information.
func (r ApiCastReactionsRequest) ViewerFid(viewerFid int32) ApiCastReactionsRequest {
	r.viewerFid = &viewerFid
	return r
}

// Number of results to retrieve (default 25, max 150)
func (r ApiCastReactionsRequest) Limit(limit int32) ApiCastReactionsRequest {
	r.limit = &limit
	return r
}

// Pagination cursor.
func (r ApiCastReactionsRequest) Cursor(cursor string) ApiCastReactionsRequest {
	r.cursor = &cursor
	return r
}

func (r ApiCastReactionsRequest) Execute() (*CastReactionsResponse, *http.Response, error) {
	return r.ApiService.CastReactionsExecute(r)
}

/*
CastReactions DEPRECATED - Get all reactions for a specific cast

Now deprecated, use [/v2/farcaster/reactions/cast](https://docs.neynar.com/reference/reactions-cast) - Get all reactions (likes and recasts) for a specific cast.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCastReactionsRequest

Deprecated
*/
func (a *ReactionsAPIService) CastReactions(ctx context.Context) ApiCastReactionsRequest {
	return ApiCastReactionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CastReactionsResponse
// Deprecated
func (a *ReactionsAPIService) CastReactionsExecute(r ApiCastReactionsRequest) (*CastReactionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CastReactionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReactionsAPIService.CastReactions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/cast-reactions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.castHash != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "castHash", r.castHash, "form", "")
	} else {
		var defaultValue string = "0xfe90f9de682273e05b201629ad2338bdcd89b6be"
		r.castHash = &defaultValue
	}
	if r.viewerFid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "viewerFid", r.viewerFid, "form", "")
	} else {
		var defaultValue int32 = 3
		r.viewerFid = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 25
		r.limit = &defaultValue
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "api_key", r.apiKey, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCastRecastersRequest struct {
	ctx context.Context
	ApiService *ReactionsAPIService
	apiKey *string
	castHash *string
	viewerFid *int32
	limit *int32
	cursor *string
}

// API key required for authentication.
func (r ApiCastRecastersRequest) ApiKey(apiKey string) ApiCastRecastersRequest {
	r.apiKey = &apiKey
	return r
}

// Cast hash
func (r ApiCastRecastersRequest) CastHash(castHash string) ApiCastRecastersRequest {
	r.castHash = &castHash
	return r
}

// fid of the user viewing this information, needed for contextual information.
func (r ApiCastRecastersRequest) ViewerFid(viewerFid int32) ApiCastRecastersRequest {
	r.viewerFid = &viewerFid
	return r
}

// Number of results to retrieve (default 25, max 150)
func (r ApiCastRecastersRequest) Limit(limit int32) ApiCastRecastersRequest {
	r.limit = &limit
	return r
}

// Pagination cursor.
func (r ApiCastRecastersRequest) Cursor(cursor string) ApiCastRecastersRequest {
	r.cursor = &cursor
	return r
}

func (r ApiCastRecastersRequest) Execute() (*CastRecasterResponse, *http.Response, error) {
	return r.ApiService.CastRecastersExecute(r)
}

/*
CastRecasters DEPRECATED - Get all recasters for a specific cast

Now deprecated, use [/v2/farcaster/reactions/cast](https://docs.neynar.com/reference/reactions-cast) - Get all recasters for a specific cast.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCastRecastersRequest

Deprecated
*/
func (a *ReactionsAPIService) CastRecasters(ctx context.Context) ApiCastRecastersRequest {
	return ApiCastRecastersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CastRecasterResponse
// Deprecated
func (a *ReactionsAPIService) CastRecastersExecute(r ApiCastRecastersRequest) (*CastRecasterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CastRecasterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReactionsAPIService.CastRecasters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/farcaster/cast-recasters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.castHash != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "castHash", r.castHash, "form", "")
	} else {
		var defaultValue string = "0xfe90f9de682273e05b201629ad2338bdcd89b6be"
		r.castHash = &defaultValue
	}
	if r.viewerFid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "viewerFid", r.viewerFid, "form", "")
	} else {
		var defaultValue int32 = 3
		r.viewerFid = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 25
		r.limit = &defaultValue
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.apiKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "api_key", r.apiKey, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRes
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
