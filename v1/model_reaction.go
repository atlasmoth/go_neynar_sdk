/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Reaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Reaction{}

// Reaction struct for Reaction
type Reaction struct {
	Type *ReactionType `json:"type,omitempty"`
	// Ethereum address
	Hash *string `json:"hash,omitempty"`
	Reactor *Reactor `json:"reactor,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// Cast Hash
	CastHash *string `json:"castHash,omitempty"`
}

// NewReaction instantiates a new Reaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReaction() *Reaction {
	this := Reaction{}
	var hash string = "0x5A927Ac639636E534b678e81768CA19e2C6280B7"
	this.Hash = &hash
	var castHash string = "0xfe90f9de682273e05b201629ad2338bdcd89b6be"
	this.CastHash = &castHash
	return &this
}

// NewReactionWithDefaults instantiates a new Reaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionWithDefaults() *Reaction {
	this := Reaction{}
	var hash string = "0x5A927Ac639636E534b678e81768CA19e2C6280B7"
	this.Hash = &hash
	var castHash string = "0xfe90f9de682273e05b201629ad2338bdcd89b6be"
	this.CastHash = &castHash
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Reaction) GetType() ReactionType {
	if o == nil || IsNil(o.Type) {
		var ret ReactionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reaction) GetTypeOk() (*ReactionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Reaction) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ReactionType and assigns it to the Type field.
func (o *Reaction) SetType(v ReactionType) {
	o.Type = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *Reaction) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reaction) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *Reaction) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *Reaction) SetHash(v string) {
	o.Hash = &v
}

// GetReactor returns the Reactor field value if set, zero value otherwise.
func (o *Reaction) GetReactor() Reactor {
	if o == nil || IsNil(o.Reactor) {
		var ret Reactor
		return ret
	}
	return *o.Reactor
}

// GetReactorOk returns a tuple with the Reactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reaction) GetReactorOk() (*Reactor, bool) {
	if o == nil || IsNil(o.Reactor) {
		return nil, false
	}
	return o.Reactor, true
}

// HasReactor returns a boolean if a field has been set.
func (o *Reaction) HasReactor() bool {
	if o != nil && !IsNil(o.Reactor) {
		return true
	}

	return false
}

// SetReactor gets a reference to the given Reactor and assigns it to the Reactor field.
func (o *Reaction) SetReactor(v Reactor) {
	o.Reactor = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Reaction) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reaction) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Reaction) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *Reaction) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetCastHash returns the CastHash field value if set, zero value otherwise.
func (o *Reaction) GetCastHash() string {
	if o == nil || IsNil(o.CastHash) {
		var ret string
		return ret
	}
	return *o.CastHash
}

// GetCastHashOk returns a tuple with the CastHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reaction) GetCastHashOk() (*string, bool) {
	if o == nil || IsNil(o.CastHash) {
		return nil, false
	}
	return o.CastHash, true
}

// HasCastHash returns a boolean if a field has been set.
func (o *Reaction) HasCastHash() bool {
	if o != nil && !IsNil(o.CastHash) {
		return true
	}

	return false
}

// SetCastHash gets a reference to the given string and assigns it to the CastHash field.
func (o *Reaction) SetCastHash(v string) {
	o.CastHash = &v
}

func (o Reaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Reaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.Reactor) {
		toSerialize["reactor"] = o.Reactor
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.CastHash) {
		toSerialize["castHash"] = o.CastHash
	}
	return toSerialize, nil
}

type NullableReaction struct {
	value *Reaction
	isSet bool
}

func (v NullableReaction) Get() *Reaction {
	return v.value
}

func (v *NullableReaction) Set(val *Reaction) {
	v.value = val
	v.isSet = true
}

func (v NullableReaction) IsSet() bool {
	return v.isSet
}

func (v *NullableReaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReaction(val *Reaction) *NullableReaction {
	return &NullableReaction{value: val, isSet: true}
}

func (v NullableReaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


