/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Reaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Reaction{}

// Reaction struct for Reaction
type Reaction struct {
	Type ReactionType `json:"type"`
	// Ethereum address
	Hash string `json:"hash"`
	Reactor Reactor `json:"reactor"`
	Timestamp time.Time `json:"timestamp"`
	// Cast Hash
	CastHash string `json:"castHash"`
	AdditionalProperties map[string]interface{}
}

type _Reaction Reaction

// NewReaction instantiates a new Reaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReaction(type_ ReactionType, hash string, reactor Reactor, timestamp time.Time, castHash string) *Reaction {
	this := Reaction{}
	this.Type = type_
	this.Hash = hash
	this.Reactor = reactor
	this.Timestamp = timestamp
	this.CastHash = castHash
	return &this
}

// NewReactionWithDefaults instantiates a new Reaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionWithDefaults() *Reaction {
	this := Reaction{}
	var hash string = "0x5A927Ac639636E534b678e81768CA19e2C6280B7"
	this.Hash = hash
	var castHash string = "0xfe90f9de682273e05b201629ad2338bdcd89b6be"
	this.CastHash = castHash
	return &this
}

// GetType returns the Type field value
func (o *Reaction) GetType() ReactionType {
	if o == nil {
		var ret ReactionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Reaction) GetTypeOk() (*ReactionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Reaction) SetType(v ReactionType) {
	o.Type = v
}

// GetHash returns the Hash field value
func (o *Reaction) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *Reaction) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *Reaction) SetHash(v string) {
	o.Hash = v
}

// GetReactor returns the Reactor field value
func (o *Reaction) GetReactor() Reactor {
	if o == nil {
		var ret Reactor
		return ret
	}

	return o.Reactor
}

// GetReactorOk returns a tuple with the Reactor field value
// and a boolean to check if the value has been set.
func (o *Reaction) GetReactorOk() (*Reactor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reactor, true
}

// SetReactor sets field value
func (o *Reaction) SetReactor(v Reactor) {
	o.Reactor = v
}

// GetTimestamp returns the Timestamp field value
func (o *Reaction) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Reaction) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Reaction) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetCastHash returns the CastHash field value
func (o *Reaction) GetCastHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CastHash
}

// GetCastHashOk returns a tuple with the CastHash field value
// and a boolean to check if the value has been set.
func (o *Reaction) GetCastHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CastHash, true
}

// SetCastHash sets field value
func (o *Reaction) SetCastHash(v string) {
	o.CastHash = v
}

func (o Reaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Reaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["hash"] = o.Hash
	toSerialize["reactor"] = o.Reactor
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["castHash"] = o.CastHash

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Reaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"hash",
		"reactor",
		"timestamp",
		"castHash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReaction := _Reaction{}

	err = json.Unmarshal(data, &varReaction)

	if err != nil {
		return err
	}

	*o = Reaction(varReaction)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "hash")
		delete(additionalProperties, "reactor")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "castHash")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReaction struct {
	value *Reaction
	isSet bool
}

func (v NullableReaction) Get() *Reaction {
	return v.value
}

func (v *NullableReaction) Set(val *Reaction) {
	v.value = val
	v.isSet = true
}

func (v NullableReaction) IsSet() bool {
	return v.isSet
}

func (v *NullableReaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReaction(val *Reaction) *NullableReaction {
	return &NullableReaction{value: val, isSet: true}
}

func (v NullableReaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


