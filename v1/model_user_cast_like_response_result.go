/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserCastLikeResponseResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserCastLikeResponseResult{}

// UserCastLikeResponseResult struct for UserCastLikeResponseResult
type UserCastLikeResponseResult struct {
	Reactor *User `json:"reactor,omitempty"`
	Likes []ReactionWithCastMeta `json:"likes,omitempty"`
	Next *NextCursor `json:"next,omitempty"`
}

// NewUserCastLikeResponseResult instantiates a new UserCastLikeResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserCastLikeResponseResult() *UserCastLikeResponseResult {
	this := UserCastLikeResponseResult{}
	return &this
}

// NewUserCastLikeResponseResultWithDefaults instantiates a new UserCastLikeResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserCastLikeResponseResultWithDefaults() *UserCastLikeResponseResult {
	this := UserCastLikeResponseResult{}
	return &this
}

// GetReactor returns the Reactor field value if set, zero value otherwise.
func (o *UserCastLikeResponseResult) GetReactor() User {
	if o == nil || IsNil(o.Reactor) {
		var ret User
		return ret
	}
	return *o.Reactor
}

// GetReactorOk returns a tuple with the Reactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCastLikeResponseResult) GetReactorOk() (*User, bool) {
	if o == nil || IsNil(o.Reactor) {
		return nil, false
	}
	return o.Reactor, true
}

// HasReactor returns a boolean if a field has been set.
func (o *UserCastLikeResponseResult) HasReactor() bool {
	if o != nil && !IsNil(o.Reactor) {
		return true
	}

	return false
}

// SetReactor gets a reference to the given User and assigns it to the Reactor field.
func (o *UserCastLikeResponseResult) SetReactor(v User) {
	o.Reactor = &v
}

// GetLikes returns the Likes field value if set, zero value otherwise.
func (o *UserCastLikeResponseResult) GetLikes() []ReactionWithCastMeta {
	if o == nil || IsNil(o.Likes) {
		var ret []ReactionWithCastMeta
		return ret
	}
	return o.Likes
}

// GetLikesOk returns a tuple with the Likes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCastLikeResponseResult) GetLikesOk() ([]ReactionWithCastMeta, bool) {
	if o == nil || IsNil(o.Likes) {
		return nil, false
	}
	return o.Likes, true
}

// HasLikes returns a boolean if a field has been set.
func (o *UserCastLikeResponseResult) HasLikes() bool {
	if o != nil && !IsNil(o.Likes) {
		return true
	}

	return false
}

// SetLikes gets a reference to the given []ReactionWithCastMeta and assigns it to the Likes field.
func (o *UserCastLikeResponseResult) SetLikes(v []ReactionWithCastMeta) {
	o.Likes = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *UserCastLikeResponseResult) GetNext() NextCursor {
	if o == nil || IsNil(o.Next) {
		var ret NextCursor
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCastLikeResponseResult) GetNextOk() (*NextCursor, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *UserCastLikeResponseResult) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given NextCursor and assigns it to the Next field.
func (o *UserCastLikeResponseResult) SetNext(v NextCursor) {
	o.Next = &v
}

func (o UserCastLikeResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserCastLikeResponseResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reactor) {
		toSerialize["reactor"] = o.Reactor
	}
	if !IsNil(o.Likes) {
		toSerialize["likes"] = o.Likes
	}
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	return toSerialize, nil
}

type NullableUserCastLikeResponseResult struct {
	value *UserCastLikeResponseResult
	isSet bool
}

func (v NullableUserCastLikeResponseResult) Get() *UserCastLikeResponseResult {
	return v.value
}

func (v *NullableUserCastLikeResponseResult) Set(val *UserCastLikeResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCastLikeResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCastLikeResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCastLikeResponseResult(val *UserCastLikeResponseResult) *NullableUserCastLikeResponseResult {
	return &NullableUserCastLikeResponseResult{value: val, isSet: true}
}

func (v NullableUserCastLikeResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCastLikeResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


