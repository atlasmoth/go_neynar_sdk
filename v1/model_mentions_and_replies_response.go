/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the MentionsAndRepliesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MentionsAndRepliesResponse{}

// MentionsAndRepliesResponse struct for MentionsAndRepliesResponse
type MentionsAndRepliesResponse struct {
	Result MentionsAndRepliesResponseResult `json:"result"`
	AdditionalProperties map[string]interface{}
}

type _MentionsAndRepliesResponse MentionsAndRepliesResponse

// NewMentionsAndRepliesResponse instantiates a new MentionsAndRepliesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMentionsAndRepliesResponse(result MentionsAndRepliesResponseResult) *MentionsAndRepliesResponse {
	this := MentionsAndRepliesResponse{}
	this.Result = result
	return &this
}

// NewMentionsAndRepliesResponseWithDefaults instantiates a new MentionsAndRepliesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMentionsAndRepliesResponseWithDefaults() *MentionsAndRepliesResponse {
	this := MentionsAndRepliesResponse{}
	return &this
}

// GetResult returns the Result field value
func (o *MentionsAndRepliesResponse) GetResult() MentionsAndRepliesResponseResult {
	if o == nil {
		var ret MentionsAndRepliesResponseResult
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *MentionsAndRepliesResponse) GetResultOk() (*MentionsAndRepliesResponseResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *MentionsAndRepliesResponse) SetResult(v MentionsAndRepliesResponseResult) {
	o.Result = v
}

func (o MentionsAndRepliesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MentionsAndRepliesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MentionsAndRepliesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMentionsAndRepliesResponse := _MentionsAndRepliesResponse{}

	err = json.Unmarshal(data, &varMentionsAndRepliesResponse)

	if err != nil {
		return err
	}

	*o = MentionsAndRepliesResponse(varMentionsAndRepliesResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "result")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMentionsAndRepliesResponse struct {
	value *MentionsAndRepliesResponse
	isSet bool
}

func (v NullableMentionsAndRepliesResponse) Get() *MentionsAndRepliesResponse {
	return v.value
}

func (v *NullableMentionsAndRepliesResponse) Set(val *MentionsAndRepliesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMentionsAndRepliesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMentionsAndRepliesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMentionsAndRepliesResponse(val *MentionsAndRepliesResponse) *NullableMentionsAndRepliesResponse {
	return &NullableMentionsAndRepliesResponse{value: val, isSet: true}
}

func (v NullableMentionsAndRepliesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMentionsAndRepliesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


