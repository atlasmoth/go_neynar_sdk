/*
Farcaster API V1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ViewerContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewerContext{}

// ViewerContext struct for ViewerContext
type ViewerContext struct {
	Following *bool `json:"following,omitempty"`
	FollowedBy *bool `json:"followedBy,omitempty"`
	Liked *bool `json:"liked,omitempty"`
	Recasted *bool `json:"recasted,omitempty"`
}

// NewViewerContext instantiates a new ViewerContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewerContext() *ViewerContext {
	this := ViewerContext{}
	return &this
}

// NewViewerContextWithDefaults instantiates a new ViewerContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewerContextWithDefaults() *ViewerContext {
	this := ViewerContext{}
	return &this
}

// GetFollowing returns the Following field value if set, zero value otherwise.
func (o *ViewerContext) GetFollowing() bool {
	if o == nil || IsNil(o.Following) {
		var ret bool
		return ret
	}
	return *o.Following
}

// GetFollowingOk returns a tuple with the Following field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewerContext) GetFollowingOk() (*bool, bool) {
	if o == nil || IsNil(o.Following) {
		return nil, false
	}
	return o.Following, true
}

// HasFollowing returns a boolean if a field has been set.
func (o *ViewerContext) HasFollowing() bool {
	if o != nil && !IsNil(o.Following) {
		return true
	}

	return false
}

// SetFollowing gets a reference to the given bool and assigns it to the Following field.
func (o *ViewerContext) SetFollowing(v bool) {
	o.Following = &v
}

// GetFollowedBy returns the FollowedBy field value if set, zero value otherwise.
func (o *ViewerContext) GetFollowedBy() bool {
	if o == nil || IsNil(o.FollowedBy) {
		var ret bool
		return ret
	}
	return *o.FollowedBy
}

// GetFollowedByOk returns a tuple with the FollowedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewerContext) GetFollowedByOk() (*bool, bool) {
	if o == nil || IsNil(o.FollowedBy) {
		return nil, false
	}
	return o.FollowedBy, true
}

// HasFollowedBy returns a boolean if a field has been set.
func (o *ViewerContext) HasFollowedBy() bool {
	if o != nil && !IsNil(o.FollowedBy) {
		return true
	}

	return false
}

// SetFollowedBy gets a reference to the given bool and assigns it to the FollowedBy field.
func (o *ViewerContext) SetFollowedBy(v bool) {
	o.FollowedBy = &v
}

// GetLiked returns the Liked field value if set, zero value otherwise.
func (o *ViewerContext) GetLiked() bool {
	if o == nil || IsNil(o.Liked) {
		var ret bool
		return ret
	}
	return *o.Liked
}

// GetLikedOk returns a tuple with the Liked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewerContext) GetLikedOk() (*bool, bool) {
	if o == nil || IsNil(o.Liked) {
		return nil, false
	}
	return o.Liked, true
}

// HasLiked returns a boolean if a field has been set.
func (o *ViewerContext) HasLiked() bool {
	if o != nil && !IsNil(o.Liked) {
		return true
	}

	return false
}

// SetLiked gets a reference to the given bool and assigns it to the Liked field.
func (o *ViewerContext) SetLiked(v bool) {
	o.Liked = &v
}

// GetRecasted returns the Recasted field value if set, zero value otherwise.
func (o *ViewerContext) GetRecasted() bool {
	if o == nil || IsNil(o.Recasted) {
		var ret bool
		return ret
	}
	return *o.Recasted
}

// GetRecastedOk returns a tuple with the Recasted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewerContext) GetRecastedOk() (*bool, bool) {
	if o == nil || IsNil(o.Recasted) {
		return nil, false
	}
	return o.Recasted, true
}

// HasRecasted returns a boolean if a field has been set.
func (o *ViewerContext) HasRecasted() bool {
	if o != nil && !IsNil(o.Recasted) {
		return true
	}

	return false
}

// SetRecasted gets a reference to the given bool and assigns it to the Recasted field.
func (o *ViewerContext) SetRecasted(v bool) {
	o.Recasted = &v
}

func (o ViewerContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewerContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Following) {
		toSerialize["following"] = o.Following
	}
	if !IsNil(o.FollowedBy) {
		toSerialize["followedBy"] = o.FollowedBy
	}
	if !IsNil(o.Liked) {
		toSerialize["liked"] = o.Liked
	}
	if !IsNil(o.Recasted) {
		toSerialize["recasted"] = o.Recasted
	}
	return toSerialize, nil
}

type NullableViewerContext struct {
	value *ViewerContext
	isSet bool
}

func (v NullableViewerContext) Get() *ViewerContext {
	return v.value
}

func (v *NullableViewerContext) Set(val *ViewerContext) {
	v.value = val
	v.isSet = true
}

func (v NullableViewerContext) IsSet() bool {
	return v.isSet
}

func (v *NullableViewerContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewerContext(val *ViewerContext) *NullableViewerContext {
	return &NullableViewerContext{value: val, isSet: true}
}

func (v NullableViewerContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewerContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


