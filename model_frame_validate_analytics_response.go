/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FrameValidateAnalyticsResponse - struct for FrameValidateAnalyticsResponse
type FrameValidateAnalyticsResponse struct {
	FrameValidateAnalyticsInputText           *FrameValidateAnalyticsInputText
	FrameValidateAnalyticsInteractionsPerCast *FrameValidateAnalyticsInteractionsPerCast
	FrameValidateAnalyticsInteractors         *FrameValidateAnalyticsInteractors
	FrameValidateAnalyticsTotalInteractors    *FrameValidateAnalyticsTotalInteractors
}

// FrameValidateAnalyticsInputTextAsFrameValidateAnalyticsResponse is a convenience function that returns FrameValidateAnalyticsInputText wrapped in FrameValidateAnalyticsResponse
func FrameValidateAnalyticsInputTextAsFrameValidateAnalyticsResponse(v *FrameValidateAnalyticsInputText) FrameValidateAnalyticsResponse {
	return FrameValidateAnalyticsResponse{
		FrameValidateAnalyticsInputText: v,
	}
}

// FrameValidateAnalyticsInteractionsPerCastAsFrameValidateAnalyticsResponse is a convenience function that returns FrameValidateAnalyticsInteractionsPerCast wrapped in FrameValidateAnalyticsResponse
func FrameValidateAnalyticsInteractionsPerCastAsFrameValidateAnalyticsResponse(v *FrameValidateAnalyticsInteractionsPerCast) FrameValidateAnalyticsResponse {
	return FrameValidateAnalyticsResponse{
		FrameValidateAnalyticsInteractionsPerCast: v,
	}
}

// FrameValidateAnalyticsInteractorsAsFrameValidateAnalyticsResponse is a convenience function that returns FrameValidateAnalyticsInteractors wrapped in FrameValidateAnalyticsResponse
func FrameValidateAnalyticsInteractorsAsFrameValidateAnalyticsResponse(v *FrameValidateAnalyticsInteractors) FrameValidateAnalyticsResponse {
	return FrameValidateAnalyticsResponse{
		FrameValidateAnalyticsInteractors: v,
	}
}

// FrameValidateAnalyticsTotalInteractorsAsFrameValidateAnalyticsResponse is a convenience function that returns FrameValidateAnalyticsTotalInteractors wrapped in FrameValidateAnalyticsResponse
func FrameValidateAnalyticsTotalInteractorsAsFrameValidateAnalyticsResponse(v *FrameValidateAnalyticsTotalInteractors) FrameValidateAnalyticsResponse {
	return FrameValidateAnalyticsResponse{
		FrameValidateAnalyticsTotalInteractors: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *FrameValidateAnalyticsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FrameValidateAnalyticsInputText
	err = newStrictDecoder(data).Decode(&dst.FrameValidateAnalyticsInputText)
	if err == nil {
		jsonFrameValidateAnalyticsInputText, _ := json.Marshal(dst.FrameValidateAnalyticsInputText)
		if string(jsonFrameValidateAnalyticsInputText) == "{}" { // empty struct
			dst.FrameValidateAnalyticsInputText = nil
		} else {
			if err = validator.Validate(dst.FrameValidateAnalyticsInputText); err != nil {
				dst.FrameValidateAnalyticsInputText = nil
			} else {
				match++
			}
		}
	} else {
		dst.FrameValidateAnalyticsInputText = nil
	}

	// try to unmarshal data into FrameValidateAnalyticsInteractionsPerCast
	err = newStrictDecoder(data).Decode(&dst.FrameValidateAnalyticsInteractionsPerCast)
	if err == nil {
		jsonFrameValidateAnalyticsInteractionsPerCast, _ := json.Marshal(dst.FrameValidateAnalyticsInteractionsPerCast)
		if string(jsonFrameValidateAnalyticsInteractionsPerCast) == "{}" { // empty struct
			dst.FrameValidateAnalyticsInteractionsPerCast = nil
		} else {
			if err = validator.Validate(dst.FrameValidateAnalyticsInteractionsPerCast); err != nil {
				dst.FrameValidateAnalyticsInteractionsPerCast = nil
			} else {
				match++
			}
		}
	} else {
		dst.FrameValidateAnalyticsInteractionsPerCast = nil
	}

	// try to unmarshal data into FrameValidateAnalyticsInteractors
	err = newStrictDecoder(data).Decode(&dst.FrameValidateAnalyticsInteractors)
	if err == nil {
		jsonFrameValidateAnalyticsInteractors, _ := json.Marshal(dst.FrameValidateAnalyticsInteractors)
		if string(jsonFrameValidateAnalyticsInteractors) == "{}" { // empty struct
			dst.FrameValidateAnalyticsInteractors = nil
		} else {
			if err = validator.Validate(dst.FrameValidateAnalyticsInteractors); err != nil {
				dst.FrameValidateAnalyticsInteractors = nil
			} else {
				match++
			}
		}
	} else {
		dst.FrameValidateAnalyticsInteractors = nil
	}

	// try to unmarshal data into FrameValidateAnalyticsTotalInteractors
	err = newStrictDecoder(data).Decode(&dst.FrameValidateAnalyticsTotalInteractors)
	if err == nil {
		jsonFrameValidateAnalyticsTotalInteractors, _ := json.Marshal(dst.FrameValidateAnalyticsTotalInteractors)
		if string(jsonFrameValidateAnalyticsTotalInteractors) == "{}" { // empty struct
			dst.FrameValidateAnalyticsTotalInteractors = nil
		} else {
			if err = validator.Validate(dst.FrameValidateAnalyticsTotalInteractors); err != nil {
				dst.FrameValidateAnalyticsTotalInteractors = nil
			} else {
				match++
			}
		}
	} else {
		dst.FrameValidateAnalyticsTotalInteractors = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FrameValidateAnalyticsInputText = nil
		dst.FrameValidateAnalyticsInteractionsPerCast = nil
		dst.FrameValidateAnalyticsInteractors = nil
		dst.FrameValidateAnalyticsTotalInteractors = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FrameValidateAnalyticsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FrameValidateAnalyticsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FrameValidateAnalyticsResponse) MarshalJSON() ([]byte, error) {
	if src.FrameValidateAnalyticsInputText != nil {
		return json.Marshal(&src.FrameValidateAnalyticsInputText)
	}

	if src.FrameValidateAnalyticsInteractionsPerCast != nil {
		return json.Marshal(&src.FrameValidateAnalyticsInteractionsPerCast)
	}

	if src.FrameValidateAnalyticsInteractors != nil {
		return json.Marshal(&src.FrameValidateAnalyticsInteractors)
	}

	if src.FrameValidateAnalyticsTotalInteractors != nil {
		return json.Marshal(&src.FrameValidateAnalyticsTotalInteractors)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FrameValidateAnalyticsResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.FrameValidateAnalyticsInputText != nil {
		return obj.FrameValidateAnalyticsInputText
	}

	if obj.FrameValidateAnalyticsInteractionsPerCast != nil {
		return obj.FrameValidateAnalyticsInteractionsPerCast
	}

	if obj.FrameValidateAnalyticsInteractors != nil {
		return obj.FrameValidateAnalyticsInteractors
	}

	if obj.FrameValidateAnalyticsTotalInteractors != nil {
		return obj.FrameValidateAnalyticsTotalInteractors
	}

	// all schemas are nil
	return nil
}

type NullableFrameValidateAnalyticsResponse struct {
	value *FrameValidateAnalyticsResponse
	isSet bool
}

func (v NullableFrameValidateAnalyticsResponse) Get() *FrameValidateAnalyticsResponse {
	return v.value
}

func (v *NullableFrameValidateAnalyticsResponse) Set(val *FrameValidateAnalyticsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFrameValidateAnalyticsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFrameValidateAnalyticsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrameValidateAnalyticsResponse(val *FrameValidateAnalyticsResponse) *NullableFrameValidateAnalyticsResponse {
	return &NullableFrameValidateAnalyticsResponse{value: val, isSet: true}
}

func (v NullableFrameValidateAnalyticsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrameValidateAnalyticsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
