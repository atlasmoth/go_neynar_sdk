/*
Farcaster API V2

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReactionWithUserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReactionWithUserInfo{}

// ReactionWithUserInfo struct for ReactionWithUserInfo
type ReactionWithUserInfo struct {
	Object string `json:"object"`
	Cast CastDehydrated `json:"cast"`
	User User `json:"user"`
}

type _ReactionWithUserInfo ReactionWithUserInfo

// NewReactionWithUserInfo instantiates a new ReactionWithUserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactionWithUserInfo(object string, cast CastDehydrated, user User) *ReactionWithUserInfo {
	this := ReactionWithUserInfo{}
	this.Object = object
	this.Cast = cast
	this.User = user
	return &this
}

// NewReactionWithUserInfoWithDefaults instantiates a new ReactionWithUserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionWithUserInfoWithDefaults() *ReactionWithUserInfo {
	this := ReactionWithUserInfo{}
	return &this
}

// GetObject returns the Object field value
func (o *ReactionWithUserInfo) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *ReactionWithUserInfo) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *ReactionWithUserInfo) SetObject(v string) {
	o.Object = v
}

// GetCast returns the Cast field value
func (o *ReactionWithUserInfo) GetCast() CastDehydrated {
	if o == nil {
		var ret CastDehydrated
		return ret
	}

	return o.Cast
}

// GetCastOk returns a tuple with the Cast field value
// and a boolean to check if the value has been set.
func (o *ReactionWithUserInfo) GetCastOk() (*CastDehydrated, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cast, true
}

// SetCast sets field value
func (o *ReactionWithUserInfo) SetCast(v CastDehydrated) {
	o.Cast = v
}

// GetUser returns the User field value
func (o *ReactionWithUserInfo) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *ReactionWithUserInfo) GetUserOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *ReactionWithUserInfo) SetUser(v User) {
	o.User = v
}

func (o ReactionWithUserInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReactionWithUserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["cast"] = o.Cast
	toSerialize["user"] = o.User
	return toSerialize, nil
}

func (o *ReactionWithUserInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"cast",
		"user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReactionWithUserInfo := _ReactionWithUserInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReactionWithUserInfo)

	if err != nil {
		return err
	}

	*o = ReactionWithUserInfo(varReactionWithUserInfo)

	return err
}

type NullableReactionWithUserInfo struct {
	value *ReactionWithUserInfo
	isSet bool
}

func (v NullableReactionWithUserInfo) Get() *ReactionWithUserInfo {
	return v.value
}

func (v *NullableReactionWithUserInfo) Set(val *ReactionWithUserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableReactionWithUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableReactionWithUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactionWithUserInfo(val *ReactionWithUserInfo) *NullableReactionWithUserInfo {
	return &NullableReactionWithUserInfo{value: val, isSet: true}
}

func (v NullableReactionWithUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactionWithUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


